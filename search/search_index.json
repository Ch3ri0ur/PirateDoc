{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Pirate # Pirate (short for \"Pirate Implements Remote Access to Experiments\") is a remote monitoring solution for Arduino projects. The solution uses a Raspberry PI as an intermediate server translating and broadcasting between the Arduino project and client webpages. It also supports the use of a webcam for a live view of the project. Getting Started Motivation # When using an Arduino there are a lot of pain points. Pirate looks to solve a few of them: Reading variables is often done by printing them via Serial.Print to a console. String handling is slow and might influence cycle time. The data scrolls by to fast to be useful. If a display is used the available space is to little to be very useful. Changing parameters often entails changing them in the source, recompiling and flashing again. Alternatively additional hardware can be used to do that manually. Extracting data Monitoring the project from a distance. Pirate looks to be a solution to provide an realtime Interface where the variables and parameters can be monitored and changed on the fly. While doing that it also strives to have as little impact on cycle performance as possible. Project Goals Overview # When integrated into an Arduino project via the Pirate Hook variables can be designated to be sent or received. These then get periodically transmitted via UART to the Pirate Bridge on a connected Raspberry PI. The Bridge uses the data to provide an interface for the clients. The standard client is called Pirate Flag . It reads data streams from the interface and displays the data in a webpage. It can in turn send requests to the Pirate Bridge to change parameters on the Arduino. Parallel to this the Raspberry PI can also provide a live view of the project with Pirate Spyglass . To help with the routing the Pirate Map is used. Warning In Mechatronik Project 2 a new streaming soulution ( Pirate Spyglass ) has been created and replaces the original WebRTC Pirate Spyglass . The new solution avoids pitfalls with WebRTC signaling, making it suitable for usage on campus grounds. It is a stand alone executable and can easily be integrated into any webpage. The Project is currently hosted on Github # The documentation can be found on: https://ch3ri0ur.github.io/piratedocs/ The source code on: - https://github.com/Ch3ri0ur/pirate_modules - https://github.com/Ch3ri0ur/pirate - https://github.com/Ch3ri0ur/piratedocs - https://github.com/Ch3ri0ur/berrymse - https://github.com/Ch3ri0ur/go-v4l2 Currently developed by: # Maximilian Koch Christian Wappler","title":"Pirate"},{"location":"#pirate","text":"Pirate (short for \"Pirate Implements Remote Access to Experiments\") is a remote monitoring solution for Arduino projects. The solution uses a Raspberry PI as an intermediate server translating and broadcasting between the Arduino project and client webpages. It also supports the use of a webcam for a live view of the project. Getting Started","title":"Pirate"},{"location":"#motivation","text":"When using an Arduino there are a lot of pain points. Pirate looks to solve a few of them: Reading variables is often done by printing them via Serial.Print to a console. String handling is slow and might influence cycle time. The data scrolls by to fast to be useful. If a display is used the available space is to little to be very useful. Changing parameters often entails changing them in the source, recompiling and flashing again. Alternatively additional hardware can be used to do that manually. Extracting data Monitoring the project from a distance. Pirate looks to be a solution to provide an realtime Interface where the variables and parameters can be monitored and changed on the fly. While doing that it also strives to have as little impact on cycle performance as possible. Project Goals","title":"Motivation"},{"location":"#overview","text":"When integrated into an Arduino project via the Pirate Hook variables can be designated to be sent or received. These then get periodically transmitted via UART to the Pirate Bridge on a connected Raspberry PI. The Bridge uses the data to provide an interface for the clients. The standard client is called Pirate Flag . It reads data streams from the interface and displays the data in a webpage. It can in turn send requests to the Pirate Bridge to change parameters on the Arduino. Parallel to this the Raspberry PI can also provide a live view of the project with Pirate Spyglass . To help with the routing the Pirate Map is used. Warning In Mechatronik Project 2 a new streaming soulution ( Pirate Spyglass ) has been created and replaces the original WebRTC Pirate Spyglass . The new solution avoids pitfalls with WebRTC signaling, making it suitable for usage on campus grounds. It is a stand alone executable and can easily be integrated into any webpage.","title":"Overview"},{"location":"#the-project-is-currently-hosted-on-github","text":"The documentation can be found on: https://ch3ri0ur.github.io/piratedocs/ The source code on: - https://github.com/Ch3ri0ur/pirate_modules - https://github.com/Ch3ri0ur/pirate - https://github.com/Ch3ri0ur/piratedocs - https://github.com/Ch3ri0ur/berrymse - https://github.com/Ch3ri0ur/go-v4l2","title":"The Project is currently hosted on Github"},{"location":"#currently-developed-by","text":"Maximilian Koch Christian Wappler","title":"Currently developed by:"},{"location":"Getting%20Started/firstrun/","text":"Firstrun # To get started a set of setup instructions are provided: Hook into the Arduino Setup the Raspberry PI Install the Bridge Use Pirate to Control and Monitor your Project Add a camera to your Project Extra credit: Set up DNS / Domain for remote Access","title":"Firstrun"},{"location":"Getting%20Started/firstrun/#firstrun","text":"To get started a set of setup instructions are provided: Hook into the Arduino Setup the Raspberry PI Install the Bridge Use Pirate to Control and Monitor your Project Add a camera to your Project Extra credit: Set up DNS / Domain for remote Access","title":"Firstrun"},{"location":"Getting%20Started/goals/","text":"Project Goals and Requirements # As already stated in the overview, Pirate tries to create a solution for monitoring Arduino projects. To further define the goals user stories have been gathered. User Stories # As a User I want to be able to see the status of my project in realtime on a graph. As a User I want to be able to download the shown graph data. As a User I want to be able to influence the variables/parameters directly without reflashing the Arduino. As a User I want to be able to access the the dashboard from \"anywhere\" (the internet). When controlling a project from a remote location I as a User want to view a live feed of the project to monitor the actual influence my action have. As a User I want to easily be able to set up this solution. Original Requirements # The following requirements were originally sourced and approved by the customer. Functional Requirements # Parameter \u00e4ndern Der Benutzer verbindet sich mit Webseite Die Webseite gibt Benutzer \u00dcberblick \u00fcber Projekte Der Benutzer w\u00e4hlt ein Projekt aus Die Webseite stellt den Status des Projektes dar Der Benutzer \u00e4ndert einen Wert Die Webseite leitet die Wert\u00e4nderung weiter Parameter abfragen Der Benutzer verbindet sich mit Webseite Die Webseite gibt Benutzer \u00dcberblick \u00fcber Projekte Der Benutzer w\u00e4hlt ein Projekt aus Die Webseite stellt den Status des Projektes dar Der Benutzer kann die Werte im Status auslesen Live\u00fcbertragung ansehen Der Benutzer verbindet sich mit Webseite Die Webseite gibt Benutzer \u00dcberblick \u00fcber Projekte Der Benutzer w\u00e4hlt ein Projekt aus Die Webseite stellt den Status des Projektes dar Der Benutzer kann die Kamera\u00fcbertragung aktivieren Die Webseite stellt die Kamera\u00fcbertragung dar Zeitlichen Ablauf des Status einsehen Der Benutzer verbindet sich mit Webseite Die Webseite gibt Benutzer \u00dcberblick \u00fcber Projekte Der Benutzer w\u00e4hlt ein Projekt aus Die Webseite stellt den Status des Projektes dar Der Benutzer kann Statusansicht auf zeitlichen Verlauf umstellen Die Webseite beginnt den zeitlichen Verlauf des Status bereitzustellen Non-Functional Requirements # Frontend muss 3h stabil funktionieren ( w\u00e4hrend eines Praktikums ) 24/7 Bereitschaft sollte gew\u00e4hrleistet sein Verz\u00f6gerungszeit der gesamten \u00dcbertragung darf nicht l\u00e4nger als 2 Sekunden sein Es muss unter LTE Verh\u00e4ltnissen laufen und f\u00fcr ausreichend befunden werden von Auftraggeber Remotezugriff muss auf andere RProjekte adaptierbar sein Es m\u00fcssen mehrere RProjekte gleichzeitig unterst\u00fctzt werden Die Gesamtabgabe soll mit mindestens einem funktionsf\u00e4higen RProjekt erfolgen Zugriff muss \u00fcber eine Website erfolgen k\u00f6nnen Zum Abgabezeitpunkt muss die aktuelle Version von Chrome und Firefox unterst\u00fctzt werden Zeitlicher Verlauf der Parameter und Istwerte muss dargestellt werden und exportierbar sein Schnittstellen die in der Architekturplanung festgelegt werden, m\u00fcssen nach Spezifikation implementiert sein Dokumentation muss von Auftraggeber abgenommen worden sein Optionale Nichtfunktionale Anforderungen Zweites eingerichtetes funktionsf\u00e4higes RProjekt","title":"Project Goals and Requirements"},{"location":"Getting%20Started/goals/#project-goals-and-requirements","text":"As already stated in the overview, Pirate tries to create a solution for monitoring Arduino projects. To further define the goals user stories have been gathered.","title":"Project Goals and Requirements"},{"location":"Getting%20Started/goals/#user-stories","text":"As a User I want to be able to see the status of my project in realtime on a graph. As a User I want to be able to download the shown graph data. As a User I want to be able to influence the variables/parameters directly without reflashing the Arduino. As a User I want to be able to access the the dashboard from \"anywhere\" (the internet). When controlling a project from a remote location I as a User want to view a live feed of the project to monitor the actual influence my action have. As a User I want to easily be able to set up this solution.","title":"User Stories"},{"location":"Getting%20Started/goals/#original-requirements","text":"The following requirements were originally sourced and approved by the customer.","title":"Original Requirements"},{"location":"Getting%20Started/goals/#functional-requirements","text":"Parameter \u00e4ndern Der Benutzer verbindet sich mit Webseite Die Webseite gibt Benutzer \u00dcberblick \u00fcber Projekte Der Benutzer w\u00e4hlt ein Projekt aus Die Webseite stellt den Status des Projektes dar Der Benutzer \u00e4ndert einen Wert Die Webseite leitet die Wert\u00e4nderung weiter Parameter abfragen Der Benutzer verbindet sich mit Webseite Die Webseite gibt Benutzer \u00dcberblick \u00fcber Projekte Der Benutzer w\u00e4hlt ein Projekt aus Die Webseite stellt den Status des Projektes dar Der Benutzer kann die Werte im Status auslesen Live\u00fcbertragung ansehen Der Benutzer verbindet sich mit Webseite Die Webseite gibt Benutzer \u00dcberblick \u00fcber Projekte Der Benutzer w\u00e4hlt ein Projekt aus Die Webseite stellt den Status des Projektes dar Der Benutzer kann die Kamera\u00fcbertragung aktivieren Die Webseite stellt die Kamera\u00fcbertragung dar Zeitlichen Ablauf des Status einsehen Der Benutzer verbindet sich mit Webseite Die Webseite gibt Benutzer \u00dcberblick \u00fcber Projekte Der Benutzer w\u00e4hlt ein Projekt aus Die Webseite stellt den Status des Projektes dar Der Benutzer kann Statusansicht auf zeitlichen Verlauf umstellen Die Webseite beginnt den zeitlichen Verlauf des Status bereitzustellen","title":"Functional Requirements"},{"location":"Getting%20Started/goals/#non-functional-requirements","text":"Frontend muss 3h stabil funktionieren ( w\u00e4hrend eines Praktikums ) 24/7 Bereitschaft sollte gew\u00e4hrleistet sein Verz\u00f6gerungszeit der gesamten \u00dcbertragung darf nicht l\u00e4nger als 2 Sekunden sein Es muss unter LTE Verh\u00e4ltnissen laufen und f\u00fcr ausreichend befunden werden von Auftraggeber Remotezugriff muss auf andere RProjekte adaptierbar sein Es m\u00fcssen mehrere RProjekte gleichzeitig unterst\u00fctzt werden Die Gesamtabgabe soll mit mindestens einem funktionsf\u00e4higen RProjekt erfolgen Zugriff muss \u00fcber eine Website erfolgen k\u00f6nnen Zum Abgabezeitpunkt muss die aktuelle Version von Chrome und Firefox unterst\u00fctzt werden Zeitlicher Verlauf der Parameter und Istwerte muss dargestellt werden und exportierbar sein Schnittstellen die in der Architekturplanung festgelegt werden, m\u00fcssen nach Spezifikation implementiert sein Dokumentation muss von Auftraggeber abgenommen worden sein Optionale Nichtfunktionale Anforderungen Zweites eingerichtetes funktionsf\u00e4higes RProjekt","title":"Non-Functional Requirements"},{"location":"Getting%20Started/setupraspberrypi/","text":"Setup Raspberry Pi # Install Raspberry Pi OS Any version of Raspbian OS will probably work. For max. performance a none Desktop version should be used. Basic Configuration Raspberry Pi Change default Password Activate SSH Activate WiFi (optional) Perform Update & upgrade Setup Raspberry Pi for PirAtE Activate RPi Camera Interface Activate Serial Interface Install Git Install Nodejs Install Docker More detailed setup instructions for a Raspberry Pi Desktop can be found here: https://projects.raspberrypi.org/en/projects/raspberry-pi-setting-up 1. Install Raspberry Pi OS on an SD Card # The Installation can be done in two ways. - Using the official Installer from Raspberry Pi - Using another Imager and download the Image manually Both methods are shown on the Raspberry Pi Homepage https://www.raspberrypi.org/documentation/installation/installing-images/README.md Using Downloader and Installer from Raspberry Pi Raspberry Pi Imager can be downloaded from the Raspberry Homepage. https://www.raspberrypi.org/downloads/ \\ After Starting the Imager it will let you select different Images - Select \"Raspberry Pi OS (32-bit) Lite\" - if you already got an image on your Computer you can select \"Custom\" Download Image from Raspberry Pi homepage and using an Imager to install it Download Image \"Raspberry Pi OS (32-bit) Lite\" from https://www.raspberrypi.org/downloads/raspberry-pi-os/ Flash OS on SD Card https://www.balena.io/etcher/ or https://win32diskimager.download/ 2. Basic Configuration Raspberry Pi # For complete remote Access, the SSH and WiFi need to be activated before starting https://www.raspberrypi.org/documentation/configuration/wireless/headless.md For the Full Headless mode (no attached Screen) the SSH (and WiFi) need to be Setup before the First boot Enable SSH: Put file with name \"ssh\" without extension in root folder of boot partition https://www.elektronik-kompendium.de/sites/raspberry-pi/1906281.htm Enable Wifi otherwise use Ethernet connection: Put \"wpa_supplicant.conf\" file in root folder Content of wpa_supplicant.conf adapt countrycode, ssid and psk: ctrl_interface=DIR=/var/run/wpa_supplicant GROUP=netdev update_config=1 country=<Insert 2 letter ISO 3166-1 country code here e.g. DE> network={ ssid=\"<Name of your wireless LAN>\" psk=\"<Password for your wireless LAN>\" } Replace all <...> ! Starting Pi Access Terminal Shell on Raspberry PI Using ssh (Requires that ssh is active and pi is connect to network see Headless SSH Setup type ssh pi@raspberrypi to connect to \"a\" Raspberry PI on the network. If this does not work replace \"raspberrypi\" with its IP adress. Default User is \" pi \" and its Password is \" raspberry \" Using Monitor and Keyboard (not headless Methode) Login Default User is \" pi \" and its Password is \" raspberry \" Open a Terminal First steps Change Password with passwd When not done before use Raspberry Config Manager to enable: sudo raspi-config SSH Interfaces -> SSH -> Select \"Yes\" WiFi Localisation Options -> Change wireless country -> Select \"DE\" Network Options -> WiFi -> Enter WiFi Name and Password Later you can display the connection state with ifconfig Update Package Library and Upgrade Software sudo apt update && sudo apt -y upgrade Other useful Commands/Knowledge Multi terminals More than One SSH-Connection or Terminal can be open at once Shutdown sudo shutdown -h 0 Reboot sudo shutdown -r 0 sudo reboot -h 0 Display performance htop Other Tip and Tricks for Basic Config https://www.raspberrypi.org/documentation/configuration/raspi-config.md https://www.elektronik-kompendium.de/sites/raspberry-pi/1906291.htm 3. Setup Raspberry Pi for PirAtE # Activate needed Interfaces in sudo raspi-config Interfaces -> Camera -> Select \"Yes\" Interfaces -> Serial -> Select \"Yes\" It will do a restart after this Install needed Software Install Git (on Lite Version it isn't installed by default) sudo apt install git -y Install NodeJs nodejs Install Docker docker Password less SSH # add your public ssh key to ~/.ssh/authorized_keys (on the pi) for passwordless ssh connection (optional) generate SSH key # https://docs.github.com/en/github/authenticating-to-github/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent To avoid hassle leave password of the key blank Copy public key # Adapt to match your file / key names / domain names On Linux: cat ~/.ssh/id_rsa.pub | ssh pi@raspberrypi 'mkdir -p ~/.ssh && cat >> ~/.ssh/authorized_keys' On Windows: type %USERPROFILE%\\\\.ssh\\\\id_rsa.pub | ssh pi@raspberrypi \"mkdir -p ~/.ssh && cat >> ~/.ssh/authorized_keys\" (optional) create ssh key on pi and connect it with github # https://docs.github.com/en/github/authenticating-to-github/connecting-to-github-with-ssh","title":"Setup Raspberry Pi"},{"location":"Getting%20Started/setupraspberrypi/#setup-raspberry-pi","text":"Install Raspberry Pi OS Any version of Raspbian OS will probably work. For max. performance a none Desktop version should be used. Basic Configuration Raspberry Pi Change default Password Activate SSH Activate WiFi (optional) Perform Update & upgrade Setup Raspberry Pi for PirAtE Activate RPi Camera Interface Activate Serial Interface Install Git Install Nodejs Install Docker More detailed setup instructions for a Raspberry Pi Desktop can be found here: https://projects.raspberrypi.org/en/projects/raspberry-pi-setting-up","title":"Setup Raspberry Pi"},{"location":"Getting%20Started/setupraspberrypi/#1-install-raspberry-pi-os-on-an-sd-card","text":"The Installation can be done in two ways. - Using the official Installer from Raspberry Pi - Using another Imager and download the Image manually Both methods are shown on the Raspberry Pi Homepage https://www.raspberrypi.org/documentation/installation/installing-images/README.md Using Downloader and Installer from Raspberry Pi Raspberry Pi Imager can be downloaded from the Raspberry Homepage. https://www.raspberrypi.org/downloads/ \\ After Starting the Imager it will let you select different Images - Select \"Raspberry Pi OS (32-bit) Lite\" - if you already got an image on your Computer you can select \"Custom\" Download Image from Raspberry Pi homepage and using an Imager to install it Download Image \"Raspberry Pi OS (32-bit) Lite\" from https://www.raspberrypi.org/downloads/raspberry-pi-os/ Flash OS on SD Card https://www.balena.io/etcher/ or https://win32diskimager.download/","title":"1. Install Raspberry Pi OS on an SD Card"},{"location":"Getting%20Started/setupraspberrypi/#2-basic-configuration-raspberry-pi","text":"For complete remote Access, the SSH and WiFi need to be activated before starting https://www.raspberrypi.org/documentation/configuration/wireless/headless.md For the Full Headless mode (no attached Screen) the SSH (and WiFi) need to be Setup before the First boot Enable SSH: Put file with name \"ssh\" without extension in root folder of boot partition https://www.elektronik-kompendium.de/sites/raspberry-pi/1906281.htm Enable Wifi otherwise use Ethernet connection: Put \"wpa_supplicant.conf\" file in root folder Content of wpa_supplicant.conf adapt countrycode, ssid and psk: ctrl_interface=DIR=/var/run/wpa_supplicant GROUP=netdev update_config=1 country=<Insert 2 letter ISO 3166-1 country code here e.g. DE> network={ ssid=\"<Name of your wireless LAN>\" psk=\"<Password for your wireless LAN>\" } Replace all <...> ! Starting Pi Access Terminal Shell on Raspberry PI Using ssh (Requires that ssh is active and pi is connect to network see Headless SSH Setup type ssh pi@raspberrypi to connect to \"a\" Raspberry PI on the network. If this does not work replace \"raspberrypi\" with its IP adress. Default User is \" pi \" and its Password is \" raspberry \" Using Monitor and Keyboard (not headless Methode) Login Default User is \" pi \" and its Password is \" raspberry \" Open a Terminal First steps Change Password with passwd When not done before use Raspberry Config Manager to enable: sudo raspi-config SSH Interfaces -> SSH -> Select \"Yes\" WiFi Localisation Options -> Change wireless country -> Select \"DE\" Network Options -> WiFi -> Enter WiFi Name and Password Later you can display the connection state with ifconfig Update Package Library and Upgrade Software sudo apt update && sudo apt -y upgrade Other useful Commands/Knowledge Multi terminals More than One SSH-Connection or Terminal can be open at once Shutdown sudo shutdown -h 0 Reboot sudo shutdown -r 0 sudo reboot -h 0 Display performance htop Other Tip and Tricks for Basic Config https://www.raspberrypi.org/documentation/configuration/raspi-config.md https://www.elektronik-kompendium.de/sites/raspberry-pi/1906291.htm","title":"2. Basic Configuration Raspberry Pi "},{"location":"Getting%20Started/setupraspberrypi/#3-setup-raspberry-pi-for-pirate","text":"Activate needed Interfaces in sudo raspi-config Interfaces -> Camera -> Select \"Yes\" Interfaces -> Serial -> Select \"Yes\" It will do a restart after this Install needed Software Install Git (on Lite Version it isn't installed by default) sudo apt install git -y Install NodeJs nodejs Install Docker docker","title":"3. Setup Raspberry Pi for PirAtE"},{"location":"Getting%20Started/setupraspberrypi/#password-less-ssh","text":"add your public ssh key to ~/.ssh/authorized_keys (on the pi) for passwordless ssh connection","title":"Password less SSH"},{"location":"Getting%20Started/setupraspberrypi/#optional-generate-ssh-key","text":"https://docs.github.com/en/github/authenticating-to-github/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent To avoid hassle leave password of the key blank","title":"(optional) generate SSH key"},{"location":"Getting%20Started/setupraspberrypi/#copy-public-key","text":"Adapt to match your file / key names / domain names On Linux: cat ~/.ssh/id_rsa.pub | ssh pi@raspberrypi 'mkdir -p ~/.ssh && cat >> ~/.ssh/authorized_keys' On Windows: type %USERPROFILE%\\\\.ssh\\\\id_rsa.pub | ssh pi@raspberrypi \"mkdir -p ~/.ssh && cat >> ~/.ssh/authorized_keys\"","title":"Copy public key"},{"location":"Getting%20Started/setupraspberrypi/#optional-create-ssh-key-on-pi-and-connect-it-with-github","text":"https://docs.github.com/en/github/authenticating-to-github/connecting-to-github-with-ssh","title":"(optional) create ssh key on pi and connect it with github"},{"location":"Pirate-Bridge/00-bridge/","text":"Overview Pirate Bridge # The Bridge component translates the serial communication with the Arduino and provides an API for the clients. Getting Started Requirements # Managing the connection with the Pirate Hook on the connected Arduino Serving an API for Sending the project data Receiving and forwarding control commands Serving the client website Requirements Implementation # The Bridge is a nodejs application which reads the serial port on the Raspberry PI and broadcasts the information to all connected clients. (more about this interface here: client facing API ). When polled the Bridge will supply the Arduino with the values the clients sent to it. It also serves the client website, the Pirate Flag . Implementation Validation # In this section the requirements are compared with the current state of the project and future steps outlined. Validation","title":"Overview Pirate Bridge"},{"location":"Pirate-Bridge/00-bridge/#overview-pirate-bridge","text":"The Bridge component translates the serial communication with the Arduino and provides an API for the clients. Getting Started","title":"Overview Pirate Bridge"},{"location":"Pirate-Bridge/00-bridge/#requirements","text":"Managing the connection with the Pirate Hook on the connected Arduino Serving an API for Sending the project data Receiving and forwarding control commands Serving the client website Requirements","title":"Requirements"},{"location":"Pirate-Bridge/00-bridge/#implementation","text":"The Bridge is a nodejs application which reads the serial port on the Raspberry PI and broadcasts the information to all connected clients. (more about this interface here: client facing API ). When polled the Bridge will supply the Arduino with the values the clients sent to it. It also serves the client website, the Pirate Flag . Implementation","title":"Implementation"},{"location":"Pirate-Bridge/00-bridge/#validation","text":"In this section the requirements are compared with the current state of the project and future steps outlined. Validation","title":"Validation"},{"location":"Pirate-Bridge/10-bridge-getting-started/","text":"Getting Started # The Pirate Bridge is a single file application. As a prerequisite the Raspberry PI should have been set up according to the setup . To run it first download the repository and move into that folder, if this has not already been done. git clone https://github.com/Ch3ri0ur/pirate_modules.git cd pirate_modules If the server repository has not been installed yet run: npm i Then run the application with: node index.js The application expects a running arduino with a configured Pirate-Hook to be plugged into any USB port. Optionally it expects a production build version of the Pirate-Flag to be present in a ./build/ folder to be served.","title":"Getting Started"},{"location":"Pirate-Bridge/10-bridge-getting-started/#getting-started","text":"The Pirate Bridge is a single file application. As a prerequisite the Raspberry PI should have been set up according to the setup . To run it first download the repository and move into that folder, if this has not already been done. git clone https://github.com/Ch3ri0ur/pirate_modules.git cd pirate_modules If the server repository has not been installed yet run: npm i Then run the application with: node index.js The application expects a running arduino with a configured Pirate-Hook to be plugged into any USB port. Optionally it expects a production build version of the Pirate-Flag to be present in a ./build/ folder to be served.","title":"Getting Started"},{"location":"Pirate-Bridge/20-bridge-requirements/","text":"Requirements # The Bridge component has a set of functional and non functional requirements. The following requirements are derived from the accepted overarching requirements approved by the customer. Functional Requirements # Pass on stream of variables from Arduino to clients # The client is connects to the Bridge The Arduino sends current variables The Bridge send said variables to the client Pass on commands to change variables from clients to Arduino # The client is connects to the Bridge The client sends new variable values to the Bridge The Bridge send said variables to the Arduino Non-Functional Requirements # The Bridge must run stably for at least 3 hours of continuos use The connection should be available 24/7 The Bridge must be usable with a LTE connection The latency of the whole chain may not exceed 2 seconds For the Bridge communication to the client 300 ms are allocated The Bridge must implement the Serial Protocol defined in: Serial Protocol The Bridge must implement the HTTP API defined in: HTTP API","title":"Requirements"},{"location":"Pirate-Bridge/20-bridge-requirements/#requirements","text":"The Bridge component has a set of functional and non functional requirements. The following requirements are derived from the accepted overarching requirements approved by the customer.","title":"Requirements"},{"location":"Pirate-Bridge/20-bridge-requirements/#functional-requirements","text":"","title":"Functional Requirements"},{"location":"Pirate-Bridge/20-bridge-requirements/#pass-on-stream-of-variables-from-arduino-to-clients","text":"The client is connects to the Bridge The Arduino sends current variables The Bridge send said variables to the client","title":"Pass on stream of variables from Arduino to clients"},{"location":"Pirate-Bridge/20-bridge-requirements/#pass-on-commands-to-change-variables-from-clients-to-arduino","text":"The client is connects to the Bridge The client sends new variable values to the Bridge The Bridge send said variables to the Arduino","title":"Pass on commands to change variables from clients to Arduino"},{"location":"Pirate-Bridge/20-bridge-requirements/#non-functional-requirements","text":"The Bridge must run stably for at least 3 hours of continuos use The connection should be available 24/7 The Bridge must be usable with a LTE connection The latency of the whole chain may not exceed 2 seconds For the Bridge communication to the client 300 ms are allocated The Bridge must implement the Serial Protocol defined in: Serial Protocol The Bridge must implement the HTTP API defined in: HTTP API","title":"Non-Functional Requirements"},{"location":"Pirate-Bridge/30-bridge-implementation/","text":"Implementation # The Bridge primarily has two components: One for communicating with the Arduino and one to communicate with the clients. In addition it serves the Pirate Flag. Primary Components # As already stated the Bridge primarily has two components, one facing the serial port and one implementing a HTTP API. The components communicate internally by writing into shared buffers for data to be sent / received. The components are written in Javascript and executed on NodeJS . Communication with the Arduino # The Pirate-Hook can send messages to the Raspberry PI at \"any time\" but the communication to the Hook on the Arduino from the Raspberry PI is polling based with the Hook being the initiator. Here is more information about the implemented serial protocol . On the Node side a library called serialport is used. With it the Bridge can read from connected serial devices. The library provides an event based API, in which every time a message is received a callback is triggered. To enable high speeds the serial protocol is primarily not string based, but transfers memory content directly. Because of this every value a byte can take can be present on the serial interface in almost any order. For instance 0x0A (a 10) the ASCII equivalent of \"\\n\", a standard delimiter for serial communication could be present in any variable being sent over the wire. To eliminate this risk a unique delimiter \"0xFF,P,i,r,A,t,E,\\n\" is used. It was chosen, because it is longer than a 4 byte variables, has a non String character, and also the standard delimiter. This results in a sequence of bytes that is highly unlikely to be ever sent over the serial interface by accident. The used library provides functionality to use such custom delimiters. When a message is detected between such delimiters a callback is triggered. In the callback the type of message is read from the first byte and depending on the message type different handlers are used process rest of the message. There are 4 general categories of Message: Debug messages from the Hook Config messages with meta data about the variables on the Arduino Requests for data by the Hook Receive messages from the Hook with variables Debug Messages # To help debugging the Hook provides the functionality to send strings designated as debug over the interface. These are then directly printed to the console log of the node application. Config Messages # To enable communication the Hook aggregates all the necessary information about the variables to be sent or received for instance: index, name, datatype etc. and sends it to the Bridge. There it is stored for later use by the callbacks. Primarily this information is used to to correctly interpret and encode the serial buffer content and to forward the information to the Flag. Another benefit is, that the message sizes can be matched against the configuration data. Before these config messages are sent at boot a start sequence is sent by the hook: 0xEE,P,i,r,A,t,E,\\n Any bytes sent before this start sequence are discarded. This is necessary because on start old values in the serial buffer may disturb correct config messaging. Request for Data # When data is requested by the Hook a Buffer (\"Arduino Send Buffer\") is checked for outstanding variables to be sent to the Arduino. These are then batched together with their index into packages as big as the input Buffer on the Arduino allows. Naturally sent variables get removed from the buffer. In case a variable is to long to be sent, a long string, in that particular package the rest of the buffer is checked for variables that fit. In the subsequent request the variables that where skipped have a higher priority and are sent. The \"Arduino Send Buffer\" is implemented as a dictionary with the indexes as keys. This is done, so that only the most recent version of a variable is sent and no index is sent twice. Receive Data # Most traffic is generated with the send messages. When the message type does not match one of the previous categories the message is handled by the \"Receive Data Handler\". It reads the type, index and data of the message and if it knows the type it writes, under the current timestamp, the index value pair into the \"Client Send Buffer\". Communication with the Clients # The HTTP communication uses the Expressjs framework. It enables easy implementation of the client facing API . Similarly to the serialport library this framework is also callback based. There are four major endpoints: Provide Config Accept new variables to be sent to the Arduino Reflect these changes to the other clients Send a Stream of data from Arduino to all Clients Config # The \"/getconfig\" endpoint responds to GET requests and returns the \"config data\" object in JSON encoding. Control # The \"/ctrl\" endpoint similarly reacts to GET requests. The callback checks if the datatype of the variable matches the config and then adds it to the \"Arduino Send Buffer\". Afterwards it also notifies all clients that listen to the configUpdates endpoint. Configuration Updates # The \"/configUpdates\" endpoint is a SSE -stream. Here clients can register to be notified to changes, that any client made via the \"/ctrl\" endpoint. This is possible, because clients send a UUID, a unique id, with their control requests and these ids get sent together with the updates in this stream. On the client side each client can check if the update was cause by themselves and ignore it, or act on the changes. Data stream # The \"/stream\" endpoint is arguably the most important one. It also is implemented as as SSE -stream. Whenever a client accesses this stream they are added to a list of clients to be notified of all the data the hook sends. This data is sourced from the \"Client Send Buffer\". Cyclicly this buffer gets emptied and if any data was present each registered client gets sent the content. This operation is repeated every 16 milliseconds to enable a 60 Hz refresh rate. The data is stored in the \"Client Send Buffer\" with the timestamp as the first key and the variable index as the second. The timestamps have a resolution of microseconds. This means each variable can only be added to the buffer if they have a unique timestamp/index combination. In praxis this has not resulted in a problem, because other bottlenecks occurred earlier. Pirate Flag # Temporarily the client website is being served by the NodeJS application under the GET \"/\" endpoint.","title":"Implementation"},{"location":"Pirate-Bridge/30-bridge-implementation/#implementation","text":"The Bridge primarily has two components: One for communicating with the Arduino and one to communicate with the clients. In addition it serves the Pirate Flag.","title":"Implementation"},{"location":"Pirate-Bridge/30-bridge-implementation/#primary-components","text":"As already stated the Bridge primarily has two components, one facing the serial port and one implementing a HTTP API. The components communicate internally by writing into shared buffers for data to be sent / received. The components are written in Javascript and executed on NodeJS .","title":"Primary Components"},{"location":"Pirate-Bridge/30-bridge-implementation/#communication-with-the-arduino","text":"The Pirate-Hook can send messages to the Raspberry PI at \"any time\" but the communication to the Hook on the Arduino from the Raspberry PI is polling based with the Hook being the initiator. Here is more information about the implemented serial protocol . On the Node side a library called serialport is used. With it the Bridge can read from connected serial devices. The library provides an event based API, in which every time a message is received a callback is triggered. To enable high speeds the serial protocol is primarily not string based, but transfers memory content directly. Because of this every value a byte can take can be present on the serial interface in almost any order. For instance 0x0A (a 10) the ASCII equivalent of \"\\n\", a standard delimiter for serial communication could be present in any variable being sent over the wire. To eliminate this risk a unique delimiter \"0xFF,P,i,r,A,t,E,\\n\" is used. It was chosen, because it is longer than a 4 byte variables, has a non String character, and also the standard delimiter. This results in a sequence of bytes that is highly unlikely to be ever sent over the serial interface by accident. The used library provides functionality to use such custom delimiters. When a message is detected between such delimiters a callback is triggered. In the callback the type of message is read from the first byte and depending on the message type different handlers are used process rest of the message. There are 4 general categories of Message: Debug messages from the Hook Config messages with meta data about the variables on the Arduino Requests for data by the Hook Receive messages from the Hook with variables","title":"Communication with the Arduino"},{"location":"Pirate-Bridge/30-bridge-implementation/#debug-messages","text":"To help debugging the Hook provides the functionality to send strings designated as debug over the interface. These are then directly printed to the console log of the node application.","title":"Debug Messages"},{"location":"Pirate-Bridge/30-bridge-implementation/#config-messages","text":"To enable communication the Hook aggregates all the necessary information about the variables to be sent or received for instance: index, name, datatype etc. and sends it to the Bridge. There it is stored for later use by the callbacks. Primarily this information is used to to correctly interpret and encode the serial buffer content and to forward the information to the Flag. Another benefit is, that the message sizes can be matched against the configuration data. Before these config messages are sent at boot a start sequence is sent by the hook: 0xEE,P,i,r,A,t,E,\\n Any bytes sent before this start sequence are discarded. This is necessary because on start old values in the serial buffer may disturb correct config messaging.","title":"Config Messages"},{"location":"Pirate-Bridge/30-bridge-implementation/#request-for-data","text":"When data is requested by the Hook a Buffer (\"Arduino Send Buffer\") is checked for outstanding variables to be sent to the Arduino. These are then batched together with their index into packages as big as the input Buffer on the Arduino allows. Naturally sent variables get removed from the buffer. In case a variable is to long to be sent, a long string, in that particular package the rest of the buffer is checked for variables that fit. In the subsequent request the variables that where skipped have a higher priority and are sent. The \"Arduino Send Buffer\" is implemented as a dictionary with the indexes as keys. This is done, so that only the most recent version of a variable is sent and no index is sent twice.","title":"Request for Data"},{"location":"Pirate-Bridge/30-bridge-implementation/#receive-data","text":"Most traffic is generated with the send messages. When the message type does not match one of the previous categories the message is handled by the \"Receive Data Handler\". It reads the type, index and data of the message and if it knows the type it writes, under the current timestamp, the index value pair into the \"Client Send Buffer\".","title":"Receive Data"},{"location":"Pirate-Bridge/30-bridge-implementation/#communication-with-the-clients","text":"The HTTP communication uses the Expressjs framework. It enables easy implementation of the client facing API . Similarly to the serialport library this framework is also callback based. There are four major endpoints: Provide Config Accept new variables to be sent to the Arduino Reflect these changes to the other clients Send a Stream of data from Arduino to all Clients","title":"Communication with the Clients"},{"location":"Pirate-Bridge/30-bridge-implementation/#config","text":"The \"/getconfig\" endpoint responds to GET requests and returns the \"config data\" object in JSON encoding.","title":"Config"},{"location":"Pirate-Bridge/30-bridge-implementation/#control","text":"The \"/ctrl\" endpoint similarly reacts to GET requests. The callback checks if the datatype of the variable matches the config and then adds it to the \"Arduino Send Buffer\". Afterwards it also notifies all clients that listen to the configUpdates endpoint.","title":"Control"},{"location":"Pirate-Bridge/30-bridge-implementation/#configuration-updates","text":"The \"/configUpdates\" endpoint is a SSE -stream. Here clients can register to be notified to changes, that any client made via the \"/ctrl\" endpoint. This is possible, because clients send a UUID, a unique id, with their control requests and these ids get sent together with the updates in this stream. On the client side each client can check if the update was cause by themselves and ignore it, or act on the changes.","title":"Configuration Updates"},{"location":"Pirate-Bridge/30-bridge-implementation/#data-stream","text":"The \"/stream\" endpoint is arguably the most important one. It also is implemented as as SSE -stream. Whenever a client accesses this stream they are added to a list of clients to be notified of all the data the hook sends. This data is sourced from the \"Client Send Buffer\". Cyclicly this buffer gets emptied and if any data was present each registered client gets sent the content. This operation is repeated every 16 milliseconds to enable a 60 Hz refresh rate. The data is stored in the \"Client Send Buffer\" with the timestamp as the first key and the variable index as the second. The timestamps have a resolution of microseconds. This means each variable can only be added to the buffer if they have a unique timestamp/index combination. In praxis this has not resulted in a problem, because other bottlenecks occurred earlier.","title":"Data stream"},{"location":"Pirate-Bridge/30-bridge-implementation/#pirate-flag","text":"Temporarily the client website is being served by the NodeJS application under the GET \"/\" endpoint.","title":"Pirate Flag"},{"location":"Pirate-Bridge/40-bridge-validation/","text":"Validation and Future Steps # In this section the initial requirements are measured against the current implementation. Functional Requirements # The functional requirements are matched by the implementation. Pass on stream of variables from Arduino to clients # The client is connects to the Bridge The Arduino sends current variables The Bridge send said variables to the client Pass on commands to change variables from clients to Arduino # The client is connects to the Bridge The client sends new variable values to the Bridge The Bridge send said variables to the Arduino Non-Functional Requirements # The Bridge must run stably for at least 3 hours of continuos use In stress tests the Bridge ran stably for more than 72 hours. The connection should be available 24/7 In stress tests the Bridge ran stably for more than 72 hours. The Bridge must be usable with a LTE connection The data volume can be limited by the hook. The latency of the whole chain may not exceed 2 seconds For the Bridge communication to the client 300 ms are allocated The latency has not yet been measured but in preliminary tests the Bridge can operate at speeds above 25 variables sent per 16 ms interval. With an estimate of 10 bytes per message and a serial send buffer size of 64 bytes the buffer is cycled through multiple times per 16 ms interval placing the latency well below the targeted 300 ms. The Bridge must implement the Serial Protocol defined in: Serial Protocol The Bridge implements the Protocol. The Bridge must implement the HTTP API defined in: HTTP API The Bridge implements the API. Future Steps # To improve performance the data sending protocol will be adapted to send the delimiter not every variable but but batch multiple messages. To improve security the types and indexes should be checked before sending in either direction. A suit of tests is needed to further prove the stability of the Bridge. Encapsulate the Bridge in a Docker container for easy installation and management.","title":"Validation and Future Steps"},{"location":"Pirate-Bridge/40-bridge-validation/#validation-and-future-steps","text":"In this section the initial requirements are measured against the current implementation.","title":"Validation and Future Steps"},{"location":"Pirate-Bridge/40-bridge-validation/#functional-requirements","text":"The functional requirements are matched by the implementation.","title":"Functional Requirements"},{"location":"Pirate-Bridge/40-bridge-validation/#pass-on-stream-of-variables-from-arduino-to-clients","text":"The client is connects to the Bridge The Arduino sends current variables The Bridge send said variables to the client","title":"Pass on stream of variables from Arduino to clients"},{"location":"Pirate-Bridge/40-bridge-validation/#pass-on-commands-to-change-variables-from-clients-to-arduino","text":"The client is connects to the Bridge The client sends new variable values to the Bridge The Bridge send said variables to the Arduino","title":"Pass on commands to change variables from clients to Arduino"},{"location":"Pirate-Bridge/40-bridge-validation/#non-functional-requirements","text":"The Bridge must run stably for at least 3 hours of continuos use In stress tests the Bridge ran stably for more than 72 hours. The connection should be available 24/7 In stress tests the Bridge ran stably for more than 72 hours. The Bridge must be usable with a LTE connection The data volume can be limited by the hook. The latency of the whole chain may not exceed 2 seconds For the Bridge communication to the client 300 ms are allocated The latency has not yet been measured but in preliminary tests the Bridge can operate at speeds above 25 variables sent per 16 ms interval. With an estimate of 10 bytes per message and a serial send buffer size of 64 bytes the buffer is cycled through multiple times per 16 ms interval placing the latency well below the targeted 300 ms. The Bridge must implement the Serial Protocol defined in: Serial Protocol The Bridge implements the Protocol. The Bridge must implement the HTTP API defined in: HTTP API The Bridge implements the API.","title":"Non-Functional Requirements"},{"location":"Pirate-Bridge/40-bridge-validation/#future-steps","text":"To improve performance the data sending protocol will be adapted to send the delimiter not every variable but but batch multiple messages. To improve security the types and indexes should be checked before sending in either direction. A suit of tests is needed to further prove the stability of the Bridge. Encapsulate the Bridge in a Docker container for easy installation and management.","title":"Future Steps"},{"location":"Pirate-Bridge/client-facing-interface/","text":"Client API # The Pirate-Bridge provides a set of endpoints: Endpoint Request type Function / GET serves website /stream GET stream of variable data /getconfig GET variable meta data /conf POST updates a variable /configupdates GET stream of changes via /conf In the following sections these endpoints are further explained. Datastream # GET /stream Behind this Endpoint a Server-Sent-Event stream is served. On this stream \"message\" events are provided. Each message has an data element attached. This element is a JSON encoded Object. In it is a list of Timestamp, Variable objects pairs. Stream messages are sent to each client with an 16 ms interval to enable update rates of 60 Hz. event: message data: JSON.String event: message data: JSON.String Here an example data object can be seen (first abstract then concrete) { t imes ta mp : { id 1 : value , id 2 : value , }, \"124252245635\" : { \"2\" : 3203 , \"3\" : 123.1 , }, } Configuration # GET /getconfig The config endpoint provides a JSON object, in which the current project state and meta data is provided. There are three major components: clientsend_config arduinosend_config arduinoDatatypeSizes clientsend_config # This configuration describes the variables which the Bridge can send to the client. For each variable the name, type, scale and optionally the unit are ordered under the corresponding ID. These IDs are provided automatically in order of the declaration in the Arduino code. arduinosend_config # Under the this object all the data the Bridge can send to the Arduino is listed. In addition to name and type, the current value is stored under default and a min and max values are provided too. Values of the string type are handled a little differently: Instead of providing a min or max value the max size is saved in the max value. arduinoDatatypeSizes # Here the byte size of the base data types of the Arduino controller are listed to ensure that values that are sent to the arduino have the correct size and data is not corrupted. Example: { \"clientsend_config\" : { id_s tr i n g : { \"name\" : na me_s tr i n g , \"type\" : t ype_s tr i n g , \"scale\" : scale_s tr i n g_co nta i n i n g [ u n i t _s tr i n g ] }, \"1\" : { \"name\" : \"Target Value\" , \"type\" : \"F\" , \"scale\" : \"Height in [cm]\" }, \"2\" : { \"name\" : \"PID\" , \"type\" : \"F\" , \"scale\" : \"PID Values\" } }, \"arduinosend_config\" : { id : { \"name\" : na me_s tr i n g , \"type\" : t ype_s tr i n g , \"default\" : curre nt _value , \"max\" : max_value , \"min\" : mi n _value }, \"1\" : { \"name\" : \"Setpoint\" , \"type\" : \"F\" , \"default\" : 100 , \"max\" : 1000 , \"min\" : 0 }, \"2\" : { \"name\" : \"kp\" , \"type\" : \"F\" , \"default\" : 4.97 , \"max\" : 5 , \"min\" : 0 } }, \"arduinoDatatypeSizes\" : { \"I\" : 2 , \"U\" : 2 , \"L\" : 4 , \"u\" : 4 , \"F\" : 4 , \"D\" : 4 , \"B\" : 1 , \"W\" : 2 , \"b\" : 1 , \"C\" : 1 , \"S\" : 53 } } set Variable # POST /conf Exposed variables can be changed with a POST request to the /conf endpoint. Here the data is also to be structured in JSON. An object with id, value pairs is expected. Each conf is to be labeled with a UUID Example: { \"uuid\" : uuid , \"data\" : { id_s tr i n g : value , id_s tr i n g : value , } } Config update Stream # GET /configUpdates Under this endpoint another stream is provided, in which all the updates triggered via a POST request to /conf are reflected to all clients together with the uuid connected to that change. eve nt : message da ta : { \"uuid\" : uuid , \"data\" : { \"id\" : id_s tr i n g , \"value\" : value } } In addition a keep alive message \":keepalive\" is sent every 15 seconds to keep the connection alive. It would otherwise disconnect after 90 seconds.","title":"Client API"},{"location":"Pirate-Bridge/client-facing-interface/#client-api","text":"The Pirate-Bridge provides a set of endpoints: Endpoint Request type Function / GET serves website /stream GET stream of variable data /getconfig GET variable meta data /conf POST updates a variable /configupdates GET stream of changes via /conf In the following sections these endpoints are further explained.","title":"Client API"},{"location":"Pirate-Bridge/client-facing-interface/#datastream","text":"GET /stream Behind this Endpoint a Server-Sent-Event stream is served. On this stream \"message\" events are provided. Each message has an data element attached. This element is a JSON encoded Object. In it is a list of Timestamp, Variable objects pairs. Stream messages are sent to each client with an 16 ms interval to enable update rates of 60 Hz. event: message data: JSON.String event: message data: JSON.String Here an example data object can be seen (first abstract then concrete) { t imes ta mp : { id 1 : value , id 2 : value , }, \"124252245635\" : { \"2\" : 3203 , \"3\" : 123.1 , }, }","title":"Datastream"},{"location":"Pirate-Bridge/client-facing-interface/#configuration","text":"GET /getconfig The config endpoint provides a JSON object, in which the current project state and meta data is provided. There are three major components: clientsend_config arduinosend_config arduinoDatatypeSizes","title":"Configuration"},{"location":"Pirate-Bridge/client-facing-interface/#clientsend_config","text":"This configuration describes the variables which the Bridge can send to the client. For each variable the name, type, scale and optionally the unit are ordered under the corresponding ID. These IDs are provided automatically in order of the declaration in the Arduino code.","title":"clientsend_config"},{"location":"Pirate-Bridge/client-facing-interface/#arduinosend_config","text":"Under the this object all the data the Bridge can send to the Arduino is listed. In addition to name and type, the current value is stored under default and a min and max values are provided too. Values of the string type are handled a little differently: Instead of providing a min or max value the max size is saved in the max value.","title":"arduinosend_config"},{"location":"Pirate-Bridge/client-facing-interface/#arduinodatatypesizes","text":"Here the byte size of the base data types of the Arduino controller are listed to ensure that values that are sent to the arduino have the correct size and data is not corrupted. Example: { \"clientsend_config\" : { id_s tr i n g : { \"name\" : na me_s tr i n g , \"type\" : t ype_s tr i n g , \"scale\" : scale_s tr i n g_co nta i n i n g [ u n i t _s tr i n g ] }, \"1\" : { \"name\" : \"Target Value\" , \"type\" : \"F\" , \"scale\" : \"Height in [cm]\" }, \"2\" : { \"name\" : \"PID\" , \"type\" : \"F\" , \"scale\" : \"PID Values\" } }, \"arduinosend_config\" : { id : { \"name\" : na me_s tr i n g , \"type\" : t ype_s tr i n g , \"default\" : curre nt _value , \"max\" : max_value , \"min\" : mi n _value }, \"1\" : { \"name\" : \"Setpoint\" , \"type\" : \"F\" , \"default\" : 100 , \"max\" : 1000 , \"min\" : 0 }, \"2\" : { \"name\" : \"kp\" , \"type\" : \"F\" , \"default\" : 4.97 , \"max\" : 5 , \"min\" : 0 } }, \"arduinoDatatypeSizes\" : { \"I\" : 2 , \"U\" : 2 , \"L\" : 4 , \"u\" : 4 , \"F\" : 4 , \"D\" : 4 , \"B\" : 1 , \"W\" : 2 , \"b\" : 1 , \"C\" : 1 , \"S\" : 53 } }","title":"arduinoDatatypeSizes"},{"location":"Pirate-Bridge/client-facing-interface/#set-variable","text":"POST /conf Exposed variables can be changed with a POST request to the /conf endpoint. Here the data is also to be structured in JSON. An object with id, value pairs is expected. Each conf is to be labeled with a UUID Example: { \"uuid\" : uuid , \"data\" : { id_s tr i n g : value , id_s tr i n g : value , } }","title":"set Variable"},{"location":"Pirate-Bridge/client-facing-interface/#config-update-stream","text":"GET /configUpdates Under this endpoint another stream is provided, in which all the updates triggered via a POST request to /conf are reflected to all clients together with the uuid connected to that change. eve nt : message da ta : { \"uuid\" : uuid , \"data\" : { \"id\" : id_s tr i n g , \"value\" : value } } In addition a keep alive message \":keepalive\" is sent every 15 seconds to keep the connection alive. It would otherwise disconnect after 90 seconds.","title":"Config update Stream"},{"location":"Pirate-Bridge/Theory/docker/","text":"Docker # Docker allows to Run Docker Container which contain pre compiled code and are mostly not bound to any OS. It is similar to a VM, but the Docker Container is not an OS and can be adjusted so that Processes inside can access the Hostsystem. https://www.docker.com/why-docker https://docs.docker.com/engine/install/debian/ https://www.docker.com/blog/happy-pi-day-docker-raspberry-pi/ Docker Installation # Requirements # sudo apt-get install apt-transport-https ca-certificates software-properties-common -y Download Script for easy installation # curl -fsSL get.docker.com -o get-docker.sh && sh get-docker.sh Add pi-User to Docker to allow starting without sudo rechten # sudo usermod -aG docker pi Add Docker to Source.list for easy update and upgrade # Get Docker Public Key for Raspbian Docker Version sudo curl https://download.docker.com/linux/raspbian/gpg Open Source.list to add Source Path for the Docker Software sudo nano /etc/apt/sources.list Add to Source path to the File deb https://download.docker.com/linux/raspbian/ buster stable Use CTRL + X to close the Editor and Y and than Enter to Save Changes Perform an Update and Upgrade sudo apt update && sudo apt -y upgrade Start Docker Service # sudo systemctl start docker.service Install Docker Compose that manages the Docker container # sudo apt install docker-compose -y Useful Docker Commands # Display Info about Docker installation and Running Container # sudo docker info","title":"Docker"},{"location":"Pirate-Bridge/Theory/docker/#docker","text":"Docker allows to Run Docker Container which contain pre compiled code and are mostly not bound to any OS. It is similar to a VM, but the Docker Container is not an OS and can be adjusted so that Processes inside can access the Hostsystem. https://www.docker.com/why-docker https://docs.docker.com/engine/install/debian/ https://www.docker.com/blog/happy-pi-day-docker-raspberry-pi/","title":"Docker"},{"location":"Pirate-Bridge/Theory/docker/#docker-installation","text":"","title":"Docker Installation"},{"location":"Pirate-Bridge/Theory/docker/#requirements","text":"sudo apt-get install apt-transport-https ca-certificates software-properties-common -y","title":"Requirements"},{"location":"Pirate-Bridge/Theory/docker/#download-script-for-easy-installation","text":"curl -fsSL get.docker.com -o get-docker.sh && sh get-docker.sh","title":"Download Script for easy installation"},{"location":"Pirate-Bridge/Theory/docker/#add-pi-user-to-docker-to-allow-starting-without-sudo-rechten","text":"sudo usermod -aG docker pi","title":"Add pi-User to Docker to allow starting without sudo rechten"},{"location":"Pirate-Bridge/Theory/docker/#add-docker-to-sourcelist-for-easy-update-and-upgrade","text":"Get Docker Public Key for Raspbian Docker Version sudo curl https://download.docker.com/linux/raspbian/gpg Open Source.list to add Source Path for the Docker Software sudo nano /etc/apt/sources.list Add to Source path to the File deb https://download.docker.com/linux/raspbian/ buster stable Use CTRL + X to close the Editor and Y and than Enter to Save Changes Perform an Update and Upgrade sudo apt update && sudo apt -y upgrade","title":"Add Docker to Source.list for easy update and upgrade"},{"location":"Pirate-Bridge/Theory/docker/#start-docker-service","text":"sudo systemctl start docker.service","title":"Start Docker Service"},{"location":"Pirate-Bridge/Theory/docker/#install-docker-compose-that-manages-the-docker-container","text":"sudo apt install docker-compose -y","title":"Install Docker Compose that manages the Docker container"},{"location":"Pirate-Bridge/Theory/docker/#useful-docker-commands","text":"","title":"Useful Docker Commands"},{"location":"Pirate-Bridge/Theory/docker/#display-info-about-docker-installation-and-running-container","text":"sudo docker info","title":"Display Info about Docker installation and Running Container"},{"location":"Pirate-Bridge/Theory/express/","text":"Express # Express is a web framework for Node.js.","title":"Express"},{"location":"Pirate-Bridge/Theory/express/#express","text":"Express is a web framework for Node.js.","title":"Express"},{"location":"Pirate-Bridge/Theory/http/","text":"HTTP # HTTP is the foundation of internet communication.","title":"HTTP"},{"location":"Pirate-Bridge/Theory/http/#http","text":"HTTP is the foundation of internet communication.","title":"HTTP"},{"location":"Pirate-Bridge/Theory/nodejs/","text":"Nodejs # Nodejs is a Javascript runtime built on the V8 Javascript engine used in Googles Chrome browser. Install Instructions # Load source path for newest node Version in bash # Use correct version number: 14 is current as of 2020-08-28 curl -sL https://deb.nodesource.com/setup_14.x | sudo -E bash - Install the added nodejs version # sudo apt install -y nodejs This needs to Happen right after loading the source path and in the same CMD Session! Server # sudo npm install -g serve HTTP Server # sudo npm install -g http-server https://www.npmjs.com/package/http-server Server with HTTPS / Create Self Signed Certificates # sudo openssl req -newkey rsa:2048 -new -nodes -x509 -days 3650 -keyout key.pem -out cert.pem serve --ssl-cert ./cert.pem --ssl-key ./key.pem HTTPS # https://nodejs.org/en/knowledge/HTTP/servers/how-to-create-a-HTTPS-server/","title":"Nodejs"},{"location":"Pirate-Bridge/Theory/nodejs/#nodejs","text":"Nodejs is a Javascript runtime built on the V8 Javascript engine used in Googles Chrome browser.","title":"Nodejs"},{"location":"Pirate-Bridge/Theory/nodejs/#install-instructions","text":"","title":"Install Instructions"},{"location":"Pirate-Bridge/Theory/nodejs/#load-source-path-for-newest-node-version-in-bash","text":"Use correct version number: 14 is current as of 2020-08-28 curl -sL https://deb.nodesource.com/setup_14.x | sudo -E bash -","title":"Load source path for newest node Version in bash"},{"location":"Pirate-Bridge/Theory/nodejs/#install-the-added-nodejs-version","text":"sudo apt install -y nodejs This needs to Happen right after loading the source path and in the same CMD Session!","title":"Install the added nodejs version"},{"location":"Pirate-Bridge/Theory/nodejs/#server","text":"sudo npm install -g serve","title":"Server"},{"location":"Pirate-Bridge/Theory/nodejs/#http-server","text":"sudo npm install -g http-server https://www.npmjs.com/package/http-server","title":"HTTP Server"},{"location":"Pirate-Bridge/Theory/nodejs/#server-with-https--create-self-signed-certificates","text":"sudo openssl req -newkey rsa:2048 -new -nodes -x509 -days 3650 -keyout key.pem -out cert.pem serve --ssl-cert ./cert.pem --ssl-key ./key.pem","title":"Server with HTTPS / Create Self Signed Certificates"},{"location":"Pirate-Bridge/Theory/nodejs/#https","text":"https://nodejs.org/en/knowledge/HTTP/servers/how-to-create-a-HTTPS-server/","title":"HTTPS"},{"location":"Pirate-Bridge/Theory/raspberrypi/","text":"Raspberry Pi # 4B+ # BCM2711 ARM Peripherals\\ https://www.raspberrypi.org/documentation/hardware/raspberrypi/bcm2711/rpi_DATA_2711_1p0_preliminary.pdf \\ P. 178 (182) \"Separate 32x8 transmit and 32x12 receive FIFO memory\"\\ HardwareSerialbuffer Default Tx 32x8bit Rx 32x12bit BCM2835 ARM Peripherals\\ https://www.raspberrypi.org/documentation/hardware/raspberrypi/bcm2835/BCM2835-ARM-Peripherals.pdf P. 201 \"Total Data FIFO RAM Depth 4096\" SoftwareSerialbuffer Default 4KB","title":"Raspberry Pi"},{"location":"Pirate-Bridge/Theory/raspberrypi/#raspberry-pi","text":"","title":"Raspberry Pi"},{"location":"Pirate-Bridge/Theory/raspberrypi/#4b","text":"BCM2711 ARM Peripherals\\ https://www.raspberrypi.org/documentation/hardware/raspberrypi/bcm2711/rpi_DATA_2711_1p0_preliminary.pdf \\ P. 178 (182) \"Separate 32x8 transmit and 32x12 receive FIFO memory\"\\ HardwareSerialbuffer Default Tx 32x8bit Rx 32x12bit BCM2835 ARM Peripherals\\ https://www.raspberrypi.org/documentation/hardware/raspberrypi/bcm2835/BCM2835-ARM-Peripherals.pdf P. 201 \"Total Data FIFO RAM Depth 4096\" SoftwareSerialbuffer Default 4KB","title":"4B+"},{"location":"Pirate-Bridge/Theory/sse/","text":"Server-Sent-Events # Spec of the server-sent events.","title":"Server-Sent-Events"},{"location":"Pirate-Bridge/Theory/sse/#server-sent-events","text":"Spec of the server-sent events.","title":"Server-Sent-Events"},{"location":"Pirate-Flag/00-flag/","text":"Overview Pirate Flag # Under this Banner the client is placed. The client is a React application. Its job is to display the provided data from the hook and to enable remote control. Additionally a live feed can be displayed. Getting Started Here you can see a first implementation of a Pirate-Flag client. Requirements # The rough requirements of the Client are: The client needs to display a chart of the data sent by the hook. The client needs to be able to return control commands and change variables on the Arduino A live feed needs to be displayed of the project. Requirements Implementation # The React app is based on a CRA template with Typescript enabled. Separate components were created for the chart, the controls and the live feed. Further details on Implementation Validation and Future Steps # Validation","title":"Overview Pirate Flag"},{"location":"Pirate-Flag/00-flag/#overview-pirate-flag","text":"Under this Banner the client is placed. The client is a React application. Its job is to display the provided data from the hook and to enable remote control. Additionally a live feed can be displayed. Getting Started Here you can see a first implementation of a Pirate-Flag client.","title":"Overview Pirate Flag"},{"location":"Pirate-Flag/00-flag/#requirements","text":"The rough requirements of the Client are: The client needs to display a chart of the data sent by the hook. The client needs to be able to return control commands and change variables on the Arduino A live feed needs to be displayed of the project. Requirements","title":"Requirements"},{"location":"Pirate-Flag/00-flag/#implementation","text":"The React app is based on a CRA template with Typescript enabled. Separate components were created for the chart, the controls and the live feed. Further details on Implementation","title":"Implementation"},{"location":"Pirate-Flag/00-flag/#validation-and-future-steps","text":"Validation","title":"Validation and Future Steps"},{"location":"Pirate-Flag/10-flag-getting-started/","text":"Getting Started # The assumption is that the Raspberry PI was correctly set up and NodeJS was installed. To start install this project follow these steps: Fetch and install the Github repository # git clone https://github.com/Ch3ri0ur/pirate.git cd pirate npm install Run in a Development Mode # npm run start Build for Production # npm run build This command compresses the client and strips out unnecessary symbols. The resulting bundle is saved to the ./build directory. Serve the Production build # Any static HTTP server can serve this build, but the Pirate-Bridge already serves the ./build folder in its root directory. So the build folder can just be moved. Alternatively can the caddy server of the Map be configured to serve this folder instead of routing the \"/\" endpoint to the Bridge.","title":"Getting Started"},{"location":"Pirate-Flag/10-flag-getting-started/#getting-started","text":"The assumption is that the Raspberry PI was correctly set up and NodeJS was installed. To start install this project follow these steps:","title":"Getting Started"},{"location":"Pirate-Flag/10-flag-getting-started/#fetch-and-install-the-github-repository","text":"git clone https://github.com/Ch3ri0ur/pirate.git cd pirate npm install","title":"Fetch and install the Github repository"},{"location":"Pirate-Flag/10-flag-getting-started/#run-in-a-development-mode","text":"npm run start","title":"Run in a Development Mode"},{"location":"Pirate-Flag/10-flag-getting-started/#build-for-production","text":"npm run build This command compresses the client and strips out unnecessary symbols. The resulting bundle is saved to the ./build directory.","title":"Build for Production"},{"location":"Pirate-Flag/10-flag-getting-started/#serve-the-production-build","text":"Any static HTTP server can serve this build, but the Pirate-Bridge already serves the ./build folder in its root directory. So the build folder can just be moved. Alternatively can the caddy server of the Map be configured to serve this folder instead of routing the \"/\" endpoint to the Bridge.","title":"Serve the Production build"},{"location":"Pirate-Flag/20-flag-requirements/","text":"Requirements # The Flag component has a set of functional and non functional Requirements. The following requirements are derived from the accepted overarching requirements approved by the customer. Functional Requirements # See variables from Arduino Project # It must be possible to view the current value. The history of the data is to be displayed in a chart. Change variables on Arduino Project # It must be possible to select a variable and change it on the Arduino Live-view of Arduino Project # A video stream of the project must be viewable from the client. Non-Functional Requirements # The Frontend must run stably for 3 hours. The delay to display the information may not exceed two seconds. The client must be usable with LTE. It should be possible to support multiple different projects It should be possible to support multiple projects simultaneously The client should be a website. A single Project should be implemented. It should be possible to export the measured data. The client should use the client API as specified.","title":"Requirements"},{"location":"Pirate-Flag/20-flag-requirements/#requirements","text":"The Flag component has a set of functional and non functional Requirements. The following requirements are derived from the accepted overarching requirements approved by the customer.","title":"Requirements"},{"location":"Pirate-Flag/20-flag-requirements/#functional-requirements","text":"","title":"Functional Requirements"},{"location":"Pirate-Flag/20-flag-requirements/#see-variables-from-arduino-project","text":"It must be possible to view the current value. The history of the data is to be displayed in a chart.","title":"See variables from Arduino Project"},{"location":"Pirate-Flag/20-flag-requirements/#change-variables-on-arduino-project","text":"It must be possible to select a variable and change it on the Arduino","title":"Change variables on Arduino Project"},{"location":"Pirate-Flag/20-flag-requirements/#live-view-of-arduino-project","text":"A video stream of the project must be viewable from the client.","title":"Live-view of Arduino Project"},{"location":"Pirate-Flag/20-flag-requirements/#non-functional-requirements","text":"The Frontend must run stably for 3 hours. The delay to display the information may not exceed two seconds. The client must be usable with LTE. It should be possible to support multiple different projects It should be possible to support multiple projects simultaneously The client should be a website. A single Project should be implemented. It should be possible to export the measured data. The client should use the client API as specified.","title":"Non-Functional Requirements"},{"location":"Pirate-Flag/30-flag-implementation/","text":"Implementation # The flag is a website written in React a library for creating dynamic websites. This React client is based on a CRA template for Typescript . A React project is structured into components which can be placed into each other. This helps encapsulating the different tasks. Component Communication # These components can communicate with their children by passing variables called properties, \"props\", and their parents by passing callbacks as properties a method called \"hoisting\". With only these methods it would be quite tedious to pass variables to a neighboring component branch, requiring hoisting and subsequent \"prop drilling\" a pattern in which properties are passed on from child to child in order to reach the destination. To streamline this process it is possible to use either a state management library or implement this functionality. In this project the library react-hookstore was used which is based on Reacts useState-hook. useState The useState-hook is a new state management method in React. When calling [state,setState] = useState(initialValue) the value and a setState function are created. If this function is called the component in which the useState was used is notified of the new state and rerenders. With this library a similar \"useStore\" hook can be used to access the same variables, in multiple independent components without needing the mentioned \"hoisting\" and \"prop drilling\". Layout # The general Layout of the webpage is: Header Content Chart Controls Live Feed Footer Both Header and Footer are static. The functionality of the client stems from the content component. It has 4 major sub components: The chart to display the current data The controls for influencing the Arduino and a live view of the project. In addition a settings modal can be opened on top of the website. Startup # On load the content container queries the bridge for the configuration of the project it should display. Once the query returns the configuration is passed to the child components. These then can dynamically adapt their appearance depending on the amount of variables needed to be displayed or controlled and their configuration. Chart # Spanning the top the most important feature of the client is displayed: the chart of the current information from the Arduino project. To draw the chart a library called uPlot is used. This library was chosen, because it is a no frills, small bundle size, fast draw time ( benchmarks ) kind of library. An alternative would have been a webGL based chart renderer, utilizing the GPU, but they are bigger, slower to start, harder to integrate and not as fully featured. The Chart component has a set of tasks: Generating the Chart # On the first render or when the configuration is changed the component analyzes the configuration and creates data structures that can store the expected data and have the format the uPlot library needs for its charts. Once this is generated a new uPlot instance is generated with the desired configuration. Because this is a charting application strings and chars are not supported. Support for these might come in a later release. Additionally listeners are generated to watch for resizing events of the window, so that the chart always stretches the whole width of the window. Source Data # In order to be modular this component also sources the Arduino data directly and registers for the SSE-Stream on \"/stream\". This creates a stream of events which the Javascript runtime cyclicly processes. This cycle time is approximately 50 ms. If the chart were to be updated on the events directly multiple rerenders would be batched into a cycle of 50 ms at a minimum. To smooth out the experience the events themselves only store the received data in a queue to be processed when the chart is updated on a higher and regular interval. Update Chart # To allow for smooth animation the chart is not updated, when the stream events are processed, but on each redraw of the website. Each redraw a appropriate portion of the previously mentioned queue is used to update the chart. In normal conditions this results in frame times of sub 16 ms. When more points are displayed on screen this time gradually increases. In tests with 6 graphs and 5000 timestamps render times increased to around 50 ms. Which is equal to around 20 frames per second. This is still acceptable and even resulted in a smoother experience, because the plots moved at a slower pace. Amount of Timestamps The amount of timestamps the chart plots can be set in the settings modal. Depending on this number a larger or smaller time frame is shown. Pause # To analyze or export a specific period the plotting can be paused. While it is paused the Data is still updated in the background but a snapshot is stored and displayed. During such a pause it is possible to utilize the charts full capability with zooming and value readouts on mouse hover. During a pause the export button is enabled. Export Data # When the export is triggered the snapshot is transposed, the column names are added and both are converted into a .csv compatible string. This string is then downloaded as a .csv file named \"export.csv\". Controls # The control section is located under the Chart. This components job is to display the current value of the control variables on the Arduino and to enable the client to send control messages back to the Arduino and modify these variables. For that the component has the following functions. Display Controls # The parent content container passes it the configuration received from the Pirate-Hook. The control container generates a list of sub components that each control a single variable. Depending on the data type of the variable to be controlled the control surface could be different, but currently only the number datatype is supported and represented by a slider. In the future text inputs can be used for the string and char data types. Each of these sub components receives the id, name, data type, current value, min value and max value. With this it can display a suitable set of controls. Send Control Requests # When the user changes the value by for instance dragging the slider updates get sent to the POST \"/ctrl\" endpoint on the Bridge. As to not overload the connection these updates get throttled. They can only occur every 700 ms and the last value ist sent too. With this the value where the user let go of the slider is sent but during sliding infrequent updates are sent too. Sync Control between Clients # To enable multiple users concurrently accessing the Arduino the controls need to be synchronized. When one user modifies the values and another user joins the session the current values should be displayed. When any user now changes a value this change should also be reflected on the controls of the other user. This is achieved by listening to the SSE-Stream at the GET \"/configUpdates\" endpoint. Here all changes get broadcasted back to the clients. This does not achieve the desired effect yet, because the own client listens to its own changes echoed back at it. This would create a feed back loop. To avoid this each client sends a unique identifier, a UUIDv4, with the control messages. These unique identifiers are broadcasted back to all clients with the updates and the client from which the changes originated can ignore said changes. For all other clients the identifiers don't match and they update accordingly. To get notified of variable changes this component registers at another SSE-Stream at the GET \"/configUpdates\" endpoint. Here all clients can listen to the rebroadcasted changes. The unique identifier here is used to ignore all updates that originate from the own client. So that not every sub component needs to listen to the event stream only the control component listens to the stream and notifies the correct subcomponent via a callback it has registered. Settings # To change general settings an options button opens a modal, a overlay, can be opened. Currently the visibility of the graphs in the chart and the amount of timestamps can be set. This information is passed via \"useStore\" hooks, notifying the correct other components. Live View # To display the live stream broadcasted by the Priate-Spyglass the Javascript library provided by janus-gateway was adapted to work within a React project. Old dependencies where removed and a missing dependency was added. Furthermore the module needs to be exported to be usable within the React application. With the library included a provided streaming example could be adopted to work without jquery and with React. This example has the following workflow: On first render a new instance of the Janus client ist instantiated. A session is automatically connected with the janus-gateway via the \"/janus\" endpoint. With the session available the client can request a videostream over WebRTC from the gateway. When the gateway opens the stream it is attached to a video element on the webpage. While streaming the live view generates, depending on the source the gateway publishes, around 1 Mbps of traffic. WebRTC Primer # WebRTC is a open framework to enable real time peer-to-peer communication. It supports video, audio and data. To establish a WebRTC connection another signaling channel is needed to establish and manage the hight throughput connections. The high throughput channels are directly peer-to-peer. Establishing them is sadly not as straight forward as one might hope. To establish a connection both parties have to negotiate a way to navigate network boundaries, firewalls and NATs. This is normally done via STUN/ICE. These protocols fail sometimes on more complex networks and symmetric NATs, so as a last resort it is possible to relay the peer-to-peer connection via TURN over a relay server, kind of defeating the purpose of a peer-to-peer connection. The target network turned out, on first glance, to be of the complex variety and creates problems during negotiation a residential connection might not pose. These have as of writing not been resolved. Further investigation is necessary to enable this functionality on premise.","title":"Implementation"},{"location":"Pirate-Flag/30-flag-implementation/#implementation","text":"The flag is a website written in React a library for creating dynamic websites. This React client is based on a CRA template for Typescript . A React project is structured into components which can be placed into each other. This helps encapsulating the different tasks.","title":"Implementation"},{"location":"Pirate-Flag/30-flag-implementation/#component-communication","text":"These components can communicate with their children by passing variables called properties, \"props\", and their parents by passing callbacks as properties a method called \"hoisting\". With only these methods it would be quite tedious to pass variables to a neighboring component branch, requiring hoisting and subsequent \"prop drilling\" a pattern in which properties are passed on from child to child in order to reach the destination. To streamline this process it is possible to use either a state management library or implement this functionality. In this project the library react-hookstore was used which is based on Reacts useState-hook. useState The useState-hook is a new state management method in React. When calling [state,setState] = useState(initialValue) the value and a setState function are created. If this function is called the component in which the useState was used is notified of the new state and rerenders. With this library a similar \"useStore\" hook can be used to access the same variables, in multiple independent components without needing the mentioned \"hoisting\" and \"prop drilling\".","title":"Component Communication"},{"location":"Pirate-Flag/30-flag-implementation/#layout","text":"The general Layout of the webpage is: Header Content Chart Controls Live Feed Footer Both Header and Footer are static. The functionality of the client stems from the content component. It has 4 major sub components: The chart to display the current data The controls for influencing the Arduino and a live view of the project. In addition a settings modal can be opened on top of the website.","title":"Layout"},{"location":"Pirate-Flag/30-flag-implementation/#startup","text":"On load the content container queries the bridge for the configuration of the project it should display. Once the query returns the configuration is passed to the child components. These then can dynamically adapt their appearance depending on the amount of variables needed to be displayed or controlled and their configuration.","title":"Startup"},{"location":"Pirate-Flag/30-flag-implementation/#chart","text":"Spanning the top the most important feature of the client is displayed: the chart of the current information from the Arduino project. To draw the chart a library called uPlot is used. This library was chosen, because it is a no frills, small bundle size, fast draw time ( benchmarks ) kind of library. An alternative would have been a webGL based chart renderer, utilizing the GPU, but they are bigger, slower to start, harder to integrate and not as fully featured. The Chart component has a set of tasks:","title":"Chart"},{"location":"Pirate-Flag/30-flag-implementation/#generating-the-chart","text":"On the first render or when the configuration is changed the component analyzes the configuration and creates data structures that can store the expected data and have the format the uPlot library needs for its charts. Once this is generated a new uPlot instance is generated with the desired configuration. Because this is a charting application strings and chars are not supported. Support for these might come in a later release. Additionally listeners are generated to watch for resizing events of the window, so that the chart always stretches the whole width of the window.","title":"Generating the Chart"},{"location":"Pirate-Flag/30-flag-implementation/#source-data","text":"In order to be modular this component also sources the Arduino data directly and registers for the SSE-Stream on \"/stream\". This creates a stream of events which the Javascript runtime cyclicly processes. This cycle time is approximately 50 ms. If the chart were to be updated on the events directly multiple rerenders would be batched into a cycle of 50 ms at a minimum. To smooth out the experience the events themselves only store the received data in a queue to be processed when the chart is updated on a higher and regular interval.","title":"Source Data"},{"location":"Pirate-Flag/30-flag-implementation/#update-chart","text":"To allow for smooth animation the chart is not updated, when the stream events are processed, but on each redraw of the website. Each redraw a appropriate portion of the previously mentioned queue is used to update the chart. In normal conditions this results in frame times of sub 16 ms. When more points are displayed on screen this time gradually increases. In tests with 6 graphs and 5000 timestamps render times increased to around 50 ms. Which is equal to around 20 frames per second. This is still acceptable and even resulted in a smoother experience, because the plots moved at a slower pace. Amount of Timestamps The amount of timestamps the chart plots can be set in the settings modal. Depending on this number a larger or smaller time frame is shown.","title":"Update Chart"},{"location":"Pirate-Flag/30-flag-implementation/#pause","text":"To analyze or export a specific period the plotting can be paused. While it is paused the Data is still updated in the background but a snapshot is stored and displayed. During such a pause it is possible to utilize the charts full capability with zooming and value readouts on mouse hover. During a pause the export button is enabled.","title":"Pause"},{"location":"Pirate-Flag/30-flag-implementation/#export-data","text":"When the export is triggered the snapshot is transposed, the column names are added and both are converted into a .csv compatible string. This string is then downloaded as a .csv file named \"export.csv\".","title":"Export Data"},{"location":"Pirate-Flag/30-flag-implementation/#controls","text":"The control section is located under the Chart. This components job is to display the current value of the control variables on the Arduino and to enable the client to send control messages back to the Arduino and modify these variables. For that the component has the following functions.","title":"Controls"},{"location":"Pirate-Flag/30-flag-implementation/#display-controls","text":"The parent content container passes it the configuration received from the Pirate-Hook. The control container generates a list of sub components that each control a single variable. Depending on the data type of the variable to be controlled the control surface could be different, but currently only the number datatype is supported and represented by a slider. In the future text inputs can be used for the string and char data types. Each of these sub components receives the id, name, data type, current value, min value and max value. With this it can display a suitable set of controls.","title":"Display Controls"},{"location":"Pirate-Flag/30-flag-implementation/#send-control-requests","text":"When the user changes the value by for instance dragging the slider updates get sent to the POST \"/ctrl\" endpoint on the Bridge. As to not overload the connection these updates get throttled. They can only occur every 700 ms and the last value ist sent too. With this the value where the user let go of the slider is sent but during sliding infrequent updates are sent too.","title":"Send Control Requests"},{"location":"Pirate-Flag/30-flag-implementation/#sync-control-between-clients","text":"To enable multiple users concurrently accessing the Arduino the controls need to be synchronized. When one user modifies the values and another user joins the session the current values should be displayed. When any user now changes a value this change should also be reflected on the controls of the other user. This is achieved by listening to the SSE-Stream at the GET \"/configUpdates\" endpoint. Here all changes get broadcasted back to the clients. This does not achieve the desired effect yet, because the own client listens to its own changes echoed back at it. This would create a feed back loop. To avoid this each client sends a unique identifier, a UUIDv4, with the control messages. These unique identifiers are broadcasted back to all clients with the updates and the client from which the changes originated can ignore said changes. For all other clients the identifiers don't match and they update accordingly. To get notified of variable changes this component registers at another SSE-Stream at the GET \"/configUpdates\" endpoint. Here all clients can listen to the rebroadcasted changes. The unique identifier here is used to ignore all updates that originate from the own client. So that not every sub component needs to listen to the event stream only the control component listens to the stream and notifies the correct subcomponent via a callback it has registered.","title":"Sync Control between Clients"},{"location":"Pirate-Flag/30-flag-implementation/#settings","text":"To change general settings an options button opens a modal, a overlay, can be opened. Currently the visibility of the graphs in the chart and the amount of timestamps can be set. This information is passed via \"useStore\" hooks, notifying the correct other components.","title":"Settings"},{"location":"Pirate-Flag/30-flag-implementation/#live-view","text":"To display the live stream broadcasted by the Priate-Spyglass the Javascript library provided by janus-gateway was adapted to work within a React project. Old dependencies where removed and a missing dependency was added. Furthermore the module needs to be exported to be usable within the React application. With the library included a provided streaming example could be adopted to work without jquery and with React. This example has the following workflow: On first render a new instance of the Janus client ist instantiated. A session is automatically connected with the janus-gateway via the \"/janus\" endpoint. With the session available the client can request a videostream over WebRTC from the gateway. When the gateway opens the stream it is attached to a video element on the webpage. While streaming the live view generates, depending on the source the gateway publishes, around 1 Mbps of traffic.","title":"Live View"},{"location":"Pirate-Flag/30-flag-implementation/#webrtc-primer","text":"WebRTC is a open framework to enable real time peer-to-peer communication. It supports video, audio and data. To establish a WebRTC connection another signaling channel is needed to establish and manage the hight throughput connections. The high throughput channels are directly peer-to-peer. Establishing them is sadly not as straight forward as one might hope. To establish a connection both parties have to negotiate a way to navigate network boundaries, firewalls and NATs. This is normally done via STUN/ICE. These protocols fail sometimes on more complex networks and symmetric NATs, so as a last resort it is possible to relay the peer-to-peer connection via TURN over a relay server, kind of defeating the purpose of a peer-to-peer connection. The target network turned out, on first glance, to be of the complex variety and creates problems during negotiation a residential connection might not pose. These have as of writing not been resolved. Further investigation is necessary to enable this functionality on premise.","title":"WebRTC Primer"},{"location":"Pirate-Flag/40-flag-validation/","text":"Validation and Future Steps # In this section the initial requirements are measured against the current implementation. Functional Requirements # The proposed requirements are solved in this solution. See variables from Arduino Project # With the chart component the variables that have been designated to be streamed are displayed. The variable type is currently limited to only numbers and booleans. Change variables on Arduino Project # The control component allows the user to change the variables on the Arduino which have been designated to be changeable. The variable type is currently limited to only numbers and booleans. Live-view of Arduino Project # The live view can be started. The latency has been measured to be around 300 ms. This measurement has been done by creating a feedback loop of a accurate timer on screen and filming that timer and displaying the output below. With careful placement of the camera multiple iterations could be captured. The loop time fluctuated but a full cycle time of around 300 ms could be measured over 5 cycles. This requirement has not been full met: Because of limitations with WebRTC and NAT traversal the live view does not work reliably. Non-Functional Requirements # The frontend must run stably for 3 hours. In long term tests the frontend ran for more than 3 hours consistently. The delay to display the information may not exceed two seconds. The delay of the graph has not been measured, but rough estimates place it well below two seconds. The controls have been throttled as to not overwhelm the server. This introduces a latency of above 700 ms which is still acceptable. The delay of the live view has been measured to be around 300 ms. The client must be usable with LTE. The client has been tested with It should be possible to support multiple different projects The frontend is created dynamically and thus project independent. It should be possible to support multiple projects simultaneously The frontend does not yet support multiple simultaneous projects or project switching. The client should be a website. The client is a website. A single Project should be implemented. A mock project is implemented. It should be possible to export the measured data. When the chart is paused, it is possible to download the data into a .csv file. The client should use the client API as specified. The client communicates with the backend over the specified client API Shortcomings and Future Steps # The most important future steps include an implementation for managing and accessing multiple projects. Further steps include developing a more robust live view implementation and improving overall appearance of the website.","title":"Validation and Future Steps"},{"location":"Pirate-Flag/40-flag-validation/#validation-and-future-steps","text":"In this section the initial requirements are measured against the current implementation.","title":"Validation and Future Steps"},{"location":"Pirate-Flag/40-flag-validation/#functional-requirements","text":"The proposed requirements are solved in this solution.","title":"Functional Requirements"},{"location":"Pirate-Flag/40-flag-validation/#see-variables-from-arduino-project","text":"With the chart component the variables that have been designated to be streamed are displayed. The variable type is currently limited to only numbers and booleans.","title":"See variables from Arduino Project"},{"location":"Pirate-Flag/40-flag-validation/#change-variables-on-arduino-project","text":"The control component allows the user to change the variables on the Arduino which have been designated to be changeable. The variable type is currently limited to only numbers and booleans.","title":"Change variables on Arduino Project"},{"location":"Pirate-Flag/40-flag-validation/#live-view-of-arduino-project","text":"The live view can be started. The latency has been measured to be around 300 ms. This measurement has been done by creating a feedback loop of a accurate timer on screen and filming that timer and displaying the output below. With careful placement of the camera multiple iterations could be captured. The loop time fluctuated but a full cycle time of around 300 ms could be measured over 5 cycles. This requirement has not been full met: Because of limitations with WebRTC and NAT traversal the live view does not work reliably.","title":"Live-view of Arduino Project"},{"location":"Pirate-Flag/40-flag-validation/#non-functional-requirements","text":"The frontend must run stably for 3 hours. In long term tests the frontend ran for more than 3 hours consistently. The delay to display the information may not exceed two seconds. The delay of the graph has not been measured, but rough estimates place it well below two seconds. The controls have been throttled as to not overwhelm the server. This introduces a latency of above 700 ms which is still acceptable. The delay of the live view has been measured to be around 300 ms. The client must be usable with LTE. The client has been tested with It should be possible to support multiple different projects The frontend is created dynamically and thus project independent. It should be possible to support multiple projects simultaneously The frontend does not yet support multiple simultaneous projects or project switching. The client should be a website. The client is a website. A single Project should be implemented. A mock project is implemented. It should be possible to export the measured data. When the chart is paused, it is possible to download the data into a .csv file. The client should use the client API as specified. The client communicates with the backend over the specified client API","title":"Non-Functional Requirements"},{"location":"Pirate-Flag/40-flag-validation/#shortcomings-and-future-steps","text":"The most important future steps include an implementation for managing and accessing multiple projects. Further steps include developing a more robust live view implementation and improving overall appearance of the website.","title":"Shortcomings and Future Steps"},{"location":"Pirate-Flag/Misc/frontend/","text":"Frontend thoughts # TODO Redo Page or in sub Folder Here is a assortment of random thoughts about the frontend Limit rerender by not using state changes in higher components, triggering subsequent rerender of whole tree SSE events go into event queue and are dealt with in batches -> every 50ms -> no smooth update possible on requestanimationframe to make updates smoother antd to make styling easier, bloats the bundle size. tailwind as alternative perhaps interesting https://stackoverflow.com/questions/29487978/how-to-embed-h264-video-file-in-html-webpage-using-video-tags/29489356 synchronize video and graphs ? if possible how perhaps what kind of player? graphs extension janus makes problems -> when janus.js defaultExtension checks in init for event.data.type == 'janusGotScreen' && cache[event.data.id] this test fails with type being undefined when another application sends messages that are not in the expected format. This test is more stable and does not error if a unknown message is received. event.data?.type && event.data.type == 'janusGotScreen' && cache[event.data.id] in line 72 and 84 of janus.js uplot has a problem in 1.2.1 when no y-scale and no initial values for the data is used. something about wsc.range not defined. Initialize with a value and it works solved in 1.2.2","title":"Frontend thoughts"},{"location":"Pirate-Flag/Misc/frontend/#frontend-thoughts","text":"TODO Redo Page or in sub Folder Here is a assortment of random thoughts about the frontend Limit rerender by not using state changes in higher components, triggering subsequent rerender of whole tree SSE events go into event queue and are dealt with in batches -> every 50ms -> no smooth update possible on requestanimationframe to make updates smoother antd to make styling easier, bloats the bundle size. tailwind as alternative perhaps interesting https://stackoverflow.com/questions/29487978/how-to-embed-h264-video-file-in-html-webpage-using-video-tags/29489356 synchronize video and graphs ? if possible how perhaps what kind of player? graphs extension janus makes problems -> when janus.js defaultExtension checks in init for event.data.type == 'janusGotScreen' && cache[event.data.id] this test fails with type being undefined when another application sends messages that are not in the expected format. This test is more stable and does not error if a unknown message is received. event.data?.type && event.data.type == 'janusGotScreen' && cache[event.data.id] in line 72 and 84 of janus.js uplot has a problem in 1.2.1 when no y-scale and no initial values for the data is used. something about wsc.range not defined. Initialize with a value and it works solved in 1.2.2","title":"Frontend thoughts"},{"location":"Pirate-Hook/00-hook/","text":"Overview Pirate Hook # The Pirate Hook hooks into the users arduino program and provides functionality for the data transfer from and to the Pirate Flag over the Pirate Bridge . The communication to the Pirate Bridge uses the Pirate Serial Protocol that was created for this project. The protocol is kept simple and is focused on reducing the amount of actions on the Arduino side. Also the thinking is mostly exported on the Pirate Bridge side. Pirate Hook uses a serial connection of the Arduino's to transmit and receive data by the protocol. In the current implementation only Serial communication over UART/USB is supported. Getting Started # In the Getting Started you find all needed steps to get it running on the Arduino. Also some more modification that can be done by Defines can found there. Getting Started Requirements # The Requirements have been created from the first wishes and got extended by needed features and aspects, that occurred during the development. Some of them are currently very focused on the initial setup of Raspberry Pi and Arduino. This will maybe in further Steps change. Theory # In the Theory Folder some knowledge can be found, that influenced the decisions of the specifications. Also it includes data sheets and other research material. Implementation # In the Implementation Section all function descriptions and their requirements to function probably can be found here. Also the possible user modifications and the normal and special behavior in situations are described. This includes the wanted features and known bugs or tradeoffs. Validation # The Validation contains a overview of the requirement fulfillment of the created Hook implementation. Used concepts get rated and further needed and planned steps get introduced.","title":"Overview Pirate Hook"},{"location":"Pirate-Hook/00-hook/#overview-pirate-hook","text":"The Pirate Hook hooks into the users arduino program and provides functionality for the data transfer from and to the Pirate Flag over the Pirate Bridge . The communication to the Pirate Bridge uses the Pirate Serial Protocol that was created for this project. The protocol is kept simple and is focused on reducing the amount of actions on the Arduino side. Also the thinking is mostly exported on the Pirate Bridge side. Pirate Hook uses a serial connection of the Arduino's to transmit and receive data by the protocol. In the current implementation only Serial communication over UART/USB is supported.","title":"Overview Pirate Hook"},{"location":"Pirate-Hook/00-hook/#getting-started","text":"In the Getting Started you find all needed steps to get it running on the Arduino. Also some more modification that can be done by Defines can found there. Getting Started","title":"Getting Started"},{"location":"Pirate-Hook/00-hook/#requirements","text":"The Requirements have been created from the first wishes and got extended by needed features and aspects, that occurred during the development. Some of them are currently very focused on the initial setup of Raspberry Pi and Arduino. This will maybe in further Steps change.","title":"Requirements"},{"location":"Pirate-Hook/00-hook/#theory","text":"In the Theory Folder some knowledge can be found, that influenced the decisions of the specifications. Also it includes data sheets and other research material.","title":"Theory"},{"location":"Pirate-Hook/00-hook/#implementation","text":"In the Implementation Section all function descriptions and their requirements to function probably can be found here. Also the possible user modifications and the normal and special behavior in situations are described. This includes the wanted features and known bugs or tradeoffs.","title":"Implementation"},{"location":"Pirate-Hook/00-hook/#validation","text":"The Validation contains a overview of the requirement fulfillment of the created Hook implementation. Used concepts get rated and further needed and planned steps get introduced.","title":"Validation"},{"location":"Pirate-Hook/10-hook-getting-started/","text":"Getting Started # Warning! The function names have changed over the versions and can be different in old ones. In this Code Example a really basic Setup can be found and can be extended easily. 1. Include Library # The Pirate Library needs to be inserted in the Arduino Project folder. After pirate.h and pirate_config.h are in the Folder the Programm/Arduino IDE can be opened again and the Code can be included in the Programm with: #include \"pirate.h\" 2. Configs & Help # Config and Help can be found in the pirate_config.h . It Provides the main Config-Parameter that can be adjusted and also the Function descriptions !NO DESCRIPTIONS YET!ONLY FUNCTION HEADERS ARE LISTED! With the Defines, the amount of possible Send and Receive Variables can be adjusted. #define PirAtE_SendVar_Amount 2 #define PirAtE_RecvVar_Amount 2 The defined amount needs to be equal or higher the amount used. It will cause Illegal Memory access when this is violated. When the defined amount is higher only a little bit more memory is used, but it will still work. 3. Usage # 3.1. Start # The Serial communication with the Host needs to be started, this means at the start of the Setup the Start Function needs to be called. It also sends out the System (Arduino) Based Informations. PirAtE_START (); 3.2. Add Variables # This needs to happen in the Arduino void setup() once for each Variable that should be send or received (both at once will work but the sliders in the Website will not adjust with it). It needs to happen after the Pirate Start or the information can not be send out! Datatypes: Datatype Defined Name int PirAtE_MSG_DATATYPE_INT unsigned int PirAtE_MSG_DATATYPE_UINT long PirAtE_MSG_DATATYPE_LONG unsigned long PirAtE_MSG_DATATYPE_ULONG float PirAtE_MSG_DATATYPE_FLOAT double PirAtE_MSG_DATATYPE_DOUBLE byte PirAtE_MSG_DATATYPE_BYTE word PirAtE_MSG_DATATYPE_WORD bool PirAtE_MSG_DATATYPE_BOOL char PirAtE_MSG_DATATYPE_CHAR char[] PirAtE_MSG_DATATYPE_STRING Strings have some limitations and are handelt different this can be found here or in the Implementation ! Add Variables to Send # All Variables that the user wants to be send and displayed on the website, need to be defined in the Arduino Setup with one of the following functions: byte key = PirAtE_ADD_SEND_VAR ( Data_Name , Global_VariableAddress , PirAtE_MSG_DATATYPE ); byte key = PirAtE_ADD_SEND_VAR ( Data_Name , Global_VariableAddress , PirAtE_MSG_DATATYPE , PirAtE_Scale ); byte key = PirAtE_ADD_SEND_VAR ( Data_Name , Global_VariableAddress , PirAtE_MSG_DATATYPE , PirAtE_Scale , PirAtE_MSG_SENDMODE ); The Function uses these arguments: key: byte Returns a ID that can be used for Flag management Data_Name: String Name of the Variable on the Website. E.g. \"Var1\" Should be short Global_VariableAdress: *any Pointer to any supported Datatype PirAtE_MSG_DATATYPE: PirAtE_MSG_DATATYPE PirAtE_Scale: String Scale Name in which the Variable should be displayed. E.g. \"Distance\" Units can be defined in Square Brackets and will. E.g. \"Distance in [m]\" Default is \"y\" with no unit Should be short PirAtE_MSG_SENDMODE PirAtE_MSG_SENDMODE_AUTO Send automatically each time it can PirAtE_MSG_SENDMODE_MANUEL Flag needs to be set each time it should be send Default is PirAtE_MSG_SENDMODE_AUTO Add Variables to Receive # All Variables that the user wants to be controllable on the website, need to be defined in the Arduino Setup with the following function: byte key = PirAtE_ADD_RECV_VAR ( Data_Name , Global_VariableAddress , PirAtE_MSG_DATATYPE , Default_Value , Max_Value , Min_Value ); The Function uses these arguments: key: byte Returns a ID that can be used for Flag management Data_Name: String Name of the Variable on the Website. E.g. \"Var1\" Should be short Global_VariableAdress: *any Pointer to any supported Datatype PirAtE_MSG_DATATYPE: PirAtE_MSG_DATATYPE Default_Value: any Initial Value Max_Value: any Max Value for the Control Min_Value: any Min Value for the Control 3.3. Send and Receive # To be able to Receive and Send the registered variables the Functions for Send and Receive need to be performed. They will try to Send and Receive, while trying to not exceed defined maximum Blocktimes, that can be defined. PirAtE_SEND (); PirAtE_RECV (); They need to be used in the Arduino void loop() and can be used multiple time, but this will increase the code size. Directly in the main loop, where it is very often called, is the best way to include it. The other code in the Loop should be nonen Blocking, so try to not use any delay(ms); , this way the sending and receiving happens frequently. Debug # All Messages need to be Send in the correct format, see Pirate Serial Protocol . For Debug the Pirate Hook provides a Function to send Debug message. It can be used like the Serial.println() . PirAtE_DEBUG ( content ); PirAtE_DEBUG ( content , format ); The Function uses these arguments: content: any format: a format modifier of Serial.println() Keep in Mind that this will fill the send buffer of the Arduino, especially intensive usage of Debug messages. When used before the Send Methode a full Buffer could cause a skip of the sending. When intensive debugging a disabling of the Pirate Communication and using the serial monitor is recommended. For better performance in the final application the Debug Messages can also be turned off . Disable Pirate Protocol # All Message use the Pirate Serial Protocol , this means also all Debug Messages start with an M and end with the Pirate Delimiter. Also all Send Variables get send all the time. To make Debugging in the Serial Monitor of the Arduino IDE easier, all Pirate related communication can be disabled with a Define. All Debug Message will than appear like a basic Serial.println() and the normal Sending gets Disabled. #define PirAtE_COM_OFF The Code size gets reduced dramatically by this, so keep in mind when turning it back on it will turn normal again. This can only be used when not connected to the Pirate Bridge ! Disable Debug # When this is defined all Debug messages will be deactivated completely. #define PirAtE_DEBUG_DISABLED Strings # Strings have some special properties, that are different from normal vars. The Send and Receive Var can be added with the basic Add methode, but in these cases the size of the String is set to the maximum possible length, which is depending on the Serial buffersize. In case of Sending its defined as PirAtE_DATATYPE_STRING_MAXLENGTH In case of Receiving it is PirAtE_RECEIVE_DATATYPE_STRING_MAXLENGTH This is the char symbol count without the String endsymbole \\0 . Long Strings can Influence the behavior of Send and Receive. Send String # For adding Strings to the Send-register the following functions need to be used. byte key = PirAtE_ADD_SEND_STRING ( Data_Name , Global_VariableAddress ); byte key = PirAtE_ADD_SEND_STRING ( Data_Name , Global_VariableAddress , PirAtE_MSG_SENDMODE ); byte key = PirAtE_ADD_SEND_STRING ( Data_Name , Global_VariableAddress , PirAtE_MSG_SENDMODE , StringBufferLength ); key: byte Returns a ID that can be used for Flag management Data_Name: String Name of the Variable on the Website. E.g. \"Var1\" Should be short Global_VariableAdress: *any Pointer to any supported Datatype PirAtE_MSG_DATATYPE: PirAtE_MSG_DATATYPE PirAtE_MSG_SENDMODE PirAtE_MSG_SENDMODE_AUTO Send automatically each time it can PirAtE_MSG_SENDMODE_MANUEL Flag needs to be set each time it should be send Default is PirAtE_MSG_SENDMODE_AUTO StringBufferLength: int Needs to be the Size of the allocated String Buffer (including \\0 space) Needs to be Smaller or Equal to PirAtE_DATATYPE_STRING_MAXLENGTH + 1 When a String isn't ended correctly it will be replaced with just a \\0 ! When long strings are used, no Debug messages should be used, because the Buffer could be to full for sending and it will always skip. By Enabling PirAtE_AllowActiveWaitingOnSend and a long enough blocktime it can be fixed, but cycle time will increase. Receive String # For adding Strings to the Recv-register the following function needs to be used. byte key = PirAtE_ADD_RECV_STRING ( Data_Name , Global_VariableAddress , StringBufferLength ); key: byte Returns a ID that can be used for Flag management Data_Name: String Name of the Variable on the Website. E.g. \"Var1\" Should be short Global_VariableAdress: *any Pointer to any supported Datatype PirAtE_MSG_DATATYPE: PirAtE_MSG_DATATYPE StringBufferLength: int Needs to be the Size of the allocated String Buffer (including \\0 space) Needs to be Smaller or Equal to PirAtE_DATATYPE_STRING_MAXLENGTH + 1 When a String isn't ended correctly it will try to read as much character as it finds and end it with a \\0 ! This means some messages could become a part of the string. When using the Default Add Variable Function, these Parameters are handelt different. Default_Value: any No effect Max_Value: any Limits the Size that can be created on the Pirate Bridge side Min_Value: any No effect It shouldn't be used to prevent unpredictable and unwanted behavior. Flags # There are two Flags, one for the Send and one for the Receive Variables. Send Flag # This Flag signals the Send function that \"New Data is available for sending\". It is only needed to be set when the PirAtE_MSG_SENDMODE is PirAtE_MSG_SENDMODE_MANUEL of the variable. When set it will send the Data just one Time in the next Send cycle. PirAtE_SET_SEND_FLAG ( key ); key: byte Is the returned ID of the Add Variable to Send Function. Receive Flag # With this Flag, the Receive function will signal that \"New Data is available for reading\". The Flag can be Read with the Get-function and needs to be reset with the Reset-Function. byte PirAtE_GET_RECV_FLAG ( key ) PirAtE_RST_RECV_FLAG ( key ); key: byte Is the returned ID of the Add Variable to Receive Function. More Defines # There are more small Defines for changing the Communication behavior of the Hook. Com Defines # The Communication can be adjusted with the following Defines, but the modification has to also happen on the Pirate Bridge Side . #define PirAtE_Serial_Baudrate 115200 When changing the Baudrate, make sure it is supported by the Arduino and in case of debugging in Serial Monitor, its supported Baudrates need to be accounted, too. Intervall Defines # With this Defines the message speed can be tweaked, what also has an impact on the Resource intensity on the Bridge side . #define PirAtE_SendMSGInterVal_micros 1000ul #define PirAtE_AllowedSendBlockTime_micros 2000ul #define PirAtE_RequestInterVal_micros 1000ul #define PirAtE_AllowedReceiveBlockTime_micros 200ul","title":"Getting Started"},{"location":"Pirate-Hook/10-hook-getting-started/#getting-started","text":"Warning! The function names have changed over the versions and can be different in old ones. In this Code Example a really basic Setup can be found and can be extended easily.","title":"Getting Started"},{"location":"Pirate-Hook/10-hook-getting-started/#1-include-library","text":"The Pirate Library needs to be inserted in the Arduino Project folder. After pirate.h and pirate_config.h are in the Folder the Programm/Arduino IDE can be opened again and the Code can be included in the Programm with: #include \"pirate.h\"","title":"1. Include Library"},{"location":"Pirate-Hook/10-hook-getting-started/#2-configs--help","text":"Config and Help can be found in the pirate_config.h . It Provides the main Config-Parameter that can be adjusted and also the Function descriptions !NO DESCRIPTIONS YET!ONLY FUNCTION HEADERS ARE LISTED! With the Defines, the amount of possible Send and Receive Variables can be adjusted. #define PirAtE_SendVar_Amount 2 #define PirAtE_RecvVar_Amount 2 The defined amount needs to be equal or higher the amount used. It will cause Illegal Memory access when this is violated. When the defined amount is higher only a little bit more memory is used, but it will still work.","title":"2. Configs &amp; Help"},{"location":"Pirate-Hook/10-hook-getting-started/#3-usage","text":"","title":"3. Usage"},{"location":"Pirate-Hook/10-hook-getting-started/#31-start","text":"The Serial communication with the Host needs to be started, this means at the start of the Setup the Start Function needs to be called. It also sends out the System (Arduino) Based Informations. PirAtE_START ();","title":"3.1. Start"},{"location":"Pirate-Hook/10-hook-getting-started/#32-add-variables","text":"This needs to happen in the Arduino void setup() once for each Variable that should be send or received (both at once will work but the sliders in the Website will not adjust with it). It needs to happen after the Pirate Start or the information can not be send out! Datatypes: Datatype Defined Name int PirAtE_MSG_DATATYPE_INT unsigned int PirAtE_MSG_DATATYPE_UINT long PirAtE_MSG_DATATYPE_LONG unsigned long PirAtE_MSG_DATATYPE_ULONG float PirAtE_MSG_DATATYPE_FLOAT double PirAtE_MSG_DATATYPE_DOUBLE byte PirAtE_MSG_DATATYPE_BYTE word PirAtE_MSG_DATATYPE_WORD bool PirAtE_MSG_DATATYPE_BOOL char PirAtE_MSG_DATATYPE_CHAR char[] PirAtE_MSG_DATATYPE_STRING Strings have some limitations and are handelt different this can be found here or in the Implementation !","title":"3.2. Add Variables"},{"location":"Pirate-Hook/10-hook-getting-started/#add-variables-to-send","text":"All Variables that the user wants to be send and displayed on the website, need to be defined in the Arduino Setup with one of the following functions: byte key = PirAtE_ADD_SEND_VAR ( Data_Name , Global_VariableAddress , PirAtE_MSG_DATATYPE ); byte key = PirAtE_ADD_SEND_VAR ( Data_Name , Global_VariableAddress , PirAtE_MSG_DATATYPE , PirAtE_Scale ); byte key = PirAtE_ADD_SEND_VAR ( Data_Name , Global_VariableAddress , PirAtE_MSG_DATATYPE , PirAtE_Scale , PirAtE_MSG_SENDMODE ); The Function uses these arguments: key: byte Returns a ID that can be used for Flag management Data_Name: String Name of the Variable on the Website. E.g. \"Var1\" Should be short Global_VariableAdress: *any Pointer to any supported Datatype PirAtE_MSG_DATATYPE: PirAtE_MSG_DATATYPE PirAtE_Scale: String Scale Name in which the Variable should be displayed. E.g. \"Distance\" Units can be defined in Square Brackets and will. E.g. \"Distance in [m]\" Default is \"y\" with no unit Should be short PirAtE_MSG_SENDMODE PirAtE_MSG_SENDMODE_AUTO Send automatically each time it can PirAtE_MSG_SENDMODE_MANUEL Flag needs to be set each time it should be send Default is PirAtE_MSG_SENDMODE_AUTO","title":"Add Variables to Send"},{"location":"Pirate-Hook/10-hook-getting-started/#add-variables-to-receive","text":"All Variables that the user wants to be controllable on the website, need to be defined in the Arduino Setup with the following function: byte key = PirAtE_ADD_RECV_VAR ( Data_Name , Global_VariableAddress , PirAtE_MSG_DATATYPE , Default_Value , Max_Value , Min_Value ); The Function uses these arguments: key: byte Returns a ID that can be used for Flag management Data_Name: String Name of the Variable on the Website. E.g. \"Var1\" Should be short Global_VariableAdress: *any Pointer to any supported Datatype PirAtE_MSG_DATATYPE: PirAtE_MSG_DATATYPE Default_Value: any Initial Value Max_Value: any Max Value for the Control Min_Value: any Min Value for the Control","title":"Add Variables to Receive"},{"location":"Pirate-Hook/10-hook-getting-started/#33-send-and-receive","text":"To be able to Receive and Send the registered variables the Functions for Send and Receive need to be performed. They will try to Send and Receive, while trying to not exceed defined maximum Blocktimes, that can be defined. PirAtE_SEND (); PirAtE_RECV (); They need to be used in the Arduino void loop() and can be used multiple time, but this will increase the code size. Directly in the main loop, where it is very often called, is the best way to include it. The other code in the Loop should be nonen Blocking, so try to not use any delay(ms); , this way the sending and receiving happens frequently.","title":"3.3. Send and Receive"},{"location":"Pirate-Hook/10-hook-getting-started/#debug","text":"All Messages need to be Send in the correct format, see Pirate Serial Protocol . For Debug the Pirate Hook provides a Function to send Debug message. It can be used like the Serial.println() . PirAtE_DEBUG ( content ); PirAtE_DEBUG ( content , format ); The Function uses these arguments: content: any format: a format modifier of Serial.println() Keep in Mind that this will fill the send buffer of the Arduino, especially intensive usage of Debug messages. When used before the Send Methode a full Buffer could cause a skip of the sending. When intensive debugging a disabling of the Pirate Communication and using the serial monitor is recommended. For better performance in the final application the Debug Messages can also be turned off .","title":"Debug"},{"location":"Pirate-Hook/10-hook-getting-started/#disable-pirate-protocol","text":"All Message use the Pirate Serial Protocol , this means also all Debug Messages start with an M and end with the Pirate Delimiter. Also all Send Variables get send all the time. To make Debugging in the Serial Monitor of the Arduino IDE easier, all Pirate related communication can be disabled with a Define. All Debug Message will than appear like a basic Serial.println() and the normal Sending gets Disabled. #define PirAtE_COM_OFF The Code size gets reduced dramatically by this, so keep in mind when turning it back on it will turn normal again. This can only be used when not connected to the Pirate Bridge !","title":"Disable Pirate Protocol"},{"location":"Pirate-Hook/10-hook-getting-started/#disable-debug","text":"When this is defined all Debug messages will be deactivated completely. #define PirAtE_DEBUG_DISABLED","title":"Disable Debug"},{"location":"Pirate-Hook/10-hook-getting-started/#strings","text":"Strings have some special properties, that are different from normal vars. The Send and Receive Var can be added with the basic Add methode, but in these cases the size of the String is set to the maximum possible length, which is depending on the Serial buffersize. In case of Sending its defined as PirAtE_DATATYPE_STRING_MAXLENGTH In case of Receiving it is PirAtE_RECEIVE_DATATYPE_STRING_MAXLENGTH This is the char symbol count without the String endsymbole \\0 . Long Strings can Influence the behavior of Send and Receive.","title":"Strings"},{"location":"Pirate-Hook/10-hook-getting-started/#send-string","text":"For adding Strings to the Send-register the following functions need to be used. byte key = PirAtE_ADD_SEND_STRING ( Data_Name , Global_VariableAddress ); byte key = PirAtE_ADD_SEND_STRING ( Data_Name , Global_VariableAddress , PirAtE_MSG_SENDMODE ); byte key = PirAtE_ADD_SEND_STRING ( Data_Name , Global_VariableAddress , PirAtE_MSG_SENDMODE , StringBufferLength ); key: byte Returns a ID that can be used for Flag management Data_Name: String Name of the Variable on the Website. E.g. \"Var1\" Should be short Global_VariableAdress: *any Pointer to any supported Datatype PirAtE_MSG_DATATYPE: PirAtE_MSG_DATATYPE PirAtE_MSG_SENDMODE PirAtE_MSG_SENDMODE_AUTO Send automatically each time it can PirAtE_MSG_SENDMODE_MANUEL Flag needs to be set each time it should be send Default is PirAtE_MSG_SENDMODE_AUTO StringBufferLength: int Needs to be the Size of the allocated String Buffer (including \\0 space) Needs to be Smaller or Equal to PirAtE_DATATYPE_STRING_MAXLENGTH + 1 When a String isn't ended correctly it will be replaced with just a \\0 ! When long strings are used, no Debug messages should be used, because the Buffer could be to full for sending and it will always skip. By Enabling PirAtE_AllowActiveWaitingOnSend and a long enough blocktime it can be fixed, but cycle time will increase.","title":"Send String"},{"location":"Pirate-Hook/10-hook-getting-started/#receive-string","text":"For adding Strings to the Recv-register the following function needs to be used. byte key = PirAtE_ADD_RECV_STRING ( Data_Name , Global_VariableAddress , StringBufferLength ); key: byte Returns a ID that can be used for Flag management Data_Name: String Name of the Variable on the Website. E.g. \"Var1\" Should be short Global_VariableAdress: *any Pointer to any supported Datatype PirAtE_MSG_DATATYPE: PirAtE_MSG_DATATYPE StringBufferLength: int Needs to be the Size of the allocated String Buffer (including \\0 space) Needs to be Smaller or Equal to PirAtE_DATATYPE_STRING_MAXLENGTH + 1 When a String isn't ended correctly it will try to read as much character as it finds and end it with a \\0 ! This means some messages could become a part of the string. When using the Default Add Variable Function, these Parameters are handelt different. Default_Value: any No effect Max_Value: any Limits the Size that can be created on the Pirate Bridge side Min_Value: any No effect It shouldn't be used to prevent unpredictable and unwanted behavior.","title":"Receive String"},{"location":"Pirate-Hook/10-hook-getting-started/#flags","text":"There are two Flags, one for the Send and one for the Receive Variables.","title":"Flags"},{"location":"Pirate-Hook/10-hook-getting-started/#send-flag","text":"This Flag signals the Send function that \"New Data is available for sending\". It is only needed to be set when the PirAtE_MSG_SENDMODE is PirAtE_MSG_SENDMODE_MANUEL of the variable. When set it will send the Data just one Time in the next Send cycle. PirAtE_SET_SEND_FLAG ( key ); key: byte Is the returned ID of the Add Variable to Send Function.","title":"Send Flag"},{"location":"Pirate-Hook/10-hook-getting-started/#receive-flag","text":"With this Flag, the Receive function will signal that \"New Data is available for reading\". The Flag can be Read with the Get-function and needs to be reset with the Reset-Function. byte PirAtE_GET_RECV_FLAG ( key ) PirAtE_RST_RECV_FLAG ( key ); key: byte Is the returned ID of the Add Variable to Receive Function.","title":"Receive Flag"},{"location":"Pirate-Hook/10-hook-getting-started/#more-defines","text":"There are more small Defines for changing the Communication behavior of the Hook.","title":"More Defines"},{"location":"Pirate-Hook/10-hook-getting-started/#com-defines","text":"The Communication can be adjusted with the following Defines, but the modification has to also happen on the Pirate Bridge Side . #define PirAtE_Serial_Baudrate 115200 When changing the Baudrate, make sure it is supported by the Arduino and in case of debugging in Serial Monitor, its supported Baudrates need to be accounted, too.","title":"Com Defines"},{"location":"Pirate-Hook/10-hook-getting-started/#intervall-defines","text":"With this Defines the message speed can be tweaked, what also has an impact on the Resource intensity on the Bridge side . #define PirAtE_SendMSGInterVal_micros 1000ul #define PirAtE_AllowedSendBlockTime_micros 2000ul #define PirAtE_RequestInterVal_micros 1000ul #define PirAtE_AllowedReceiveBlockTime_micros 200ul","title":"Intervall Defines"},{"location":"Pirate-Hook/20-hook-requirements/","text":"Requirements # The Requirements for the Pirate Hook have mostly a relation to the controller projects that they should be used in. This includes time management and memory usage. This and more Requirements for the Implementation are listed below: low memory usage dynamic variables memory global variables memory program code low time usage almost no blocking / active waiting max time of actions can be defined low processing time simple to use just a few functions basic configuration available website generates automatically from code consistent stable, no breaks mostly data lost free predictable behavior self fixing, restart debug via Serial still possible (Serial Terminal)","title":"Requirements"},{"location":"Pirate-Hook/20-hook-requirements/#requirements","text":"The Requirements for the Pirate Hook have mostly a relation to the controller projects that they should be used in. This includes time management and memory usage. This and more Requirements for the Implementation are listed below: low memory usage dynamic variables memory global variables memory program code low time usage almost no blocking / active waiting max time of actions can be defined low processing time simple to use just a few functions basic configuration available website generates automatically from code consistent stable, no breaks mostly data lost free predictable behavior self fixing, restart debug via Serial still possible (Serial Terminal)","title":"Requirements"},{"location":"Pirate-Hook/30-hook-implementation/","text":"Implementation # Warning! The function names have changed over the versions and can be different in old ones. Warning! Current Implementation supports only the normal Serial communication. The low memory and time usage aspect are partly the reason, why many functions are just macros, that get optimized by the compiler. Note: Functions mostly covered in Getting Started ! Note: When in the Implementation the Datatype String is mentioned, than it refers to the Char Array Sting with an \\0 at the end. The String Object would use more memory and can also create holes in the stack, when resizing. Overview of Implementation # Requirement: Simple to use Only 3 needed Stages for the User Start Communication (Setup) Add Variables (Setup) Perform Send & Receive (Main Loop) Default Configuration already in \"PirAtE_Config.h\" Requirement: Time Usage No Active Waiting Maximum Blocktime adjustable Uses Macros for Send and Receive Requirement: Resource Usage Uses Pointer on Variables Mostly optimized with Macros and Defines User functions, macros and defines # PirAtE_START() : Macro # Must be used once in the Setup! Before any other PirAtE Functions. PirAtE_START () Arguments: None Returns: void Activates the Serial Communication and also sends out the Datatype information and Buffersize. This is defined in the Initial steps of Pirate Serial Protocol . When Pirate Communication is Disabled it will skip the Initial steps of the Pirate Serial Protocol , but still start the Serial Port. Datatypes: Defined char Values # All Datatypes that can be used for Receive and Send Variables come from the Pirate Serial Protocol and are listed below with their Define Name. Datatype Defined Name int PirAtE_MSG_DATATYPE_INT unsigned int PirAtE_MSG_DATATYPE_UINT long PirAtE_MSG_DATATYPE_LONG unsigned long PirAtE_MSG_DATATYPE_ULONG float PirAtE_MSG_DATATYPE_FLOAT double PirAtE_MSG_DATATYPE_DOUBLE byte PirAtE_MSG_DATATYPE_BYTE word PirAtE_MSG_DATATYPE_WORD bool PirAtE_MSG_DATATYPE_BOOL char PirAtE_MSG_DATATYPE_CHAR char[] PirAtE_MSG_DATATYPE_STRING PirAtE_MSG_SENDMODE_... : Defined int Values # For the Sending some modes got defined, which configure how the sending should happen. Type Defined Name Description auto PirAtE_MSG_SENDMODE_AUTO Sends every Intervall manuel PirAtE_MSG_SENDMODE_MANUEL Sends only when Flag is set PirAtE_ADD_SEND_VAR() : Macro # Should be used only in the Setup! After PirAtE_START() for each Send Var to Add. The Times used can not exceed the Defined Send Amount . byte key = PirAtE_ADD_SEND_VAR ( Data_Name , Global_VariableAddress , PirAtE_MSG_DATATYPE , PirAtE_Scale , PirAtE_MSG_SENDMODE ); Arguments: Data_Name : String Displayed Name in Graph. Global_VariableAddress : (byte*) Address of Variable. PirAtE_MSG_DATATYPE : PirAtE_MSG_DATATYPE_... Datatype that the Variable uses PirAtE_Scale : String Scale used for the Var, with \"[unit]\" in the String, a Unit can be defined. default: \"y\" PirAtE_MSG_SENDMODE : PirAtE_MSG_SENDMODE_... Mode allows to control sending behavior. default: PirAtE_MSG_SENDMODE_AUTO Returns: key : byte \"Can only be Assigned to a Variable!\" Is overloaded and registrates the variables for the PirAtE_SEND() methode. When Pirate Communication is Disabled it will skip the Initial steps of the Pirate Serial Protocol , but still start the Serial Port. Note: Suggested is it to use programm memory for the Strings in this functions. byte key = PirAtE_ADD_SEND_VAR ( \"Name\" , & ..., PirAtE_MSG_DATATYPE_ ..., \"Y in [unit]\" , PirAtE_MSG_SENDMODE_ ...); PirAtE_SendVar_Amount : Define # Needs to be defined in PirAtE_Config.h! #define PirAtE_SendVar_Amount 5 Defines the Amount of possible Send Variables. Can be Higher than the actual used amount, but than it will use more memory than needed. For amount x, an Array for x byte-Pointer will be defined. Also two byte Arrays that are X/8 Bytes long and get rounded up. One is a Register that holds the Sendmode for each Send variable in one bit. The other one is to hold the Flag that signals, if the data Value needs to be send again. PirAtE_ADD_RECV_VAR() : Macro # Should be used only in the Setup! After PirAtE_START() for each Receive Var to Add. The Times used can not exceed the Defined Send Amount . byte key = PirAtE_ADD_RECV_VAR ( Data_Name , Global_VariableAddress , PirAtE_MSG_DATATYPE , Default_Value , Max_Value , Min_Value ); Arguments: Data_Name : String Displayed Name in the Controls. Global_VariableAddress : (byte*) Address of Variable. PirAtE_MSG_DATATYPE : PirAtE_MSG_DATATYPE_... Datatype that the Variable uses Default_Value: any Initial Value for the Controls. Max_Value: any Max Value for the Control. Min_Value: any Min Value for the Control. Returns: key : byte \"Can only be Assigned to a Variable!\" Is overloaded and registrates the variables for the PirAtE_RECV() methode. Can only be done up to the Defined maximum amount of Receive Messages. When Pirate Communication is Disabled it will skip the Initial steps of the Pirate Serial Protocol , but still start the Serial Port. Note: Suggested is it to use programm memory for the Strings in this functions. byte key = PirAtE_ADD_RECV_VAR ( \"Name\" , & ..., PirAtE_MSG_DATATYPE_ ..., ..., ..., ...); PirAtE_RECVVar_Amount : Define # Needs to be defined in PirAtE_Config.h! #define PirAtE_RecvVar_Amount 5 Defines the Amount of possible Receive Variables. Can be Higher than the actual used amount, but than it will use more memory than needed. For amount x, an Array for x byte-Pointer will be defined. Also one byte Arrays that is X/8 Bytes long and get rounded up. It is a Register that holds the Flag that signals, if the data Value is new. PirAtE_SEND() : Macro # Has to be used in the Main Loop! To get called often as possible! PirAtE_SEND (); Arguments: None Returns: void Performs Sending over the serial connection following the Pirate Serial Protocol . With Defines the Send intervall, blocktime and active wait behavior can be adjusted. Is influenced by the Defines: - PirAtE_SendMSGInterVal_micros - default: 1000ul - PirAtE_AllowedSendBlockTime_micros - default: 200ul - PirAtE_AllowActiveWaitingOnSend - default: false PirAtE_RECV() : Macro # Has to be used in the Main Loop! To get called often as possible! PirAtE_RECV (); Arguments: None Returns: void Performs Receiving over the serial connection following the Pirate Serial Protocol . With Defines the Request intervall and blocktime behavior can be adjusted. Is influenced by the Defines: - PirAtE_RequestInterVal_micros - default: 1000ul - PirAtE_AllowedReceiveBlockTime_micros - default: 200ul PirAtE_COM_OFF # #define PirAtE_COM_OFF PirAtE_DEBUG_DISABLED # #define PirAtE_DEBUG_DISABLED","title":"Implementation"},{"location":"Pirate-Hook/30-hook-implementation/#implementation","text":"Warning! The function names have changed over the versions and can be different in old ones. Warning! Current Implementation supports only the normal Serial communication. The low memory and time usage aspect are partly the reason, why many functions are just macros, that get optimized by the compiler. Note: Functions mostly covered in Getting Started ! Note: When in the Implementation the Datatype String is mentioned, than it refers to the Char Array Sting with an \\0 at the end. The String Object would use more memory and can also create holes in the stack, when resizing.","title":"Implementation"},{"location":"Pirate-Hook/30-hook-implementation/#overview-of-implementation","text":"Requirement: Simple to use Only 3 needed Stages for the User Start Communication (Setup) Add Variables (Setup) Perform Send & Receive (Main Loop) Default Configuration already in \"PirAtE_Config.h\" Requirement: Time Usage No Active Waiting Maximum Blocktime adjustable Uses Macros for Send and Receive Requirement: Resource Usage Uses Pointer on Variables Mostly optimized with Macros and Defines","title":"Overview of Implementation"},{"location":"Pirate-Hook/30-hook-implementation/#user-functions-macros-and-defines","text":"","title":"User functions, macros and defines"},{"location":"Pirate-Hook/30-hook-implementation/#pirate_start--macro","text":"Must be used once in the Setup! Before any other PirAtE Functions. PirAtE_START () Arguments: None Returns: void Activates the Serial Communication and also sends out the Datatype information and Buffersize. This is defined in the Initial steps of Pirate Serial Protocol . When Pirate Communication is Disabled it will skip the Initial steps of the Pirate Serial Protocol , but still start the Serial Port.","title":"PirAtE_START() : Macro"},{"location":"Pirate-Hook/30-hook-implementation/#datatypes-defined-char-values","text":"All Datatypes that can be used for Receive and Send Variables come from the Pirate Serial Protocol and are listed below with their Define Name. Datatype Defined Name int PirAtE_MSG_DATATYPE_INT unsigned int PirAtE_MSG_DATATYPE_UINT long PirAtE_MSG_DATATYPE_LONG unsigned long PirAtE_MSG_DATATYPE_ULONG float PirAtE_MSG_DATATYPE_FLOAT double PirAtE_MSG_DATATYPE_DOUBLE byte PirAtE_MSG_DATATYPE_BYTE word PirAtE_MSG_DATATYPE_WORD bool PirAtE_MSG_DATATYPE_BOOL char PirAtE_MSG_DATATYPE_CHAR char[] PirAtE_MSG_DATATYPE_STRING","title":"Datatypes: Defined char Values"},{"location":"Pirate-Hook/30-hook-implementation/#pirate_msg_sendmode_--defined-int-values","text":"For the Sending some modes got defined, which configure how the sending should happen. Type Defined Name Description auto PirAtE_MSG_SENDMODE_AUTO Sends every Intervall manuel PirAtE_MSG_SENDMODE_MANUEL Sends only when Flag is set","title":"PirAtE_MSG_SENDMODE_... : Defined int Values"},{"location":"Pirate-Hook/30-hook-implementation/#pirate_add_send_var--macro","text":"Should be used only in the Setup! After PirAtE_START() for each Send Var to Add. The Times used can not exceed the Defined Send Amount . byte key = PirAtE_ADD_SEND_VAR ( Data_Name , Global_VariableAddress , PirAtE_MSG_DATATYPE , PirAtE_Scale , PirAtE_MSG_SENDMODE ); Arguments: Data_Name : String Displayed Name in Graph. Global_VariableAddress : (byte*) Address of Variable. PirAtE_MSG_DATATYPE : PirAtE_MSG_DATATYPE_... Datatype that the Variable uses PirAtE_Scale : String Scale used for the Var, with \"[unit]\" in the String, a Unit can be defined. default: \"y\" PirAtE_MSG_SENDMODE : PirAtE_MSG_SENDMODE_... Mode allows to control sending behavior. default: PirAtE_MSG_SENDMODE_AUTO Returns: key : byte \"Can only be Assigned to a Variable!\" Is overloaded and registrates the variables for the PirAtE_SEND() methode. When Pirate Communication is Disabled it will skip the Initial steps of the Pirate Serial Protocol , but still start the Serial Port. Note: Suggested is it to use programm memory for the Strings in this functions. byte key = PirAtE_ADD_SEND_VAR ( \"Name\" , & ..., PirAtE_MSG_DATATYPE_ ..., \"Y in [unit]\" , PirAtE_MSG_SENDMODE_ ...);","title":"PirAtE_ADD_SEND_VAR() : Macro"},{"location":"Pirate-Hook/30-hook-implementation/#pirate_sendvar_amount--define","text":"Needs to be defined in PirAtE_Config.h! #define PirAtE_SendVar_Amount 5 Defines the Amount of possible Send Variables. Can be Higher than the actual used amount, but than it will use more memory than needed. For amount x, an Array for x byte-Pointer will be defined. Also two byte Arrays that are X/8 Bytes long and get rounded up. One is a Register that holds the Sendmode for each Send variable in one bit. The other one is to hold the Flag that signals, if the data Value needs to be send again.","title":"PirAtE_SendVar_Amount : Define"},{"location":"Pirate-Hook/30-hook-implementation/#pirate_add_recv_var--macro","text":"Should be used only in the Setup! After PirAtE_START() for each Receive Var to Add. The Times used can not exceed the Defined Send Amount . byte key = PirAtE_ADD_RECV_VAR ( Data_Name , Global_VariableAddress , PirAtE_MSG_DATATYPE , Default_Value , Max_Value , Min_Value ); Arguments: Data_Name : String Displayed Name in the Controls. Global_VariableAddress : (byte*) Address of Variable. PirAtE_MSG_DATATYPE : PirAtE_MSG_DATATYPE_... Datatype that the Variable uses Default_Value: any Initial Value for the Controls. Max_Value: any Max Value for the Control. Min_Value: any Min Value for the Control. Returns: key : byte \"Can only be Assigned to a Variable!\" Is overloaded and registrates the variables for the PirAtE_RECV() methode. Can only be done up to the Defined maximum amount of Receive Messages. When Pirate Communication is Disabled it will skip the Initial steps of the Pirate Serial Protocol , but still start the Serial Port. Note: Suggested is it to use programm memory for the Strings in this functions. byte key = PirAtE_ADD_RECV_VAR ( \"Name\" , & ..., PirAtE_MSG_DATATYPE_ ..., ..., ..., ...);","title":"PirAtE_ADD_RECV_VAR() : Macro"},{"location":"Pirate-Hook/30-hook-implementation/#pirate_recvvar_amount--define","text":"Needs to be defined in PirAtE_Config.h! #define PirAtE_RecvVar_Amount 5 Defines the Amount of possible Receive Variables. Can be Higher than the actual used amount, but than it will use more memory than needed. For amount x, an Array for x byte-Pointer will be defined. Also one byte Arrays that is X/8 Bytes long and get rounded up. It is a Register that holds the Flag that signals, if the data Value is new.","title":"PirAtE_RECVVar_Amount : Define"},{"location":"Pirate-Hook/30-hook-implementation/#pirate_send--macro","text":"Has to be used in the Main Loop! To get called often as possible! PirAtE_SEND (); Arguments: None Returns: void Performs Sending over the serial connection following the Pirate Serial Protocol . With Defines the Send intervall, blocktime and active wait behavior can be adjusted. Is influenced by the Defines: - PirAtE_SendMSGInterVal_micros - default: 1000ul - PirAtE_AllowedSendBlockTime_micros - default: 200ul - PirAtE_AllowActiveWaitingOnSend - default: false","title":"PirAtE_SEND() : Macro"},{"location":"Pirate-Hook/30-hook-implementation/#pirate_recv--macro","text":"Has to be used in the Main Loop! To get called often as possible! PirAtE_RECV (); Arguments: None Returns: void Performs Receiving over the serial connection following the Pirate Serial Protocol . With Defines the Request intervall and blocktime behavior can be adjusted. Is influenced by the Defines: - PirAtE_RequestInterVal_micros - default: 1000ul - PirAtE_AllowedReceiveBlockTime_micros - default: 200ul","title":"PirAtE_RECV() : Macro"},{"location":"Pirate-Hook/30-hook-implementation/#pirate_com_off","text":"#define PirAtE_COM_OFF","title":"PirAtE_COM_OFF"},{"location":"Pirate-Hook/30-hook-implementation/#pirate_debug_disabled","text":"#define PirAtE_DEBUG_DISABLED","title":"PirAtE_DEBUG_DISABLED"},{"location":"Pirate-Hook/40-hook-validation/","text":"Validation # The Test Files can be found in the Repository Pirate_arduino_Library.ino # Was the Implementation Environment with current feature tests. test.ino # Used to Test first Implementation and used for Echo test with Bridge testbandwidth.ino # First test to search for bottlenecks and check transmitting rate. simulatedPID.ino # For Demonstration a simulation of a controller Project was created. Future Steps # Tests with other Arduinos . Test with other com types serial RX TX pins SPI I2C Adding data security/checks parity Pirate Serial Protocol improvement optimize Overhead More tests analyzing Speed durability Test Compare Pirate Serial Protocol with xcp (Extended Calibration Protocol) Was the creation unnecessary?","title":"Validation"},{"location":"Pirate-Hook/40-hook-validation/#validation","text":"The Test Files can be found in the Repository","title":"Validation"},{"location":"Pirate-Hook/40-hook-validation/#pirate_arduino_libraryino","text":"Was the Implementation Environment with current feature tests.","title":"Pirate_arduino_Library.ino"},{"location":"Pirate-Hook/40-hook-validation/#testino","text":"Used to Test first Implementation and used for Echo test with Bridge","title":"test.ino"},{"location":"Pirate-Hook/40-hook-validation/#testbandwidthino","text":"First test to search for bottlenecks and check transmitting rate.","title":"testbandwidth.ino"},{"location":"Pirate-Hook/40-hook-validation/#simulatedpidino","text":"For Demonstration a simulation of a controller Project was created.","title":"simulatedPID.ino"},{"location":"Pirate-Hook/40-hook-validation/#future-steps","text":"Tests with other Arduinos . Test with other com types serial RX TX pins SPI I2C Adding data security/checks parity Pirate Serial Protocol improvement optimize Overhead More tests analyzing Speed durability Test Compare Pirate Serial Protocol with xcp (Extended Calibration Protocol) Was the creation unnecessary?","title":"Future Steps"},{"location":"Pirate-Hook/code-example/","text":"Code Example # Define Amount in Pirate_Config.h # //Modify Max amount of Send and Receive Variables #define PirAtE_SendVar_Amount 2 #define PirAtE_RecvVar_Amount 2 Global Section in .ino # //Include Pirate #include \"PirAtE.h\" //Create some Global Variables float actualValue = 0 ; int offset = 0 ; float setpoint = 0 ; Setup in .ino # void setup () { ... //Start Pirate PirAtE_START (); //Add 'actualValue' to Send-register PirAtE_ADD_SEND_VAR ( \"Actual Value\" , & actualValue , PirAtE_DATATYPE_FLOAT ); //Add 'offset' to Receive-register with control limitation PirAtE_ADD_RECV_VAR ( \"Offset\" , & offset , PirAtE_DATATYPE_INT , offset , 200 , -200 ); //Add 'setpoint' to Send-register PirAtE_ADD_SEND_VAR ( \"Setpoint\" , & setpoint , PirAtE_DATATYPE_FLOAT ); //Add 'setpoint' to Receive-register with control limitation PirAtE_ADD_RECV_VAR ( \"Setpoint\" , & setpoint , PirAtE_DATATYPE_FLOAT , 0 , 100 , 0.01 ); ... } Loop in .ino # void loop () { ... //Perform Send and Receive in main Loop PirAtE_SEND (); PirAtE_RECV (); ... } Result # From the Code example above, on the Website will be created: one Graph with (only one Scale): Actual Setpoint two Control slider for: offset (-200 to 200) setpoint (0.01 to 100)","title":"Code Example"},{"location":"Pirate-Hook/code-example/#code-example","text":"","title":"Code Example"},{"location":"Pirate-Hook/code-example/#define-amount-in-pirate_configh","text":"//Modify Max amount of Send and Receive Variables #define PirAtE_SendVar_Amount 2 #define PirAtE_RecvVar_Amount 2","title":"Define Amount in Pirate_Config.h"},{"location":"Pirate-Hook/code-example/#global-section-in-ino","text":"//Include Pirate #include \"PirAtE.h\" //Create some Global Variables float actualValue = 0 ; int offset = 0 ; float setpoint = 0 ;","title":"Global Section in .ino"},{"location":"Pirate-Hook/code-example/#setup-in-ino","text":"void setup () { ... //Start Pirate PirAtE_START (); //Add 'actualValue' to Send-register PirAtE_ADD_SEND_VAR ( \"Actual Value\" , & actualValue , PirAtE_DATATYPE_FLOAT ); //Add 'offset' to Receive-register with control limitation PirAtE_ADD_RECV_VAR ( \"Offset\" , & offset , PirAtE_DATATYPE_INT , offset , 200 , -200 ); //Add 'setpoint' to Send-register PirAtE_ADD_SEND_VAR ( \"Setpoint\" , & setpoint , PirAtE_DATATYPE_FLOAT ); //Add 'setpoint' to Receive-register with control limitation PirAtE_ADD_RECV_VAR ( \"Setpoint\" , & setpoint , PirAtE_DATATYPE_FLOAT , 0 , 100 , 0.01 ); ... }","title":"Setup in .ino"},{"location":"Pirate-Hook/code-example/#loop-in-ino","text":"void loop () { ... //Perform Send and Receive in main Loop PirAtE_SEND (); PirAtE_RECV (); ... }","title":"Loop in .ino"},{"location":"Pirate-Hook/code-example/#result","text":"From the Code example above, on the Website will be created: one Graph with (only one Scale): Actual Setpoint two Control slider for: offset (-200 to 200) setpoint (0.01 to 100)","title":"Result"},{"location":"Pirate-Hook/pirate-serial-protocol/","text":"Pirate Serial Protocol # The Pirate Serial Protocol is used by the Pirate Hook and the Pirate Bridge to transmit data between them. It was for the usage with an Arduino and a Raspberry Pi generated and uses the serial connection. The protocol makes the Arduino to a Master and the the Raspberry Pi to a Slave of the communication. The Master side of this Communication is implemented by the Pirate Hook and is limited by the Arduino performance. It needed to be less intensive in computing time and bandwidth. Also it shouldn't block the loop of the Arduino to much or other needed calculations and action on the single processed controller could be delayed. For this the Master side of the Protocol will use the data in its byte format directly from the Memory and will not need to perform any parsings. This also shrinks the amount of bytes to send in the Serial Communication and generates fixed size Messages. Also it will never need to wait on the Slave, it will send asynchron Data or request some Data, which also will arrive asynchron. The reason for the Request is to stop an overflow in the input buffer of the Master. The Slave in this case will be the Pirate Bridge , that will have to read all incoming data and wait for delimiter and messsagetype symbols from the Master. That shouldn't be a problem for this side, because we expect that it would be a Raspberry Pi or something equal or better. It should own an OS to manage tasks, so that blocking couldn't occurs. With the multi core System and high Clock frequency ( Arduino Uno 16MHz) the parsing and handeling of the data on event base shouldn't be a problem. With a virtual buffersize of 4KB an overflow shouldn't happen, too. To allow different Arduino Boards as Master, even if the byte size of some datatypes are different, the Master sends at the start the byte size of each datatype and its own Buffersize. This way the parser in the Slave can modify its data the way it needs to be. To make the Website Pirate Flag as dynamic as possible and to reduce the effort of creating one, the Master also sends information about each generated Send and Receive variable. This way the website generates from this data directly a basic layout with all Components. The informations contain Name, Type and some more parameter that will be listed in a section below. All Symbols used in the Protocol are based on ASCII ( http://www.asciitable.com/ ) values and are only one character long and Strings are only char arrays with an '\\0' at the end. ID's of Messages have an offset of '0x30', what represents a '0' in ASCII. This is to make the first 10 Messages better readable in the Terminal. When something refers to Value in \"byteformat\", than it means that the value of any Datatype is split in bytes that are order in LSB (least significant Byte first). Strings are unaffected by this. Master to Slave # All Messages from the Master to the Slave End with a Delimiter, so that the Slave can easy separate the different messages. 0xff, 'P', 'i', 'r', 'A', 't', 'E', '\\n' The length of the Delimiter is chosen to never get mixups with data. The Newline and the choice of readable symbol's was chosen to allow reading of the data Stream in Serial Terminal from the Arduino IDE. Data containing messages get signed with a Datatype Symbol, these Symbols are listed in the table below. Datatype Symbol int I unsigned int U long L unsigned long u float F double D byte B word W bool b char C char[] S The Master to Slave Communication can be separated in 3 different Categories - Initial Informations - Sending of Informations - Requesting of Informations Initial Communication # To allow the Website auto generation and inform the Slave, what data can be Received or Send and what bytesize is used for the different Message Datatypes the Master has to send this informations at the start. Synced Start To Sync the Communications and to ignore all Data send before the Communication starts with a Start Sequence: 0xee, 'P', 'i', 'r', 'A', 't', 'E', '\\n' It has no Delimiter at the end Datatypes info 'P' To inform the Slave about the Bytesize of the different Datatypes an information about each Datatype and its size gets send at the start. This Message starts with a 'P' and contains each Message Datatype Symbol followed with its bytesize as number. All the Types are separated by a Separator '$'. Send Message info 'T' For the Website generation a list of all incoming data is needed. For this Reason an information of all Send messages need to be send at the start. This type of Message is signed with an 'T' and gets repeated for each Send Message index. The content of this Message is ID (with Offset ), Name, Datatype and Scale separated by a Separator '$': T<ID>$<Name>$<Type>$<Scale> For Example: T0\\$X1\\0\\$I\\$Y Is the Information about the Send Message with ID = 0 that has the Name = X1, Datatype = Int and gets displayed in the Scale 'Y'. Receive Message info 't' All Values that can be controlled by the Website need also be listed. This information get also be send at the start and is signed with a 't'. It gets repeated for each Message ID The content of this Message is ID (with Offset ), Name, Datatype , DefaultValue, MaxValue and MinValue separated by a Separator '$': t<ID>$<Name>$<Type>$<Default>$<Max>$<Min> For Example: t0\\$X1\\0\\$I\\$0$100$-100 Is the Information about the Receive Message with ID = 0 that has the Name = X1, Datatype = Int, that starts with a default value = 0 and can be set to values between -100 and 100. In case of Datatype String the Max Value is the max length of the String without the '\\0'. Sending of Informations # All Informations that get send to the Slave start with a Datatype Symbol followed by the Message ID (with Offset ) and the Datavalue in raw Bytes : <Type><ID><ValueAsBytes> For Example: C0A A 'C' Char Message that is for Data with the Index = 0 contains the Value 'A'. Requesting of Informations # When the Master can receive new Informations and no Data is available in the Buffer, than the Master can Request new Data by Sending out an Request. This is signed by an 'R' and contains no other informations. R It should be only send after all Received Data is read and no NoData from the Slave was received. After an Intervall of not receiving any Data or NoData the Master can request again to keep the Communication running. Slave to Master # Slave can only Answer on the Master Request , but the Master has to restart the Communication, when the Serial Connection is established and send all the Initial informations again. On the Request the Slave can answer with a Data Transfer or a No Data. Data Transfer # When a Request is received the Slave can send Data till the buffer size is reached or end it with a NoData . The Sending of multiple Values for one Message Index in one Message shouldn't be done. The Values could get ignored or could slowly be readout and cause unpredictable changes. All Data that gets transmitted has to start with the Message ID followed by the Value in Byteformat and bytesize that got defined in the start. <ID><ValueAsBytes> For Example: 00 A Message for the Data with Index = 0 and it contains an one Byte long data with the value 0x30. No Data # When on a Request no Data available is, the Slave can send a \"No Data\" '0x29' to the Master, to inform it to not ask for more Data till the next intervall. 0x29 0x29 is used because the Indexes start with the Offset 0x30.","title":"Pirate Serial Protocol"},{"location":"Pirate-Hook/pirate-serial-protocol/#pirate-serial-protocol","text":"The Pirate Serial Protocol is used by the Pirate Hook and the Pirate Bridge to transmit data between them. It was for the usage with an Arduino and a Raspberry Pi generated and uses the serial connection. The protocol makes the Arduino to a Master and the the Raspberry Pi to a Slave of the communication. The Master side of this Communication is implemented by the Pirate Hook and is limited by the Arduino performance. It needed to be less intensive in computing time and bandwidth. Also it shouldn't block the loop of the Arduino to much or other needed calculations and action on the single processed controller could be delayed. For this the Master side of the Protocol will use the data in its byte format directly from the Memory and will not need to perform any parsings. This also shrinks the amount of bytes to send in the Serial Communication and generates fixed size Messages. Also it will never need to wait on the Slave, it will send asynchron Data or request some Data, which also will arrive asynchron. The reason for the Request is to stop an overflow in the input buffer of the Master. The Slave in this case will be the Pirate Bridge , that will have to read all incoming data and wait for delimiter and messsagetype symbols from the Master. That shouldn't be a problem for this side, because we expect that it would be a Raspberry Pi or something equal or better. It should own an OS to manage tasks, so that blocking couldn't occurs. With the multi core System and high Clock frequency ( Arduino Uno 16MHz) the parsing and handeling of the data on event base shouldn't be a problem. With a virtual buffersize of 4KB an overflow shouldn't happen, too. To allow different Arduino Boards as Master, even if the byte size of some datatypes are different, the Master sends at the start the byte size of each datatype and its own Buffersize. This way the parser in the Slave can modify its data the way it needs to be. To make the Website Pirate Flag as dynamic as possible and to reduce the effort of creating one, the Master also sends information about each generated Send and Receive variable. This way the website generates from this data directly a basic layout with all Components. The informations contain Name, Type and some more parameter that will be listed in a section below. All Symbols used in the Protocol are based on ASCII ( http://www.asciitable.com/ ) values and are only one character long and Strings are only char arrays with an '\\0' at the end. ID's of Messages have an offset of '0x30', what represents a '0' in ASCII. This is to make the first 10 Messages better readable in the Terminal. When something refers to Value in \"byteformat\", than it means that the value of any Datatype is split in bytes that are order in LSB (least significant Byte first). Strings are unaffected by this.","title":"Pirate Serial Protocol"},{"location":"Pirate-Hook/pirate-serial-protocol/#master-to-slave","text":"All Messages from the Master to the Slave End with a Delimiter, so that the Slave can easy separate the different messages. 0xff, 'P', 'i', 'r', 'A', 't', 'E', '\\n' The length of the Delimiter is chosen to never get mixups with data. The Newline and the choice of readable symbol's was chosen to allow reading of the data Stream in Serial Terminal from the Arduino IDE. Data containing messages get signed with a Datatype Symbol, these Symbols are listed in the table below. Datatype Symbol int I unsigned int U long L unsigned long u float F double D byte B word W bool b char C char[] S The Master to Slave Communication can be separated in 3 different Categories - Initial Informations - Sending of Informations - Requesting of Informations","title":"Master to Slave"},{"location":"Pirate-Hook/pirate-serial-protocol/#initial-communication","text":"To allow the Website auto generation and inform the Slave, what data can be Received or Send and what bytesize is used for the different Message Datatypes the Master has to send this informations at the start. Synced Start To Sync the Communications and to ignore all Data send before the Communication starts with a Start Sequence: 0xee, 'P', 'i', 'r', 'A', 't', 'E', '\\n' It has no Delimiter at the end Datatypes info 'P' To inform the Slave about the Bytesize of the different Datatypes an information about each Datatype and its size gets send at the start. This Message starts with a 'P' and contains each Message Datatype Symbol followed with its bytesize as number. All the Types are separated by a Separator '$'. Send Message info 'T' For the Website generation a list of all incoming data is needed. For this Reason an information of all Send messages need to be send at the start. This type of Message is signed with an 'T' and gets repeated for each Send Message index. The content of this Message is ID (with Offset ), Name, Datatype and Scale separated by a Separator '$': T<ID>$<Name>$<Type>$<Scale> For Example: T0\\$X1\\0\\$I\\$Y Is the Information about the Send Message with ID = 0 that has the Name = X1, Datatype = Int and gets displayed in the Scale 'Y'. Receive Message info 't' All Values that can be controlled by the Website need also be listed. This information get also be send at the start and is signed with a 't'. It gets repeated for each Message ID The content of this Message is ID (with Offset ), Name, Datatype , DefaultValue, MaxValue and MinValue separated by a Separator '$': t<ID>$<Name>$<Type>$<Default>$<Max>$<Min> For Example: t0\\$X1\\0\\$I\\$0$100$-100 Is the Information about the Receive Message with ID = 0 that has the Name = X1, Datatype = Int, that starts with a default value = 0 and can be set to values between -100 and 100. In case of Datatype String the Max Value is the max length of the String without the '\\0'.","title":"Initial Communication"},{"location":"Pirate-Hook/pirate-serial-protocol/#sending-of-informations","text":"All Informations that get send to the Slave start with a Datatype Symbol followed by the Message ID (with Offset ) and the Datavalue in raw Bytes : <Type><ID><ValueAsBytes> For Example: C0A A 'C' Char Message that is for Data with the Index = 0 contains the Value 'A'.","title":"Sending of Informations"},{"location":"Pirate-Hook/pirate-serial-protocol/#requesting-of-informations","text":"When the Master can receive new Informations and no Data is available in the Buffer, than the Master can Request new Data by Sending out an Request. This is signed by an 'R' and contains no other informations. R It should be only send after all Received Data is read and no NoData from the Slave was received. After an Intervall of not receiving any Data or NoData the Master can request again to keep the Communication running.","title":"Requesting of Informations "},{"location":"Pirate-Hook/pirate-serial-protocol/#slave-to-master","text":"Slave can only Answer on the Master Request , but the Master has to restart the Communication, when the Serial Connection is established and send all the Initial informations again. On the Request the Slave can answer with a Data Transfer or a No Data.","title":"Slave to Master"},{"location":"Pirate-Hook/pirate-serial-protocol/#data-transfer","text":"When a Request is received the Slave can send Data till the buffer size is reached or end it with a NoData . The Sending of multiple Values for one Message Index in one Message shouldn't be done. The Values could get ignored or could slowly be readout and cause unpredictable changes. All Data that gets transmitted has to start with the Message ID followed by the Value in Byteformat and bytesize that got defined in the start. <ID><ValueAsBytes> For Example: 00 A Message for the Data with Index = 0 and it contains an one Byte long data with the value 0x30.","title":"Data Transfer"},{"location":"Pirate-Hook/pirate-serial-protocol/#no-data","text":"When on a Request no Data available is, the Slave can send a \"No Data\" '0x29' to the Master, to inform it to not ask for more Data till the next intervall. 0x29 0x29 is used because the Indexes start with the Offset 0x30.","title":"No Data "},{"location":"Pirate-Hook/Theory/arduino/","text":"Arduino # Arduino Hardware Information and Limitations can be found here. Serial USB (RX/TX) # Serial buffer Size: 64 byte Source: https://www.arduino.cc/reference/en/language/functions/communication/serial/available/ UART Protocol Default Setting is \"SERIAL_8N1\" No Parity 1 Stop Bit Source: https://www.arduino.cc/reference/en/language/functions/communication/serial/begin/ Baudrates (Some Standards) 9600 ... 115200 Source: https://de.wikipedia.org/wiki/Universal_Asynchronous_Receiver_Transmitter Auto Restart on establishing Boards Specific # Some parameter are different from Board to Board. To keep the Pirate Hook optimal designed they ahd to be analysed. In further development, aspects like SPI and I2C need to be inspected to, currently only the basic Serial USB UART Communication is supported. Uno # Source: https://store.arduino.cc/arduino-uno-rev3 Prozessor 16 MHz 32KB Flash Memory program storage 2 KB SRAM dynamic storage for global variables Serial Pin 0(RX), 1(TX) = (USB) Nano # Source: https://store.arduino.cc/arduino-nano-every Prozessor 16 MHz 48KB Flash Memory program storage 6KB SRAM dynamic storage for global variables Serial Pin 0(RX), 1(TX) = (USB) Mega # Source: https://store.arduino.cc/arduino-mega-2560-rev3 Prozessor 16 MHz 256 KB Flash Memory program storage 8 KB SRAM dynamic storage for global variables Serial Pin 4 UARTs Serial buffer size 64 byte Micro # Source: https://store.arduino.cc/arduino-micro-without-headers Prozessor 16 MHz 32KB Flash Memory program storage 2.5 KB SRAM dynamic storage for global variables Serial Pin 0(RX), 1(TX) + (USB)","title":"Arduino"},{"location":"Pirate-Hook/Theory/arduino/#arduino","text":"Arduino Hardware Information and Limitations can be found here.","title":"Arduino"},{"location":"Pirate-Hook/Theory/arduino/#serial-usb-rxtx","text":"Serial buffer Size: 64 byte Source: https://www.arduino.cc/reference/en/language/functions/communication/serial/available/ UART Protocol Default Setting is \"SERIAL_8N1\" No Parity 1 Stop Bit Source: https://www.arduino.cc/reference/en/language/functions/communication/serial/begin/ Baudrates (Some Standards) 9600 ... 115200 Source: https://de.wikipedia.org/wiki/Universal_Asynchronous_Receiver_Transmitter Auto Restart on establishing","title":"Serial USB (RX/TX)"},{"location":"Pirate-Hook/Theory/arduino/#boards-specific","text":"Some parameter are different from Board to Board. To keep the Pirate Hook optimal designed they ahd to be analysed. In further development, aspects like SPI and I2C need to be inspected to, currently only the basic Serial USB UART Communication is supported.","title":"Boards Specific"},{"location":"Pirate-Hook/Theory/arduino/#uno","text":"Source: https://store.arduino.cc/arduino-uno-rev3 Prozessor 16 MHz 32KB Flash Memory program storage 2 KB SRAM dynamic storage for global variables Serial Pin 0(RX), 1(TX) = (USB)","title":"Uno"},{"location":"Pirate-Hook/Theory/arduino/#nano","text":"Source: https://store.arduino.cc/arduino-nano-every Prozessor 16 MHz 48KB Flash Memory program storage 6KB SRAM dynamic storage for global variables Serial Pin 0(RX), 1(TX) = (USB)","title":"Nano"},{"location":"Pirate-Hook/Theory/arduino/#mega","text":"Source: https://store.arduino.cc/arduino-mega-2560-rev3 Prozessor 16 MHz 256 KB Flash Memory program storage 8 KB SRAM dynamic storage for global variables Serial Pin 4 UARTs Serial buffer size 64 byte","title":"Mega"},{"location":"Pirate-Hook/Theory/arduino/#micro","text":"Source: https://store.arduino.cc/arduino-micro-without-headers Prozessor 16 MHz 32KB Flash Memory program storage 2.5 KB SRAM dynamic storage for global variables Serial Pin 0(RX), 1(TX) + (USB)","title":"Micro"},{"location":"Pirate-Map/00-map/","text":"Overview Pirate Map # The Map is the umbrella term for the signaling and finding of a secure route to the project. Getting Started Requirements # A reverse proxy to unify the endpoints of the pirate module. ensuring secure connection via HTTPS This necessitates a domain, DNS and certificate. A method to point users to the possible projects and route the queries above the reverse proxies of the individual moduls. Requirements Implementation # For the reverse proxy, needed to unify the endpoints, a server implementation called caddy.md is used. It takes all requests to the Bridge, Flag and the Spyglass and directs them to the correct components. It also provides a secure HTTP S connection for all clients. Further details on Implementation Validation and Future Steps # In this section the requirements are compared with the current state of the project and future steps outlined. Validation","title":"Overview Pirate Map"},{"location":"Pirate-Map/00-map/#overview-pirate-map","text":"The Map is the umbrella term for the signaling and finding of a secure route to the project. Getting Started","title":"Overview Pirate Map"},{"location":"Pirate-Map/00-map/#requirements","text":"A reverse proxy to unify the endpoints of the pirate module. ensuring secure connection via HTTPS This necessitates a domain, DNS and certificate. A method to point users to the possible projects and route the queries above the reverse proxies of the individual moduls. Requirements","title":"Requirements"},{"location":"Pirate-Map/00-map/#implementation","text":"For the reverse proxy, needed to unify the endpoints, a server implementation called caddy.md is used. It takes all requests to the Bridge, Flag and the Spyglass and directs them to the correct components. It also provides a secure HTTP S connection for all clients. Further details on Implementation","title":"Implementation"},{"location":"Pirate-Map/00-map/#validation-and-future-steps","text":"In this section the requirements are compared with the current state of the project and future steps outlined. Validation","title":"Validation and Future Steps"},{"location":"Pirate-Map/10-map-getting-started/","text":"Getting Started # Not all steps are transferable so it is assumed that a domain is available and Let's Encrypt or a certificate is available. Get Caddy # Download it either via: https://caddyserver.com/download https://caddyserver.com/docs/download or directly from Github via: curl -OL https://github.com/caddyserver/caddy/releases/download/v2.2.0/caddy_2.2.0_linux_armv7.tar.gz Unzip the directory with for instance: tag -xz caddy_2.2.0_linux_armv7.tar.gz and move / rename the caddy executable to a suitable location. Configure Caddy # There create a file called \"caddyfile\" without an extension and fill it with the following content: { admin :34567 # expose admin port } theuseddomain.ending # ! INSERT correct domain under which to serve reverse_proxy /* localhost:3000 # Website reverse_proxy /getconfig raspberrypi:9876 # Pirate-Bridge reverse_proxy /ctrl raspberrypi:9876 # Pirate-Bridge reverse_proxy /janus* raspberrypi:8088 # Pirate-Spyglass reverse_proxy /stream { # Pirate-Bridge flush_interval -1 to raspberrypi:9876 } # if specific certs are used otherwise delete the tls line and ensure that the ports 80 and 443 are forwarded to the caddy server so that it can enable HTTPS/TLS via Let's Encrypt tls \"<path_to_cert>.crt\" \"<path_to_public_key>.key\" # enable tls Start Caddy # If the Caddy executable is in the same folder as the caddy file it can now be started with: caddy run it might be necessary to specify further ./caddy run -f ./caddyfile If you want to run caddy detached replace \"run\" with \"start\".","title":"Getting Started"},{"location":"Pirate-Map/10-map-getting-started/#getting-started","text":"Not all steps are transferable so it is assumed that a domain is available and Let's Encrypt or a certificate is available.","title":"Getting Started"},{"location":"Pirate-Map/10-map-getting-started/#get-caddy","text":"Download it either via: https://caddyserver.com/download https://caddyserver.com/docs/download or directly from Github via: curl -OL https://github.com/caddyserver/caddy/releases/download/v2.2.0/caddy_2.2.0_linux_armv7.tar.gz Unzip the directory with for instance: tag -xz caddy_2.2.0_linux_armv7.tar.gz and move / rename the caddy executable to a suitable location.","title":"Get Caddy"},{"location":"Pirate-Map/10-map-getting-started/#configure-caddy","text":"There create a file called \"caddyfile\" without an extension and fill it with the following content: { admin :34567 # expose admin port } theuseddomain.ending # ! INSERT correct domain under which to serve reverse_proxy /* localhost:3000 # Website reverse_proxy /getconfig raspberrypi:9876 # Pirate-Bridge reverse_proxy /ctrl raspberrypi:9876 # Pirate-Bridge reverse_proxy /janus* raspberrypi:8088 # Pirate-Spyglass reverse_proxy /stream { # Pirate-Bridge flush_interval -1 to raspberrypi:9876 } # if specific certs are used otherwise delete the tls line and ensure that the ports 80 and 443 are forwarded to the caddy server so that it can enable HTTPS/TLS via Let's Encrypt tls \"<path_to_cert>.crt\" \"<path_to_public_key>.key\" # enable tls","title":"Configure Caddy"},{"location":"Pirate-Map/10-map-getting-started/#start-caddy","text":"If the Caddy executable is in the same folder as the caddy file it can now be started with: caddy run it might be necessary to specify further ./caddy run -f ./caddyfile If you want to run caddy detached replace \"run\" with \"start\".","title":"Start Caddy"},{"location":"Pirate-Map/20-map-requirements/","text":"Requirements # The Bridge component has a set of functional and non functional Requirements. The following requirements are derived from the accepted overarching requirements approved by the customer. Functional Requirements # Create an Unified Endpoint # The client should be able to access all functionality over HTTPS. This includes: Get Bridge endpoints Get videostream from the Spyglass Enable routing to different Projects # The routing solution should be able to support multiple projects which can be visited independently from each other. Advertise different Project in a summary Site # The available Projects should be aggregated in a single source. Non-Functional Requirements # The solution needs to be robust and run for at least 3 hours und continuous load. The solution needs to enable 24/7 availability. The latency should not be significantly increased by the routing. A single project must be implemented.","title":"Requirements"},{"location":"Pirate-Map/20-map-requirements/#requirements","text":"The Bridge component has a set of functional and non functional Requirements. The following requirements are derived from the accepted overarching requirements approved by the customer.","title":"Requirements"},{"location":"Pirate-Map/20-map-requirements/#functional-requirements","text":"","title":"Functional Requirements"},{"location":"Pirate-Map/20-map-requirements/#create-an-unified-endpoint","text":"The client should be able to access all functionality over HTTPS. This includes: Get Bridge endpoints Get videostream from the Spyglass","title":"Create an Unified Endpoint"},{"location":"Pirate-Map/20-map-requirements/#enable-routing-to-different-projects","text":"The routing solution should be able to support multiple projects which can be visited independently from each other.","title":"Enable routing to different Projects"},{"location":"Pirate-Map/20-map-requirements/#advertise-different-project-in-a-summary-site","text":"The available Projects should be aggregated in a single source.","title":"Advertise different Project in a summary Site"},{"location":"Pirate-Map/20-map-requirements/#non-functional-requirements","text":"The solution needs to be robust and run for at least 3 hours und continuous load. The solution needs to enable 24/7 availability. The latency should not be significantly increased by the routing. A single project must be implemented.","title":"Non-Functional Requirements"},{"location":"Pirate-Map/30-map-implementation/","text":"Implementation # This is currently a small component, because only one project is supported and the project is not yet integrated in the targeted network. In its current form only a reverse proxy under a temporary domain is set up, enabling HTTPS. Because it is used on a residential connection Dynamic DNS is set up on the Router. Domain # The domain is currently bought from namecheap . Dyn-DNS # The Dynamic DNS is provided by a \"Fritz Box\" router set up to communicate with the namecheap service. It periodically updates the current IP-Adress of the residential connection. Certificates # Even tough namecheap provides certificates it is easier to use the automatic certification via Let's Encrypt . Reverse Proxy # The used reverse proxy is a caddy server. It enables automatic certificates via Let's Encrypt. It is written in the programming language Go. This has the benefit, that Go programs are mostly compiled to a single executable, making the deployment very easy. The caddy server also uses a single configuration file. The configuration used for the reverse proxies can be viewed in the setup section The reverse proxy supports the following routes. A reverse proxy is used to create a unified front and as a TLS boundary. URL Use Target Port / Website Webserver 3000 /getconfig Arduino Config from Node Pirate-Bridge 9876 /ctrl POST Control of Arduino through Node Pirate-Bridge 9876 /stream SSE-Stream from Node Pirate-Bridge 9876 /janusopt Janus WebRTC Stream Janus-Gateway 8088","title":"Implementation"},{"location":"Pirate-Map/30-map-implementation/#implementation","text":"This is currently a small component, because only one project is supported and the project is not yet integrated in the targeted network. In its current form only a reverse proxy under a temporary domain is set up, enabling HTTPS. Because it is used on a residential connection Dynamic DNS is set up on the Router.","title":"Implementation"},{"location":"Pirate-Map/30-map-implementation/#domain","text":"The domain is currently bought from namecheap .","title":"Domain"},{"location":"Pirate-Map/30-map-implementation/#dyn-dns","text":"The Dynamic DNS is provided by a \"Fritz Box\" router set up to communicate with the namecheap service. It periodically updates the current IP-Adress of the residential connection.","title":"Dyn-DNS"},{"location":"Pirate-Map/30-map-implementation/#certificates","text":"Even tough namecheap provides certificates it is easier to use the automatic certification via Let's Encrypt .","title":"Certificates"},{"location":"Pirate-Map/30-map-implementation/#reverse-proxy","text":"The used reverse proxy is a caddy server. It enables automatic certificates via Let's Encrypt. It is written in the programming language Go. This has the benefit, that Go programs are mostly compiled to a single executable, making the deployment very easy. The caddy server also uses a single configuration file. The configuration used for the reverse proxies can be viewed in the setup section The reverse proxy supports the following routes. A reverse proxy is used to create a unified front and as a TLS boundary. URL Use Target Port / Website Webserver 3000 /getconfig Arduino Config from Node Pirate-Bridge 9876 /ctrl POST Control of Arduino through Node Pirate-Bridge 9876 /stream SSE-Stream from Node Pirate-Bridge 9876 /janusopt Janus WebRTC Stream Janus-Gateway 8088","title":"Reverse Proxy"},{"location":"Pirate-Map/40-map-validation/","text":"Validation and Future Steps # In this section the initial requirements are measured against the current implementation. Functional Requirements # The functional requirements are not matched by the current implementation. Create an Unified Endpoint # The client should be able to access all functionality over HTTPS. This includes: Get Bridge endpoints Get videostream from the Spyglass This requirement is partially fulfilled. With one project on a temporary domain it is possible to access the project as intended. But it is not yet integrated in the target network. Enable routing to different Projects # The routing solution should be able to support multiple projects which can be visited independently from each other. This requirement is not met. A solution is designed, but the feasibility in a corporate environment has not been investigated. A temporary solution can be created by using another reverse proxy in front of the individual pirate modules. This proxy would strip a /projectX/ suffix from the URL and forward the requests to the standardized endpoints of the modules. Advertise different Project in a summary Site # The available Projects should be aggregated in a single source. This requirement is not met. As there is not yet a way to target multiple projects, no such site / aggregation is implemented. Non-Functional Requirements # The solution needs to be robust and run for at least 3 hours und continuous load. A reverse proxy is a very established technology and ran 72 hours without interruption. The solution needs to enable 24/7 availability. A reverse proxy is a very established technology and ran 72 hours without interruption. The latency should not be significantly increased by the routing. A reverse proxy is a very established technology and latency is minimal. A single project must be implemented. The current implementation points directly to the single project. This requirement is fulfilled. Future Steps # The original goal of integrating this solution into a more complex network and enabling access to multiple projects needs to be implemented. Encapsulating the server into a Docker container for easier management.","title":"Validation and Future Steps"},{"location":"Pirate-Map/40-map-validation/#validation-and-future-steps","text":"In this section the initial requirements are measured against the current implementation.","title":"Validation and Future Steps"},{"location":"Pirate-Map/40-map-validation/#functional-requirements","text":"The functional requirements are not matched by the current implementation.","title":"Functional Requirements"},{"location":"Pirate-Map/40-map-validation/#create-an-unified-endpoint","text":"The client should be able to access all functionality over HTTPS. This includes: Get Bridge endpoints Get videostream from the Spyglass This requirement is partially fulfilled. With one project on a temporary domain it is possible to access the project as intended. But it is not yet integrated in the target network.","title":"Create an Unified Endpoint"},{"location":"Pirate-Map/40-map-validation/#enable-routing-to-different-projects","text":"The routing solution should be able to support multiple projects which can be visited independently from each other. This requirement is not met. A solution is designed, but the feasibility in a corporate environment has not been investigated. A temporary solution can be created by using another reverse proxy in front of the individual pirate modules. This proxy would strip a /projectX/ suffix from the URL and forward the requests to the standardized endpoints of the modules.","title":"Enable routing to different Projects"},{"location":"Pirate-Map/40-map-validation/#advertise-different-project-in-a-summary-site","text":"The available Projects should be aggregated in a single source. This requirement is not met. As there is not yet a way to target multiple projects, no such site / aggregation is implemented.","title":"Advertise different Project in a summary Site"},{"location":"Pirate-Map/40-map-validation/#non-functional-requirements","text":"The solution needs to be robust and run for at least 3 hours und continuous load. A reverse proxy is a very established technology and ran 72 hours without interruption. The solution needs to enable 24/7 availability. A reverse proxy is a very established technology and ran 72 hours without interruption. The latency should not be significantly increased by the routing. A reverse proxy is a very established technology and latency is minimal. A single project must be implemented. The current implementation points directly to the single project. This requirement is fulfilled.","title":"Non-Functional Requirements"},{"location":"Pirate-Map/40-map-validation/#future-steps","text":"The original goal of integrating this solution into a more complex network and enabling access to multiple projects needs to be implemented. Encapsulating the server into a Docker container for easier management.","title":"Future Steps"},{"location":"Pirate-Map/Theory/caddy/","text":"Caddy # More information: https://caddyserver.com/ A reverse proxy is used to create a unified front and as a TLS boundary. URL Use Target Port / Website Webserver 3000 /getconfig Arduino Config from Node Pirate-Bridge 9876 /ctrl POST Control of Arduino through Node Pirate-Bridge 9876 /stream SSE-Stream from Node Pirate-Bridge 9876 /janusopt Janus WebRTC Stream Janus-Gateway 8088 Caddyfile # Configfile: To route { admin :34567 # expose admin port } wappler.me # domain under which to serve reverse_proxy /* localhost:3000 # Website reverse_proxy /getconfig* raspberrypi:9876 # Pirate-Bridge reverse_proxy /ctrl raspberrypi:9876 # Pirate-Bridge reverse_proxy /stream { # Pirate-Bridge flush_interval -1 to raspberrypi:9876 } route /janusopt/* { uri strip_prefix /janusopt reverse_proxy raspberrypi:8088 # Janus-Gateway control port } tls \"<path_to_cert>.crt\" \"<path_to_public_key>.key\" # enable tls","title":"Caddy"},{"location":"Pirate-Map/Theory/caddy/#caddy","text":"More information: https://caddyserver.com/ A reverse proxy is used to create a unified front and as a TLS boundary. URL Use Target Port / Website Webserver 3000 /getconfig Arduino Config from Node Pirate-Bridge 9876 /ctrl POST Control of Arduino through Node Pirate-Bridge 9876 /stream SSE-Stream from Node Pirate-Bridge 9876 /janusopt Janus WebRTC Stream Janus-Gateway 8088","title":"Caddy"},{"location":"Pirate-Map/Theory/caddy/#caddyfile","text":"Configfile: To route { admin :34567 # expose admin port } wappler.me # domain under which to serve reverse_proxy /* localhost:3000 # Website reverse_proxy /getconfig* raspberrypi:9876 # Pirate-Bridge reverse_proxy /ctrl raspberrypi:9876 # Pirate-Bridge reverse_proxy /stream { # Pirate-Bridge flush_interval -1 to raspberrypi:9876 } route /janusopt/* { uri strip_prefix /janusopt reverse_proxy raspberrypi:8088 # Janus-Gateway control port } tls \"<path_to_cert>.crt\" \"<path_to_public_key>.key\" # enable tls","title":"Caddyfile"},{"location":"Pirate-Map/Theory/dns/","text":"Dns # https://www.cloudflare.com/learning/dns/what-is-dns/ https://aws.amazon.com/route53/what-is-dns/ DynDns # Dynamic DNS is used when no static IP address is available. This is often the case with domestic connections. DynDns allows the record to be automatically updated, when the address changes. This is done by having a program call out to the DNS servers, whenever a change occurs. https://en.wikipedia.org/wiki/Dynamic_DNS Methods of doing so are often supplied by the domain name registrar.","title":"Dns"},{"location":"Pirate-Map/Theory/dns/#dns","text":"https://www.cloudflare.com/learning/dns/what-is-dns/ https://aws.amazon.com/route53/what-is-dns/","title":"Dns"},{"location":"Pirate-Map/Theory/dns/#dyndns","text":"Dynamic DNS is used when no static IP address is available. This is often the case with domestic connections. DynDns allows the record to be automatically updated, when the address changes. This is done by having a program call out to the DNS servers, whenever a change occurs. https://en.wikipedia.org/wiki/Dynamic_DNS Methods of doing so are often supplied by the domain name registrar.","title":"DynDns"},{"location":"Pirate-Map/Theory/reverse-proxy/","text":"Reverse Proxy # https://www.cloudflare.com/learning/cdn/glossary/reverse-proxy/ https://caddyserver.com/docs/quick-starts/reverse-proxy https://docs.nginx.com/nginx/admin-guide/web-server/reverse-proxy/","title":"Reverse Proxy"},{"location":"Pirate-Map/Theory/reverse-proxy/#reverse-proxy","text":"https://www.cloudflare.com/learning/cdn/glossary/reverse-proxy/ https://caddyserver.com/docs/quick-starts/reverse-proxy https://docs.nginx.com/nginx/admin-guide/web-server/reverse-proxy/","title":"Reverse Proxy"},{"location":"Pirate-Spyglass/00-spyglass/","text":"Overview # In order to directly monitor the experiment and the setup that is remotely controlled by PirAtE and to make the measurements more engaging, a webcam solution was found. This solution uses the existing Raspberry Pi and a Raspberry Pi Camera Module (or a USB Webcam with integrated H264 encoder ) to capture video and provides a endpoint to stream this data to a webpage. Getting Started Requirements # The Goals for the Camera Implementation have been: Works on Raspberry Pi Low Ressourcen Usage on server and client side Low Latency Low Bandwidth Viewable from Browser Works in Reutlingen University's network Requirements Implementation # This video implementation is based on the project berrymse from Chris Hiszpanski. Description from the berrymse project H.264 Network Abstraction Layer (NAL) units are read from /dev/video0 , a Video4Linux2 compatible camera interface. Each unit corresponds to one frame. Frames are packaged into MPEG-4 ISO BMFF (ISO/IEC 14496-12) compliant fragments and sent via a websocket to the browser client. The client appends each received buffer to the media source for playback. This camera stack has three major components, the hardware/driver stack, the server and the client. Further details on Implementation Validation # The implementation was tested in multiple hour stress tests. Currently the Implementation runs with the following characteristics: - CPU utilization: sub 10% - Bandwidth: 1.5 Mbit/s - Latency: < 200ms - Resolution: 1280x720 - Works with university Network - USB Video Class devices are not well supported - Safari support has not been tested With these characteristics it matches the requirements and is suitable. Validation Research and Theory # The information collected throughout the implementation has been placed into the sub folders. The Theory folder contains important information about the current solution. Further details on streaming The Research folder contains the research notes collected during the development of both solutions. Licensing # Because the underlying solution is licensed under the AGPL , a copy left license, these kind of licenses were studied. Further details on licensing Legacy Solution # The original solution was based on gstreamer and a dockerized Janus WebRTC Broadcaster to provide a WebRTC video endpoint. WebRTC proved unusable for our use case, because the Reutlingen University network was incompatible with STUN signaling. Because of this no stream could cross the network border. A possible solution would be a TURN server, but this incurs a monthly cost and was not used. See https://github.com/bartbalaz/janus-container at \"Experimentation and observations\" for similar problem. Outside the network this solution performed adequately, with low latency.","title":"Overview"},{"location":"Pirate-Spyglass/00-spyglass/#overview","text":"In order to directly monitor the experiment and the setup that is remotely controlled by PirAtE and to make the measurements more engaging, a webcam solution was found. This solution uses the existing Raspberry Pi and a Raspberry Pi Camera Module (or a USB Webcam with integrated H264 encoder ) to capture video and provides a endpoint to stream this data to a webpage. Getting Started","title":"Overview"},{"location":"Pirate-Spyglass/00-spyglass/#requirements","text":"The Goals for the Camera Implementation have been: Works on Raspberry Pi Low Ressourcen Usage on server and client side Low Latency Low Bandwidth Viewable from Browser Works in Reutlingen University's network Requirements","title":"Requirements"},{"location":"Pirate-Spyglass/00-spyglass/#implementation","text":"This video implementation is based on the project berrymse from Chris Hiszpanski. Description from the berrymse project H.264 Network Abstraction Layer (NAL) units are read from /dev/video0 , a Video4Linux2 compatible camera interface. Each unit corresponds to one frame. Frames are packaged into MPEG-4 ISO BMFF (ISO/IEC 14496-12) compliant fragments and sent via a websocket to the browser client. The client appends each received buffer to the media source for playback. This camera stack has three major components, the hardware/driver stack, the server and the client. Further details on Implementation","title":"Implementation"},{"location":"Pirate-Spyglass/00-spyglass/#validation","text":"The implementation was tested in multiple hour stress tests. Currently the Implementation runs with the following characteristics: - CPU utilization: sub 10% - Bandwidth: 1.5 Mbit/s - Latency: < 200ms - Resolution: 1280x720 - Works with university Network - USB Video Class devices are not well supported - Safari support has not been tested With these characteristics it matches the requirements and is suitable. Validation","title":"Validation"},{"location":"Pirate-Spyglass/00-spyglass/#research-and-theory","text":"The information collected throughout the implementation has been placed into the sub folders. The Theory folder contains important information about the current solution. Further details on streaming The Research folder contains the research notes collected during the development of both solutions.","title":"Research and Theory"},{"location":"Pirate-Spyglass/00-spyglass/#licensing","text":"Because the underlying solution is licensed under the AGPL , a copy left license, these kind of licenses were studied. Further details on licensing","title":"Licensing"},{"location":"Pirate-Spyglass/00-spyglass/#legacy-solution","text":"The original solution was based on gstreamer and a dockerized Janus WebRTC Broadcaster to provide a WebRTC video endpoint. WebRTC proved unusable for our use case, because the Reutlingen University network was incompatible with STUN signaling. Because of this no stream could cross the network border. A possible solution would be a TURN server, but this incurs a monthly cost and was not used. See https://github.com/bartbalaz/janus-container at \"Experimentation and observations\" for similar problem. Outside the network this solution performed adequately, with low latency.","title":"Legacy Solution"},{"location":"Pirate-Spyglass/10-spyglass-getting-started/","text":"Getting Started # This section contains instructions to create a streaming Raspberry Pi. It contains: The Requirements How to start the server How to enable autostart How to include into clients Requirements # This solution was tested on a Raspberry Pi 4 with the 32-bit Raspberry Pi OS Debian 10 (Buster) and 11 (Bullseye). Camera wise a Raspberry Pi Camera Module is necessary or a USB Webcam with integrated H264 encoder . It was tested with V1 and V2 of the RPI Camera and Victure SC30 USB Webcam. USB Webcams don't have many supported settings and the Bitrate is trash. Raspberry Pi Camera # The Camera driver needs to be activated. This can be done in the Raspberry Pi Config in the interface section. sudo raspi-config USB H264 Camera # The Camera needs to have a Device Node /dev/video* that provides Video with the H264 Codec. Some Cameras will provide multiple Device Nodes, you can check what Formats they provide by using: v4l2-ctl --list-formats -d /dev/video0 Fast Method # Connect the camera with the included ribbon cable. Install the OS (Raspberry Pi OS (Legacy) with desktop) and then activate the camera interface ( raspi-config ). (for additional information see setupraspberrypi ) (Optional on Bullseye, activate legacy stack libcamera ) Download newest precompiled version from repository . Unzip with and move into folder with tar xf berrymse.tar.gz cd berrymse The folder should contain: berrymse, the executable config.yml a config file for_autorstart a folder with convenience scripts readme.md Make executable exectuable: chomd +x ./berrymse and run it. Run # sudo ./berrymse This runs a server that provides a demo website. Without a config file port 2020 is standard. To open it visit localhost:2020 . The server provides a webpage ( index.html ), a websocket stream of the camera ( /video_websocket ) and the javascript ( /msevideo.js ) to run it. For more information on how to integrate this into another project please see the chapter below. For HTTP port 80 use sudo and specify port (0.0.0.0:80). sudo ./berrymse -l <raspberry pi ip address>:<port> -d /dev/video<X> or configure the executable by placing a config.yml with the following content in the same folder as the executable. The possible parameters can be seen under berrymse -h . Info If these configurations don't work/match your camera this can freeze the camera stack. e.g. using resolutions above 1920 times 1080 created crashes. config.yml camera : sourceFD : \"/dev/video0\" width : 1280 height : 720 bitrate : 1500000 server : url : \"0.0.0.0:80\" Run with sudo and visit website under localhost . Register Service # To register the executable as an autostart service: download the repository or release folder compile or place the executable in the armv7l folder (path must match the path in the berrymse.service file) Then use the provided convenience scripts in the for_autostart folder. cd for_autostart chmod +x ./register.sh sudo ./register.sh Restart to test the service. Compile Manually # Install Golang (use either armv6l for 32-bit or arm64) sudo rm -rf /usr/local/go && sudo tar -C /usr/local -xzf go1.17.7.linux-armv7l.tar.gz Add PATH and GOPATH export PATH=$PATH:/usr/local/go/bin export GOPATH=$HOME/go export PATH=$PATH:$GOPATH/bin Clone the repository git clone https://github.com/Ch3ri0ur/berrymse.git cd berrymse Install pkger and dependencies: GOOS=linux go get -v ./... go install github.com/markbates/pkger/cmd/pkger Build: cd cmd/berryMSE make Find executable in the arm7l folder. chmod +x ./armv7l/berrymse Execute from folder with config.yml sudo ./armv7l/berrymse How to integrate into another Project # Add the following snippets to the html file. Add the script to the header. < script src = \"msevideo.js\" ></ script > Add the video element and Buttons inside the body. < video autoplay controls muted ></ video > < button id = \"play-button\" type = \"button\" > Pause </ button > < button id = \"auto-skip-button\" type = \"button\" > Auto Skip Enabled </ button > < button id = \"reset-button\" type = \"button\" > Reset </ button > The msevideo.js expects the websocket connection under /video_websocket at the same origin as the website. This is done because it is expected that a reverse proxy is used for this application. The autoplay controls muted classes are advised.","title":"Getting Started"},{"location":"Pirate-Spyglass/10-spyglass-getting-started/#getting-started","text":"This section contains instructions to create a streaming Raspberry Pi. It contains: The Requirements How to start the server How to enable autostart How to include into clients","title":"Getting Started"},{"location":"Pirate-Spyglass/10-spyglass-getting-started/#requirements","text":"This solution was tested on a Raspberry Pi 4 with the 32-bit Raspberry Pi OS Debian 10 (Buster) and 11 (Bullseye). Camera wise a Raspberry Pi Camera Module is necessary or a USB Webcam with integrated H264 encoder . It was tested with V1 and V2 of the RPI Camera and Victure SC30 USB Webcam. USB Webcams don't have many supported settings and the Bitrate is trash.","title":"Requirements"},{"location":"Pirate-Spyglass/10-spyglass-getting-started/#raspberry-pi-camera","text":"The Camera driver needs to be activated. This can be done in the Raspberry Pi Config in the interface section. sudo raspi-config","title":"Raspberry Pi Camera"},{"location":"Pirate-Spyglass/10-spyglass-getting-started/#usb-h264-camera","text":"The Camera needs to have a Device Node /dev/video* that provides Video with the H264 Codec. Some Cameras will provide multiple Device Nodes, you can check what Formats they provide by using: v4l2-ctl --list-formats -d /dev/video0","title":"USB H264 Camera"},{"location":"Pirate-Spyglass/10-spyglass-getting-started/#fast-method","text":"Connect the camera with the included ribbon cable. Install the OS (Raspberry Pi OS (Legacy) with desktop) and then activate the camera interface ( raspi-config ). (for additional information see setupraspberrypi ) (Optional on Bullseye, activate legacy stack libcamera ) Download newest precompiled version from repository . Unzip with and move into folder with tar xf berrymse.tar.gz cd berrymse The folder should contain: berrymse, the executable config.yml a config file for_autorstart a folder with convenience scripts readme.md Make executable exectuable: chomd +x ./berrymse and run it.","title":"Fast Method"},{"location":"Pirate-Spyglass/10-spyglass-getting-started/#run","text":"sudo ./berrymse This runs a server that provides a demo website. Without a config file port 2020 is standard. To open it visit localhost:2020 . The server provides a webpage ( index.html ), a websocket stream of the camera ( /video_websocket ) and the javascript ( /msevideo.js ) to run it. For more information on how to integrate this into another project please see the chapter below. For HTTP port 80 use sudo and specify port (0.0.0.0:80). sudo ./berrymse -l <raspberry pi ip address>:<port> -d /dev/video<X> or configure the executable by placing a config.yml with the following content in the same folder as the executable. The possible parameters can be seen under berrymse -h . Info If these configurations don't work/match your camera this can freeze the camera stack. e.g. using resolutions above 1920 times 1080 created crashes. config.yml camera : sourceFD : \"/dev/video0\" width : 1280 height : 720 bitrate : 1500000 server : url : \"0.0.0.0:80\" Run with sudo and visit website under localhost .","title":"Run"},{"location":"Pirate-Spyglass/10-spyglass-getting-started/#register-service","text":"To register the executable as an autostart service: download the repository or release folder compile or place the executable in the armv7l folder (path must match the path in the berrymse.service file) Then use the provided convenience scripts in the for_autostart folder. cd for_autostart chmod +x ./register.sh sudo ./register.sh Restart to test the service.","title":"Register Service"},{"location":"Pirate-Spyglass/10-spyglass-getting-started/#compile-manually","text":"Install Golang (use either armv6l for 32-bit or arm64) sudo rm -rf /usr/local/go && sudo tar -C /usr/local -xzf go1.17.7.linux-armv7l.tar.gz Add PATH and GOPATH export PATH=$PATH:/usr/local/go/bin export GOPATH=$HOME/go export PATH=$PATH:$GOPATH/bin Clone the repository git clone https://github.com/Ch3ri0ur/berrymse.git cd berrymse Install pkger and dependencies: GOOS=linux go get -v ./... go install github.com/markbates/pkger/cmd/pkger Build: cd cmd/berryMSE make Find executable in the arm7l folder. chmod +x ./armv7l/berrymse Execute from folder with config.yml sudo ./armv7l/berrymse","title":"Compile Manually"},{"location":"Pirate-Spyglass/10-spyglass-getting-started/#how-to-integrate-into-another-project","text":"Add the following snippets to the html file. Add the script to the header. < script src = \"msevideo.js\" ></ script > Add the video element and Buttons inside the body. < video autoplay controls muted ></ video > < button id = \"play-button\" type = \"button\" > Pause </ button > < button id = \"auto-skip-button\" type = \"button\" > Auto Skip Enabled </ button > < button id = \"reset-button\" type = \"button\" > Reset </ button > The msevideo.js expects the websocket connection under /video_websocket at the same origin as the website. This is done because it is expected that a reverse proxy is used for this application. The autoplay controls muted classes are advised.","title":"How to integrate into another Project"},{"location":"Pirate-Spyglass/20-spyglass-requirements/","text":"Requirements # The Spyglass component has a set of functional and non functional Requirements. The following requirements are derived from the accepted overarching requirements approved by the customer. Functional Requirements # See Experiment on Webpage # It must be possible to integrate a live view of the experiment into a webpage. Automatically start on Bootup # The solution needs to be able to start and broadcast without user input, when booting. Simple integration into existing Projects # The solution should be easy to integrate into a existing webpage. Non-Functional Requirements # The solution should to work with chrome, firefox and safari. The frontend must run stably for 3 hours. The video should run with more than 10 fps. The delay to display the information may not exceed two seconds. The bandwidth requirements should not exceed 5 MBit/s pre stream. Multiple clients should be able to view the stream at the same time The image should be rotatable by 90\u00b0. The client must be usable with LTE. Should target Raspberry Pi OS 32-bit Buster. Current project is based on Buster and video stack on Bullseye has breaking changes, see libcamera","title":"Requirements"},{"location":"Pirate-Spyglass/20-spyglass-requirements/#requirements","text":"The Spyglass component has a set of functional and non functional Requirements. The following requirements are derived from the accepted overarching requirements approved by the customer.","title":"Requirements"},{"location":"Pirate-Spyglass/20-spyglass-requirements/#functional-requirements","text":"","title":"Functional Requirements"},{"location":"Pirate-Spyglass/20-spyglass-requirements/#see-experiment-on-webpage","text":"It must be possible to integrate a live view of the experiment into a webpage.","title":"See Experiment on Webpage"},{"location":"Pirate-Spyglass/20-spyglass-requirements/#automatically-start-on-bootup","text":"The solution needs to be able to start and broadcast without user input, when booting.","title":"Automatically start on Bootup"},{"location":"Pirate-Spyglass/20-spyglass-requirements/#simple-integration-into-existing-projects","text":"The solution should be easy to integrate into a existing webpage.","title":"Simple integration into existing Projects"},{"location":"Pirate-Spyglass/20-spyglass-requirements/#non-functional-requirements","text":"The solution should to work with chrome, firefox and safari. The frontend must run stably for 3 hours. The video should run with more than 10 fps. The delay to display the information may not exceed two seconds. The bandwidth requirements should not exceed 5 MBit/s pre stream. Multiple clients should be able to view the stream at the same time The image should be rotatable by 90\u00b0. The client must be usable with LTE. Should target Raspberry Pi OS 32-bit Buster. Current project is based on Buster and video stack on Bullseye has breaking changes, see libcamera","title":"Non-Functional Requirements"},{"location":"Pirate-Spyglass/30-spyglass-implementation/","text":"Implementation # The BerryMSE project is so designed that it produces an one file executable, which runs on the RaspberryPi and streams the RaspberryPi Camera via Websocket. A demo website is contained in the executable and is reachable on the given address, but its also possible to integrate the video in other websites via a small JavaScript script. The integration and playback in the website happens via MSE , which almost every browser supports. The implementation is focused on using as little components as possible and be very lightweight in performance and network traffic. This is achieved by avoiding unnecessary re-encoding and using hardware accelerated encoding and decoding on the server and the client. The H.264 compression of the RaspberryPi Camera stack helps limit the network traffic. For compatibility with browsers the frames (the H.264 NAL Units ) are wrapped according the ISOBMFF specification. These packages can be fed into the video player in the browser and are decoded by the MSE in real-time. The transport is performed via Websocket, because it doesn't need extra fallback server infrastructure, like a STUN/TURN server for WebRTC . The server is written in the programming language Golang. The Website is written with HTML, CSS and vanilla JavaScript. Only the RaspberryPi Camera is currently fully supported. The width, height, bandwidth ,rotation and source device can be configured. For more information see H.264 Parameter . Rudimentary webcam support has been implemented. These webcams need to support H.264 streaming, see H264 Cameras . The problem is that compared to the RaspberryPi Camera these webcams can not be configured as well and generate very high bandwidth. Brief Process Overview # Camera ( RPiCam , H264 Camera ) Produces raw image data ( H264 Camera has an integrated H.264 encoder and uses its own driver. It skips step 2 and interacts with the V4L2 Driver directly). Camera driver ( libcamera , raspicam ) Converts image data from camera to selected data format, here H.264 NAL Units . V4L2 Driver Stores image data in buffer and provides device interface on the device node, /dev/video0 . BerryMSE Source goV4l2 - Retrieves NAL Units from device node and adds them to the hub buffer. Hub - Creates AVCFF MPEG-4 Part 15 conform packages by storing NAL Units into ISOBMFF Structure. Websocket - Created AVCFF conform packages (frames) get send to registered websocket clients. JavaScript client Websocket Received AVCFF packages get appended to the MSE SourceBuffer . MSE Creates video by decoding the H.264 packages and feeding the the resulting frames to the video element. HTML Video Element Displays video on website. Camera to H.264 NAL Unit Stream # RaspberryPi Camera or other H264 Camera capture the image with a image sensor. This captured image gets converted into a H.264 Stream by the raspicam Driver or the integrated encoder by H264 Camera . The camera driver than gets accessed by the V4L2 Driver that handles the user space buffer side and provides the device nodes e.g. /dev/video0 to access the camera stream and provides a unicam config interface. This all happens outside the BerryMSE application on the RaspberryPi. BerryMSE starts with the usage of go-v4l2 lib that provides a data channel (Golang channel) and a configuration interface for the camera in Golang. The go-v4l2 lib opens the stream of the camera (as a H.264 Stream ) and configures the V4L2 user space buffer. It reads the buffer and puts the data in the channel. The data in this case are NAL Units from the H.264 Stream of the camera. During testing we found that occasionally the library would crash, presumably because the source was not yet ready. In order to prevent these crashes, fault tolerance has been implemented to ensure reliable start on boot. H.264 NAL Unit Stream to WS Stream # The NAL Units of H.264 get inspected in BerryMSE for their type. If it is a SPS or PPS NAL Unit then the SPS or PPS is stored. It is needed as a parameter for the AVC File Format . If it is P-Frame or I-Frame Data then it is packed in a MPEG-4 Part 15 AVC File Format and prepared for the transport via websocket to the clients. Important is that a client will only start receiving data when SPS, PPS are known, in order to dynamically extract necessary codec information. The first frame sent is always an I-Frame, because they initialize sequences. Every other NAL Unit gets ignored. When a client gets connected it will receive an Initial Fragment package of \"FTYP\" and \"MOOV\" that contains information about the stream. Subsequent Movie Fragments are a combination of a \"MOOF\" and \"MDAT\" package. The \"MOOF\" package contains metadata and a independent frame counter for each client. \"MDAT\" contains the actual image data. More infos for the packages can be found here: AVC File Format and here: MPEG-4 Part 15 . These wrapped packages get send over websocket to each client separately. WS Stream to Video # On the clients side the video will be displayed on a webpage in a video tag. To do this the packages of the websocket need to be passed to the Media Source Extention that can read and decode H.264 Videos that are send as MPEG-4 Part 15 AVC File Format . This all happens in a separate JavaScript script. The JavaScript script not only creates and supplies the MSE with the packages from the websocket, it also extracts the codec information from the stream first to create the MSE Object and SourceBuffer . The script also controls the video element so that it jumps to the newest decoded segment and doesn't spend time to prebuffering old data. The website (.html) and JavaScript are served via a HTTP file server at the selected URL address. Configuration # The server can be configured in a wide range of aspects. The currently implemented configurations are: H264 bitrate: Changes the bitrate of the video. Video height resolution: Changes the video height resolution. Video width resolution: Changes the video width resolution. Video rotation: Changes the video rotation resolution. It can only be changed in 90 degree steps and rotates the picture clockwise. Video source: Changes the source device node of the video. Server URL address: Changes the URL address were the video and website gets published to. Server websocket name: Changes the websocket name were the video packages can get received. This will break the demo page if changed. Warning Only the RPi Camera currently supports the settings Rotation Bitrate H264 USB Cameras need to use -1 to skip them. Flags # Flags have the highest Priority and will overwrite any default value and also overwrite the config loaded from the config file. The flags are listed below: Usage of ./berrymse: -c, -- string Use config Path/Name.yml Default Path is current directory! (default \"config.yml\") -b, --Camera.Bitrate int Bitrate in bit/s! Only supported for RPI Camera Other Cameras need to use -1 (default 1500000) -h, --Camera.Height int Height Resolution (default 720) -r, --Camera.Rotation int Rotation in 90degree Step Only supported for RPI Camera Other Cameras need to use -1 -d, --Camera.SourceFD string Use camera /dev/videoX (default \"/dev/video0\") -w, --Camera.Width int Width Resolution (default 1280) -l, --Server.URL string listen on host:port (default \"localhost:2020\") -s, --Server.WebSocket string Name of Websocket for Video Stream (default \"video_websocket\") Config File # The config file, if available, gets loaded in the beginning. Default name is \"config.yml\" and it is structured as seen below. ``` yaml title=\"config.yml\" camera: sourceFD: \"/dev/video0\" width: 1280 height: 720 bitrate: 1500000 rotation: 0 server: url: \"0.0.0.0:80\" ```","title":"Implementation"},{"location":"Pirate-Spyglass/30-spyglass-implementation/#implementation","text":"The BerryMSE project is so designed that it produces an one file executable, which runs on the RaspberryPi and streams the RaspberryPi Camera via Websocket. A demo website is contained in the executable and is reachable on the given address, but its also possible to integrate the video in other websites via a small JavaScript script. The integration and playback in the website happens via MSE , which almost every browser supports. The implementation is focused on using as little components as possible and be very lightweight in performance and network traffic. This is achieved by avoiding unnecessary re-encoding and using hardware accelerated encoding and decoding on the server and the client. The H.264 compression of the RaspberryPi Camera stack helps limit the network traffic. For compatibility with browsers the frames (the H.264 NAL Units ) are wrapped according the ISOBMFF specification. These packages can be fed into the video player in the browser and are decoded by the MSE in real-time. The transport is performed via Websocket, because it doesn't need extra fallback server infrastructure, like a STUN/TURN server for WebRTC . The server is written in the programming language Golang. The Website is written with HTML, CSS and vanilla JavaScript. Only the RaspberryPi Camera is currently fully supported. The width, height, bandwidth ,rotation and source device can be configured. For more information see H.264 Parameter . Rudimentary webcam support has been implemented. These webcams need to support H.264 streaming, see H264 Cameras . The problem is that compared to the RaspberryPi Camera these webcams can not be configured as well and generate very high bandwidth.","title":"Implementation"},{"location":"Pirate-Spyglass/30-spyglass-implementation/#brief-process-overview","text":"Camera ( RPiCam , H264 Camera ) Produces raw image data ( H264 Camera has an integrated H.264 encoder and uses its own driver. It skips step 2 and interacts with the V4L2 Driver directly). Camera driver ( libcamera , raspicam ) Converts image data from camera to selected data format, here H.264 NAL Units . V4L2 Driver Stores image data in buffer and provides device interface on the device node, /dev/video0 . BerryMSE Source goV4l2 - Retrieves NAL Units from device node and adds them to the hub buffer. Hub - Creates AVCFF MPEG-4 Part 15 conform packages by storing NAL Units into ISOBMFF Structure. Websocket - Created AVCFF conform packages (frames) get send to registered websocket clients. JavaScript client Websocket Received AVCFF packages get appended to the MSE SourceBuffer . MSE Creates video by decoding the H.264 packages and feeding the the resulting frames to the video element. HTML Video Element Displays video on website.","title":"Brief Process Overview"},{"location":"Pirate-Spyglass/30-spyglass-implementation/#camera-to-h264-nal-unit-stream","text":"RaspberryPi Camera or other H264 Camera capture the image with a image sensor. This captured image gets converted into a H.264 Stream by the raspicam Driver or the integrated encoder by H264 Camera . The camera driver than gets accessed by the V4L2 Driver that handles the user space buffer side and provides the device nodes e.g. /dev/video0 to access the camera stream and provides a unicam config interface. This all happens outside the BerryMSE application on the RaspberryPi. BerryMSE starts with the usage of go-v4l2 lib that provides a data channel (Golang channel) and a configuration interface for the camera in Golang. The go-v4l2 lib opens the stream of the camera (as a H.264 Stream ) and configures the V4L2 user space buffer. It reads the buffer and puts the data in the channel. The data in this case are NAL Units from the H.264 Stream of the camera. During testing we found that occasionally the library would crash, presumably because the source was not yet ready. In order to prevent these crashes, fault tolerance has been implemented to ensure reliable start on boot.","title":"Camera to H.264 NAL Unit Stream"},{"location":"Pirate-Spyglass/30-spyglass-implementation/#h264-nal-unit-stream-to-ws-stream","text":"The NAL Units of H.264 get inspected in BerryMSE for their type. If it is a SPS or PPS NAL Unit then the SPS or PPS is stored. It is needed as a parameter for the AVC File Format . If it is P-Frame or I-Frame Data then it is packed in a MPEG-4 Part 15 AVC File Format and prepared for the transport via websocket to the clients. Important is that a client will only start receiving data when SPS, PPS are known, in order to dynamically extract necessary codec information. The first frame sent is always an I-Frame, because they initialize sequences. Every other NAL Unit gets ignored. When a client gets connected it will receive an Initial Fragment package of \"FTYP\" and \"MOOV\" that contains information about the stream. Subsequent Movie Fragments are a combination of a \"MOOF\" and \"MDAT\" package. The \"MOOF\" package contains metadata and a independent frame counter for each client. \"MDAT\" contains the actual image data. More infos for the packages can be found here: AVC File Format and here: MPEG-4 Part 15 . These wrapped packages get send over websocket to each client separately.","title":"H.264 NAL Unit Stream to WS Stream"},{"location":"Pirate-Spyglass/30-spyglass-implementation/#ws-stream-to-video","text":"On the clients side the video will be displayed on a webpage in a video tag. To do this the packages of the websocket need to be passed to the Media Source Extention that can read and decode H.264 Videos that are send as MPEG-4 Part 15 AVC File Format . This all happens in a separate JavaScript script. The JavaScript script not only creates and supplies the MSE with the packages from the websocket, it also extracts the codec information from the stream first to create the MSE Object and SourceBuffer . The script also controls the video element so that it jumps to the newest decoded segment and doesn't spend time to prebuffering old data. The website (.html) and JavaScript are served via a HTTP file server at the selected URL address.","title":"WS Stream to Video"},{"location":"Pirate-Spyglass/30-spyglass-implementation/#configuration","text":"The server can be configured in a wide range of aspects. The currently implemented configurations are: H264 bitrate: Changes the bitrate of the video. Video height resolution: Changes the video height resolution. Video width resolution: Changes the video width resolution. Video rotation: Changes the video rotation resolution. It can only be changed in 90 degree steps and rotates the picture clockwise. Video source: Changes the source device node of the video. Server URL address: Changes the URL address were the video and website gets published to. Server websocket name: Changes the websocket name were the video packages can get received. This will break the demo page if changed. Warning Only the RPi Camera currently supports the settings Rotation Bitrate H264 USB Cameras need to use -1 to skip them.","title":"Configuration"},{"location":"Pirate-Spyglass/30-spyglass-implementation/#flags","text":"Flags have the highest Priority and will overwrite any default value and also overwrite the config loaded from the config file. The flags are listed below: Usage of ./berrymse: -c, -- string Use config Path/Name.yml Default Path is current directory! (default \"config.yml\") -b, --Camera.Bitrate int Bitrate in bit/s! Only supported for RPI Camera Other Cameras need to use -1 (default 1500000) -h, --Camera.Height int Height Resolution (default 720) -r, --Camera.Rotation int Rotation in 90degree Step Only supported for RPI Camera Other Cameras need to use -1 -d, --Camera.SourceFD string Use camera /dev/videoX (default \"/dev/video0\") -w, --Camera.Width int Width Resolution (default 1280) -l, --Server.URL string listen on host:port (default \"localhost:2020\") -s, --Server.WebSocket string Name of Websocket for Video Stream (default \"video_websocket\")","title":"Flags"},{"location":"Pirate-Spyglass/30-spyglass-implementation/#config-file","text":"The config file, if available, gets loaded in the beginning. Default name is \"config.yml\" and it is structured as seen below. ``` yaml title=\"config.yml\" camera: sourceFD: \"/dev/video0\" width: 1280 height: 720 bitrate: 1500000 rotation: 0 server: url: \"0.0.0.0:80\" ```","title":"Config File"},{"location":"Pirate-Spyglass/40-spyglass-validation/","text":"Validation # In order to gauge the fit of this application for the requirements a set of tests were conducted. Tests # The streaming method was used to display the images from a Raspberry Pi camera, proving basic functionality. The application restarted successfully on a series of reboots. The application was integrated into a website with 5 lines of code. Tests were conducted with Chrome based browsers and Firefox. Safari could not be tested, but to our knowledge only iOS is incompatible (Phone). During tests the application ran for multiple hours. Long term tests only stopped when the websocket connection was closed by the browser (during standby for instance) after multiple hours. The reset Button works for reviving the video feed without reloading the webpage. The video feed works with 30 fps. Visual tests by recursively filming a stopwatch showed a latency below 200ms. This image depicts a screenshot of a stopwatch that has been recursively captured and transmitted with this application. With a delta of 1052ms and 6 transmission periods a lag of 175ms can be determined. Stress tests with up to 7 Streams showed only minoutilization on the Raspberry Pi around 15% always below 20%. Constant negligible memory usage (0.4%) 1.5 mbits per stream on both ends (as expected) Rotation was functional. The application was tested on smartphones over LTE/4G The running server never generated any problems or crashes. USB Webcam functionality was tested in limited fashion. The bitrate can not be controlled and ends up at around 10 mbits, because many controls are not exposed to the v4l2 interface by the webcam. The solution does not use any cookies. These tests show, that this solution matches the requirements and is usable. But as always there are possible improvements. Future steps and Improvements # Replace Websocket connection with Webtransport Replace MSE with Webcodecs migrate to libcamera (as soon as its ready for Raspberry Pi camera applications) Improve USB Webcam support. picamera2 preview Only h264 generate h264 stream with e.g. ffmpeg loopback from usb camera (down scalable compared to current USB camera interface which is not very customizable (bitrate is not changeable)) Migrate to an open codec. (Not possible because Raspberry Pi only supports h264 hardware encoding) Add fallback for iOS Add server reboot on crash (even though it was rock solid during testing) No guard rails for config (1920x1080 and bitrate of 1000000 did not work) to high resolution breaks video automatic reconnecting","title":"Validation"},{"location":"Pirate-Spyglass/40-spyglass-validation/#validation","text":"In order to gauge the fit of this application for the requirements a set of tests were conducted.","title":"Validation"},{"location":"Pirate-Spyglass/40-spyglass-validation/#tests","text":"The streaming method was used to display the images from a Raspberry Pi camera, proving basic functionality. The application restarted successfully on a series of reboots. The application was integrated into a website with 5 lines of code. Tests were conducted with Chrome based browsers and Firefox. Safari could not be tested, but to our knowledge only iOS is incompatible (Phone). During tests the application ran for multiple hours. Long term tests only stopped when the websocket connection was closed by the browser (during standby for instance) after multiple hours. The reset Button works for reviving the video feed without reloading the webpage. The video feed works with 30 fps. Visual tests by recursively filming a stopwatch showed a latency below 200ms. This image depicts a screenshot of a stopwatch that has been recursively captured and transmitted with this application. With a delta of 1052ms and 6 transmission periods a lag of 175ms can be determined. Stress tests with up to 7 Streams showed only minoutilization on the Raspberry Pi around 15% always below 20%. Constant negligible memory usage (0.4%) 1.5 mbits per stream on both ends (as expected) Rotation was functional. The application was tested on smartphones over LTE/4G The running server never generated any problems or crashes. USB Webcam functionality was tested in limited fashion. The bitrate can not be controlled and ends up at around 10 mbits, because many controls are not exposed to the v4l2 interface by the webcam. The solution does not use any cookies. These tests show, that this solution matches the requirements and is usable. But as always there are possible improvements.","title":"Tests"},{"location":"Pirate-Spyglass/40-spyglass-validation/#future-steps-and-improvements","text":"Replace Websocket connection with Webtransport Replace MSE with Webcodecs migrate to libcamera (as soon as its ready for Raspberry Pi camera applications) Improve USB Webcam support. picamera2 preview Only h264 generate h264 stream with e.g. ffmpeg loopback from usb camera (down scalable compared to current USB camera interface which is not very customizable (bitrate is not changeable)) Migrate to an open codec. (Not possible because Raspberry Pi only supports h264 hardware encoding) Add fallback for iOS Add server reboot on crash (even though it was rock solid during testing) No guard rails for config (1920x1080 and bitrate of 1000000 did not work) to high resolution breaks video automatic reconnecting","title":"Future steps and Improvements"},{"location":"Pirate-Spyglass/Original%20WebRTC%20Solution/00-spyglass_webrtc/","text":"Overview # Warning! The Spyglass Implementation has change in MEM Project 2 and this is the Documentation to the Old Legacy Version that used a Janus Gateway Server. Getting Started Requirements # The Goals for the Camera Implementation have been: Low Ressourcen Usage on Host and User side Low Latency Low Bandwidth Works on Raspberry Pi Theory # In the Theory, Streamer, Sources and in Streaming method's the research Material can be found Implementation # The Implementation uses a Janus WebRTC Broadcaster and its documentation and results are currently a bit mixed up. Validation # Currently the Implementation runs with: - Bandwidth: 1.2 Mbit/s - Latency: < 300ms - Resolution: 960x540 - Problems with HS Network Tests to other Resolutions and the Setup can be found in Janus WebRTC Broadcaster .","title":"Overview"},{"location":"Pirate-Spyglass/Original%20WebRTC%20Solution/00-spyglass_webrtc/#overview","text":"Warning! The Spyglass Implementation has change in MEM Project 2 and this is the Documentation to the Old Legacy Version that used a Janus Gateway Server. Getting Started","title":"Overview"},{"location":"Pirate-Spyglass/Original%20WebRTC%20Solution/00-spyglass_webrtc/#requirements","text":"The Goals for the Camera Implementation have been: Low Ressourcen Usage on Host and User side Low Latency Low Bandwidth Works on Raspberry Pi","title":"Requirements"},{"location":"Pirate-Spyglass/Original%20WebRTC%20Solution/00-spyglass_webrtc/#theory","text":"In the Theory, Streamer, Sources and in Streaming method's the research Material can be found","title":"Theory"},{"location":"Pirate-Spyglass/Original%20WebRTC%20Solution/00-spyglass_webrtc/#implementation","text":"The Implementation uses a Janus WebRTC Broadcaster and its documentation and results are currently a bit mixed up.","title":"Implementation"},{"location":"Pirate-Spyglass/Original%20WebRTC%20Solution/00-spyglass_webrtc/#validation","text":"Currently the Implementation runs with: - Bandwidth: 1.2 Mbit/s - Latency: < 300ms - Resolution: 960x540 - Problems with HS Network Tests to other Resolutions and the Setup can be found in Janus WebRTC Broadcaster .","title":"Validation"},{"location":"Pirate-Spyglass/Original%20WebRTC%20Solution/10-spyglass-getting-started_webrtc/","text":"Getting Started # As a prerequisite the Raspberry PI should have been set up according to the setup . Video Stream # ``` git clone https://github.com/Ch3ri0ur/pirate_modules.git ``` ``` cd pirate_modules/janus-gateway-docker/ ``` ``` docker-compose up -d ```","title":"Getting Started"},{"location":"Pirate-Spyglass/Original%20WebRTC%20Solution/10-spyglass-getting-started_webrtc/#getting-started","text":"As a prerequisite the Raspberry PI should have been set up according to the setup .","title":"Getting Started"},{"location":"Pirate-Spyglass/Original%20WebRTC%20Solution/10-spyglass-getting-started_webrtc/#video-stream","text":"``` git clone https://github.com/Ch3ri0ur/pirate_modules.git ``` ``` cd pirate_modules/janus-gateway-docker/ ``` ``` docker-compose up -d ```","title":"Video Stream"},{"location":"Pirate-Spyglass/Research/00-research/","text":"Research Overview # This folder contains the research notes for the original WebRTC Solution. The folder contains two subfolders: Sources contains information about how to generate the image stream. Streamers are ways to distribute this stream. Streaming Methods is a collection of notes about different streaming methods. WebRTC contains a collection of links.","title":"Research Overview"},{"location":"Pirate-Spyglass/Research/00-research/#research-overview","text":"This folder contains the research notes for the original WebRTC Solution. The folder contains two subfolders: Sources contains information about how to generate the image stream. Streamers are ways to distribute this stream. Streaming Methods is a collection of notes about different streaming methods. WebRTC contains a collection of links.","title":"Research Overview"},{"location":"Pirate-Spyglass/Research/streamingmethods/","text":"Streaming Methods # what are targets? # resolution latency bandwith ease of use not more languages (not php) Methods # Comparison different Types:\\ https://flashphoner.com/how-to-broadcast-webrtc-rtsp-and-rtmp-streams-to-media-source-extensions-via-the-websocket-protocol/ \\ https://www.ipcamlive.com/faqs get an ip camera ? for surveillance so perhaps not good latency https://www.controlbooth.com/threads/low-latency-ip-cameras.45601/ UV4L GStreamer RPI-Cam-Web-Interface stream-headless-chrome Raspivid motion high cpu usage RemoteMe v4l2 ffmpeg https://en.wikipedia.org/wiki/FFmpeg ( what is avconv last news blog 12.02.2018) netcat (nc ) for streaming / vlc else RazTot gstreamer janus interessting setup.sh file didn't work -> janus threw errors (also libnice problem with configure.ac (got it from other repository )) Other stuff # good collection https://raspberrypi.stackexchange.com/questions/7446/how-can-i-stream-h-264-video-from-the-raspberry-pi-camera-module-via-a-web-serve/7657#7657 https://raspberrypi.stackexchange.com/questions/26675/modern-way-to-stream-h-264-from-the-raspberry-cam https://qastack.com.de/raspberrypi/7446/how-can-i-stream-h-264-video-from-the-raspberry-pi-camera-module-via-a-web-serve info about ribbon cables and camera https://picamera.readthedocs.io/en/latest/fov.html http://www.netzmafia.de/skripten/hardware/RasPi/kamera/index.html raspivid not prefered method anymore now v4l2 is prefered src: https://qastack.com.de/raspberrypi/7446/how-can-i-stream-h-264-video-from-the-raspberry-pi-camera-module-via-a-web-serve mpeg is veraltet -> bad compression and single images h264 mjpeg dash-mpeg rtsp/rtmp/rtp m3u8 (utf8 variante von m3u) hls difference? hls dash mse create segments -> seconds of lag some info https://flussonic.com/blog/news/html5-streaming/ h264 hardware support on raspberry pi webrtc? webRTC turn/stun server? websockets whats ffmpeg concern that needs to be addressed - restart stream (or close on lost connection) - not sure which protocol but some had problems with that (ffmpeg perhaps) - how to display h264 (raw) - https://blog.ronnyvdb.net/2019/01/20/howto-stream-html5-video-h264-encoded-video-encapsulated-in-mp4-from-the-raspberry-pi-to-any-web-browser/ not sure if needed does some raspivid gstreamer stuff boardcasting stuff thought there was something possible with janus as a server MedienServer - Medooze-Media-Server f\u00fcr NodeJs: Compiling Fails https://openbase.io/js/medooze-media-server Janus MCU Server ( http://meetecho.com ) Kurento MCU Server ( http://www.kurento.org/ ) balena - lag 1-3 sec good setup/maintenance fallback to mjpeg needs flag in chrome/firefox -> rly bad restreamer docker run -d --restart always --name restreamer -e \"RS_USERNAME=fn\" -e \"RS_PASSWORD=pwd\" -e \"RS_MODE=RASPICAM\" -p 8080:8080 -v /mnt/restreamer/db:/restreamer/db -v /opt/vc:/opt/vc --privileged datarhei/restreamer-armv7l:latest major delay Gstreamer complexity of multiplexers Matthew Waters - GStreamer WebRTC.pdf big problem wit surveillance solutions -> bad latency Use Python Server Node Server Just other Server notes qualifies source mjpeg no https://appuals.com/how-to-perform-video-streaming-using-raspberry-pi/ mjpeg_streamer no https://www.tomshardware.com/how-to/use-raspberry-pi-as-pc-webcam uv4l kinda http://www.linux-projects.org/uv4l/ promising 150ms latency but only one client possible http://www.linux-projects.org/uv4l/tutorials/custom-webapp-with-face-detection/ facedetection stripped down project https://tryolabs.com/blog/hackathon-robot-remote-work-iot-computer-vision/ uv4l nc or multicat http://frozen.ca/streaming-raw-h-264-from-a-raspberry-pi/ kinda not open source https://www.instructables.com/id/Raspberry-Pi-Video-Streaming/ https://medium.com/home-wireless/headless-streaming-video-with-the-raspberry-pi-zero-w-and-raspberry-pi-camera-38bef1968e1 https://github.com/PietroAvolio/uv4l-webrtc-raspberry-pi motion not realtime? https://www.hackster.io/narender-singh/portable-video-streaming-camera-with-raspberry-pi-zero-w-dc22fd https://hada-tech.com/index.php/2020/06/07/live-stream-usb-camera-with-raspberry-pi/ raspivid -> cvlc -> rtsp lag i think https://raspberry-projects.com/pi/pi-hardware/raspberry-pi-camera/streaming-video-using-vlc-player https://bitsnblobs.com/ip-camera-using-the-raspberry-pi-zero/ cvlc comprehensive https://stackoverflow.com/questions/49846400/raspberry-pi-use-vlc-to-stream-webcam-logitech-c920-h264-video-without-tran ffmpeg -> rtsp rtsp not browser supported? https://codecalamity.com/raspberry-pi-hardware-accelerated-h264-webcam-security-camera/ ffmpeg mpeg mpeg https://phoboslab.org/log/2013/09/html5-live-video-streaming-via-websockets raspivid -> ffmpeg -> youtube not what we need https://www.digikey.com/en/maker/blogs/streaming-live-to-youtube-and-facebook-using-raspberry-pi-camera https://raspberrypi.stackexchange.com/questions/115889/best-way-to-stream-usb-camera-video-in-2020 raspivid directly nope https://wiki.marcluerssen.de/index.php?title=Raspberry_Pi/Camera_streaming v4l2 perhaps not same application https://siytek.com/raspberry-pi-rtsp-to-home-assistant/ https://www.ics.com/blog/raspberry-pi-camera-module#.VJFhbyvF-b8 pyserver webrtc remoteme ?? its for rc applications so perhaps its okay https://remoteme.org/raspberry-pi/ pyserver picamera ffmpeg https://nerdhut.de/2018/12/17/low-latency-and-high-fps-camera-stream-with-raspberry-pi/ python picamera raspivid->clvc python https://draeger-it.blog/raspberry-pi-camera-b01/ https://randomnerdtutorials.com/video-streaming-with-raspberry-pi-camera/ raspivid gstreamer from 2013 http://blog.tkjelectronics.dk/2013/06/how-to-stream-video-and-audio-from-a-raspberry-pi-with-no-latency/ vlc player 0ms buffer 0,6s latency from 2019 https://gist.github.com/neilyoung/8216c6cf0c7b69e25a152fde1c022a5d rpi-cam-web-interface php mjpeg https://elinux.org/RPi-Cam-Web-Interface medooze-media-server not tested, bad documentation https://github.com/medooze/media-server-node v4l2rtpserver hls not supported on browsers ( apple stuff ) https://github.com/mpromonet/v4l2rtspserver webrtc-streamer bad documentation unclear resolution config https://github.com/mpromonet/webrtc-streamer balena cam Webrtc/mjpegfallback costs with more than 10 projects https://github.com/balenalabs/balena-cam netcat + raspvid only Local and Reciever needs netcat http://frozen.ca/streaming-raw-h-264-from-a-raspberry-pi/ https://raspberrypi.stackexchange.com/questions/27082/how-to-stream-raspivid-to-linux-and-osx-using-gstreamer-vlc-or-netcat some python server picamera / streams https://picamera.readthedocs.io/en/release-1.13/api_streams.html collection of soutions mjpeg uv4l ffmpeg https://projects-raspberry.com/video-streaming-on-flask-server-using-rpi/ https://raspberrypi.stackexchange.com/questions/27381/streaming-from-rpi-over-vlc https://raspberrypi.stackexchange.com/questions/4412/streaming-h264-with-logitech-c920 https://qastack.com.de/raspberrypi/23182/how-to-stream-video-from-raspberry-pi-camera-and-watch-it-live https://raspberrypi.stackexchange.com/questions/23182/how-to-stream-video-from-raspberry-pi-camera-and-watch-it-live/32521#32521 something about using camera well Getting the most out of your V2 camera with UV4L. no idea to read https://www.avisec.ch/teil-11-wie-webcam-website-integrieren/ not interesting price https://www.ipcamlive.com https://restream.io/pricing other commercial solutions comercialstreamingsolutions Berrymse # Similar to Berrymse # https://www.codeinsideout.com/blog/pi/stream-picamera-h264/ https://github.com/vuquangtrong/pi_streaming MSE # https://stackoverflow.com/questions/36364943/frame-by-frame-decode-using-media-source-extension https://bugs.chromium.org/p/chromium/issues/detail?id=465324 Webtransport # This is a new UDP HTTP/3 based alternative to websockets. https://web.dev/webtransport/ https://www.w3.org/TR/webtransport/ Needs https (problems with a lan) No good Server implementation yet. https://centrifugal.github.io/centrifugo/blog/quic_web_transport/ quic-webtransport was the precursor and is deprecated. Webcodecs # Webcodecs is a low level API to do fast encoding and decoding on the fly. https://www.w3.org/TR/webcodecs/ https://developer.mozilla.org/en-US/docs/Web/API/WebCodecs_API https://web.dev/webcodecs/ https://chromestatus.com/feature/5669293909868544","title":"Streaming Methods"},{"location":"Pirate-Spyglass/Research/streamingmethods/#streaming-methods","text":"","title":"Streaming Methods"},{"location":"Pirate-Spyglass/Research/streamingmethods/#what-are-targets","text":"resolution latency bandwith ease of use not more languages (not php)","title":"what are targets?"},{"location":"Pirate-Spyglass/Research/streamingmethods/#methods","text":"Comparison different Types:\\ https://flashphoner.com/how-to-broadcast-webrtc-rtsp-and-rtmp-streams-to-media-source-extensions-via-the-websocket-protocol/ \\ https://www.ipcamlive.com/faqs get an ip camera ? for surveillance so perhaps not good latency https://www.controlbooth.com/threads/low-latency-ip-cameras.45601/ UV4L GStreamer RPI-Cam-Web-Interface stream-headless-chrome Raspivid motion high cpu usage RemoteMe v4l2 ffmpeg https://en.wikipedia.org/wiki/FFmpeg ( what is avconv last news blog 12.02.2018) netcat (nc ) for streaming / vlc else RazTot gstreamer janus interessting setup.sh file didn't work -> janus threw errors (also libnice problem with configure.ac (got it from other repository ))","title":"Methods"},{"location":"Pirate-Spyglass/Research/streamingmethods/#other-stuff","text":"good collection https://raspberrypi.stackexchange.com/questions/7446/how-can-i-stream-h-264-video-from-the-raspberry-pi-camera-module-via-a-web-serve/7657#7657 https://raspberrypi.stackexchange.com/questions/26675/modern-way-to-stream-h-264-from-the-raspberry-cam https://qastack.com.de/raspberrypi/7446/how-can-i-stream-h-264-video-from-the-raspberry-pi-camera-module-via-a-web-serve info about ribbon cables and camera https://picamera.readthedocs.io/en/latest/fov.html http://www.netzmafia.de/skripten/hardware/RasPi/kamera/index.html raspivid not prefered method anymore now v4l2 is prefered src: https://qastack.com.de/raspberrypi/7446/how-can-i-stream-h-264-video-from-the-raspberry-pi-camera-module-via-a-web-serve mpeg is veraltet -> bad compression and single images h264 mjpeg dash-mpeg rtsp/rtmp/rtp m3u8 (utf8 variante von m3u) hls difference? hls dash mse create segments -> seconds of lag some info https://flussonic.com/blog/news/html5-streaming/ h264 hardware support on raspberry pi webrtc? webRTC turn/stun server? websockets whats ffmpeg concern that needs to be addressed - restart stream (or close on lost connection) - not sure which protocol but some had problems with that (ffmpeg perhaps) - how to display h264 (raw) - https://blog.ronnyvdb.net/2019/01/20/howto-stream-html5-video-h264-encoded-video-encapsulated-in-mp4-from-the-raspberry-pi-to-any-web-browser/ not sure if needed does some raspivid gstreamer stuff boardcasting stuff thought there was something possible with janus as a server MedienServer - Medooze-Media-Server f\u00fcr NodeJs: Compiling Fails https://openbase.io/js/medooze-media-server Janus MCU Server ( http://meetecho.com ) Kurento MCU Server ( http://www.kurento.org/ ) balena - lag 1-3 sec good setup/maintenance fallback to mjpeg needs flag in chrome/firefox -> rly bad restreamer docker run -d --restart always --name restreamer -e \"RS_USERNAME=fn\" -e \"RS_PASSWORD=pwd\" -e \"RS_MODE=RASPICAM\" -p 8080:8080 -v /mnt/restreamer/db:/restreamer/db -v /opt/vc:/opt/vc --privileged datarhei/restreamer-armv7l:latest major delay Gstreamer complexity of multiplexers Matthew Waters - GStreamer WebRTC.pdf big problem wit surveillance solutions -> bad latency Use Python Server Node Server Just other Server notes qualifies source mjpeg no https://appuals.com/how-to-perform-video-streaming-using-raspberry-pi/ mjpeg_streamer no https://www.tomshardware.com/how-to/use-raspberry-pi-as-pc-webcam uv4l kinda http://www.linux-projects.org/uv4l/ promising 150ms latency but only one client possible http://www.linux-projects.org/uv4l/tutorials/custom-webapp-with-face-detection/ facedetection stripped down project https://tryolabs.com/blog/hackathon-robot-remote-work-iot-computer-vision/ uv4l nc or multicat http://frozen.ca/streaming-raw-h-264-from-a-raspberry-pi/ kinda not open source https://www.instructables.com/id/Raspberry-Pi-Video-Streaming/ https://medium.com/home-wireless/headless-streaming-video-with-the-raspberry-pi-zero-w-and-raspberry-pi-camera-38bef1968e1 https://github.com/PietroAvolio/uv4l-webrtc-raspberry-pi motion not realtime? https://www.hackster.io/narender-singh/portable-video-streaming-camera-with-raspberry-pi-zero-w-dc22fd https://hada-tech.com/index.php/2020/06/07/live-stream-usb-camera-with-raspberry-pi/ raspivid -> cvlc -> rtsp lag i think https://raspberry-projects.com/pi/pi-hardware/raspberry-pi-camera/streaming-video-using-vlc-player https://bitsnblobs.com/ip-camera-using-the-raspberry-pi-zero/ cvlc comprehensive https://stackoverflow.com/questions/49846400/raspberry-pi-use-vlc-to-stream-webcam-logitech-c920-h264-video-without-tran ffmpeg -> rtsp rtsp not browser supported? https://codecalamity.com/raspberry-pi-hardware-accelerated-h264-webcam-security-camera/ ffmpeg mpeg mpeg https://phoboslab.org/log/2013/09/html5-live-video-streaming-via-websockets raspivid -> ffmpeg -> youtube not what we need https://www.digikey.com/en/maker/blogs/streaming-live-to-youtube-and-facebook-using-raspberry-pi-camera https://raspberrypi.stackexchange.com/questions/115889/best-way-to-stream-usb-camera-video-in-2020 raspivid directly nope https://wiki.marcluerssen.de/index.php?title=Raspberry_Pi/Camera_streaming v4l2 perhaps not same application https://siytek.com/raspberry-pi-rtsp-to-home-assistant/ https://www.ics.com/blog/raspberry-pi-camera-module#.VJFhbyvF-b8 pyserver webrtc remoteme ?? its for rc applications so perhaps its okay https://remoteme.org/raspberry-pi/ pyserver picamera ffmpeg https://nerdhut.de/2018/12/17/low-latency-and-high-fps-camera-stream-with-raspberry-pi/ python picamera raspivid->clvc python https://draeger-it.blog/raspberry-pi-camera-b01/ https://randomnerdtutorials.com/video-streaming-with-raspberry-pi-camera/ raspivid gstreamer from 2013 http://blog.tkjelectronics.dk/2013/06/how-to-stream-video-and-audio-from-a-raspberry-pi-with-no-latency/ vlc player 0ms buffer 0,6s latency from 2019 https://gist.github.com/neilyoung/8216c6cf0c7b69e25a152fde1c022a5d rpi-cam-web-interface php mjpeg https://elinux.org/RPi-Cam-Web-Interface medooze-media-server not tested, bad documentation https://github.com/medooze/media-server-node v4l2rtpserver hls not supported on browsers ( apple stuff ) https://github.com/mpromonet/v4l2rtspserver webrtc-streamer bad documentation unclear resolution config https://github.com/mpromonet/webrtc-streamer balena cam Webrtc/mjpegfallback costs with more than 10 projects https://github.com/balenalabs/balena-cam netcat + raspvid only Local and Reciever needs netcat http://frozen.ca/streaming-raw-h-264-from-a-raspberry-pi/ https://raspberrypi.stackexchange.com/questions/27082/how-to-stream-raspivid-to-linux-and-osx-using-gstreamer-vlc-or-netcat some python server picamera / streams https://picamera.readthedocs.io/en/release-1.13/api_streams.html collection of soutions mjpeg uv4l ffmpeg https://projects-raspberry.com/video-streaming-on-flask-server-using-rpi/ https://raspberrypi.stackexchange.com/questions/27381/streaming-from-rpi-over-vlc https://raspberrypi.stackexchange.com/questions/4412/streaming-h264-with-logitech-c920 https://qastack.com.de/raspberrypi/23182/how-to-stream-video-from-raspberry-pi-camera-and-watch-it-live https://raspberrypi.stackexchange.com/questions/23182/how-to-stream-video-from-raspberry-pi-camera-and-watch-it-live/32521#32521 something about using camera well Getting the most out of your V2 camera with UV4L. no idea to read https://www.avisec.ch/teil-11-wie-webcam-website-integrieren/ not interesting price https://www.ipcamlive.com https://restream.io/pricing other commercial solutions comercialstreamingsolutions","title":"Other stuff"},{"location":"Pirate-Spyglass/Research/streamingmethods/#berrymse","text":"","title":"Berrymse"},{"location":"Pirate-Spyglass/Research/streamingmethods/#similar-to-berrymse","text":"https://www.codeinsideout.com/blog/pi/stream-picamera-h264/ https://github.com/vuquangtrong/pi_streaming","title":"Similar to Berrymse"},{"location":"Pirate-Spyglass/Research/streamingmethods/#mse","text":"https://stackoverflow.com/questions/36364943/frame-by-frame-decode-using-media-source-extension https://bugs.chromium.org/p/chromium/issues/detail?id=465324","title":"MSE"},{"location":"Pirate-Spyglass/Research/streamingmethods/#webtransport","text":"This is a new UDP HTTP/3 based alternative to websockets. https://web.dev/webtransport/ https://www.w3.org/TR/webtransport/ Needs https (problems with a lan) No good Server implementation yet. https://centrifugal.github.io/centrifugo/blog/quic_web_transport/ quic-webtransport was the precursor and is deprecated.","title":"Webtransport"},{"location":"Pirate-Spyglass/Research/streamingmethods/#webcodecs","text":"Webcodecs is a low level API to do fast encoding and decoding on the fly. https://www.w3.org/TR/webcodecs/ https://developer.mozilla.org/en-US/docs/Web/API/WebCodecs_API https://web.dev/webcodecs/ https://chromestatus.com/feature/5669293909868544","title":"Webcodecs"},{"location":"Pirate-Spyglass/Research/webRTC/","text":"WebRTC # Link aggregation: https://webrtc.org/ Protocol: https://developer.mozilla.org/en-US/docs/Web/API/WebRTC_API/Protocols https://blog.logrocket.com/get-a-basic-chat-application-working-with-webrtc/ https://levelup.gitconnected.com/build-your-own-video-chat-with-vue-webrtc-socketio-node-redis-eb51b78f9f55 https://developer.mozilla.org/en-US/docs/Web/API/WebRTC_API/Signaling_and_video_calling https://codelabs.developers.google.com/codelabs/webrtc-web/#0 https://morioh.com/p/eda8d6fc06bf https://webrtc.org/getting-started/firebase-rtc-codelab Perhaps good paper for webrtc ipcams: http://lup.lub.lu.se/luur/download?func=downloadFile&recordOId=8995044&fileOId=8995045 http://www.fedoa.unina.it/10403/1/miniero_lorenzo_27.pdf https://news.ycombinator.com/item?id=23372119","title":"WebRTC"},{"location":"Pirate-Spyglass/Research/webRTC/#webrtc","text":"Link aggregation: https://webrtc.org/ Protocol: https://developer.mozilla.org/en-US/docs/Web/API/WebRTC_API/Protocols https://blog.logrocket.com/get-a-basic-chat-application-working-with-webrtc/ https://levelup.gitconnected.com/build-your-own-video-chat-with-vue-webrtc-socketio-node-redis-eb51b78f9f55 https://developer.mozilla.org/en-US/docs/Web/API/WebRTC_API/Signaling_and_video_calling https://codelabs.developers.google.com/codelabs/webrtc-web/#0 https://morioh.com/p/eda8d6fc06bf https://webrtc.org/getting-started/firebase-rtc-codelab Perhaps good paper for webrtc ipcams: http://lup.lub.lu.se/luur/download?func=downloadFile&recordOId=8995044&fileOId=8995045 http://www.fedoa.unina.it/10403/1/miniero_lorenzo_27.pdf https://news.ycombinator.com/item?id=23372119","title":"WebRTC"},{"location":"Pirate-Spyglass/Research/Sources/gstreamer/","text":"GStreamer # https://gstreamer.freedesktop.org/documentation/application-development/introduction/gstreamer.html?gi-language=c GStreamer Libary C++ Framework for Streaming Multimedia https://pi.gbaman.info/?p=150 https://garagedeveloper.wordpress.com/2013/05/19/latest-development-android-raspberrypi/ raspivid -> gstreamer -> tcp -> gstreamer -> Video https://gist.github.com/neilyoung/8216c6cf0c7b69e25a152fde1c022a5d#file-receipt5-md raspivid -> Wrapper -> GStreamer -> RTSP Server -> vlcPlayer works cpu lag bandwidth quality command second half works 10 lags remotely not in lan 2.5 good raspivid -t 0 -h 720 -w 1080 -fps 25 -hf -b 2000000 -o - gst-launch-1.0 -v fdsrc ! h264parse ! rtph264pay config-interval=1 pt=96 ! udpsink host=0.0.0.0 port=8004 no 15 Discarding outgoing empty RTP packet raspivid -t 0 -h 720 -w 1080 -fps 25 -hf -b 2000000 -o - gst-launch-1.0 -v fdsrc ! h264parse ! rtph264pay config-interval=1 pt=96 ! gdppay ! udpsink host=0.0.0.0 port=8004 no - just dies raspivid -w 1280 -h 720 -fps 30 --b 2000000 --profile baseline --timeout 0 -o - gst-launch-1.0 -v fdsrc ! h264parse ! rtph264pay config-interval=1 pt=96 ! udpsink host=127.0.0.1 port=8004 no 10 yes 2-3 ~0.1 fps and 0.1sec snippets of smooth video raspivid -n -t 0 -w 1080 -h 720 -fps 30 -b 2000000 -o - gst-launch-1.0 -e -vvvv fdsrc ! h264parse ! rtph264pay config-interval=1 pt=96 ! udpsink host=0.0.0.0 port=8004 no janus didn't send anything raspivid -o - -t 0 -hf -w 1080 -h 720 -fps 30 cvlc -vvv stream:///dev/stdin --sout '#standard{access=http,mux=ts,dst=:8004}' :demux=h264 no 4 0.5-1 frozen till next keyframe then smooth snippet and frozen again raspivid -t 999999 -b 200000 -o - gst-launch-1.0 -e -vvv fdsrc ! h264parse ! rtph264pay pt=96 config-interval=1 ! udpsink host=0.0.0.0 port=8004 no just creates load gst-launch-1.0 v4l2src device=/dev/video0 ! video/x-raw,width=1080,height=720,framerate=30/1 ! videoconvert ! jpegenc ! rtpjpegpay ! udpsink host=0.0.0.0 port=8004 yes 20 no lag 6-7 good fast image gst-launch-1.0 v4l2src ! video/x-h264, width=1080, height=720, framerate=30/1 ! h264parse ! rtph264pay config-interval=1 pt=96 ! udpsink sync=false host=0.0.0.0 port=8004 yes 100 starts lagging behind 0.8 gets artifacts / starts lagging behind gst-launch-1.0 v4l2src ! 'video/x-raw, width=1080, height=720, framerate=30/1' ! videoconvert ! x264enc pass=qual quantizer=20 tune=zerolatency ! rtph264pay ! udpsink host=127.0.0.1 port=8004 yes 80 slightly 0.8 not the greatest but okay gst-launch-1.0 -vvvv v4l2src ! 'video/x-raw, width=1080, height=720, framerate=30/1' ! videoconvert ! x264enc pass=qual quantizer=20 tune=zerolatency ! rtph264pay ! udpsink port=8004 yes 35 no lag 0.1 really low bitrate 0.01 gst-launch-1.0 -v v4l2src ! video/x-raw,width=1080, height=720, framerate=30/1 ! videoscale ! videoconvert ! x264enc tune=zerolatency bitrate=500 speed-preset=superfast ! rtph264pay ! udpsink host=127.0.0.1 port=8004 yes really well 55 no lag really fast 2 good image quality gst-launch-1.0 -v v4l2src ! video/x-raw,width=1080, height=720, framerate=30/1 ! videoscale ! videoconvert ! x264enc tune=zerolatency bitrate=2000 speed-preset=superfast ! rtph264pay ! udpsink host=127.0.0.1 port=8004 yes really well 45 no lag really fast 1 goo enough image quality gst-launch-1.0 -v v4l2src ! video/x-raw,width=1080, height=720, framerate=30/1 ! videoscale ! videoconvert ! x264enc tune=zerolatency bitrate=1000 speed-preset=superfast ! rtph264pay ! udpsink host=127.0.0.1 port=8004 no 35 Discarding outgoing empty RTP packet gst-launch-1.0 -e v4l2src do-timestamp=true ! video/x-h264,width=1080,height=720,framerate=30/1 ! h264parse ! rtph264pay config-interval=1 ! gdppay ! udpsink host=0.0.0.0 port=8004 no error could not open x display for reading gst-launch-1.0 -v v4l2src ! video/x-raw,width=1080,height=720,framerate=30/1 ! videoscale ! videoconvert ! x264enc tune=zerolatency bitrate=500 speed-preset=superfast ! rtph264pay ! udpsink host=127.0.0.1 port=8004 yes not tested 10 almost no lag 1-2 Okay but degrades rapidly on movement but no artifacts gst-launch-1.0 -v rpicamsrc name=src preview=0 exposure-mode=night fullscreen=0 bitrate=1000000 annotation-mode=time+date annotation-text-size=20 ! video/x-h264,width=960,height=540,framerate=30/1,profile=constrained-baseline ! queue max-size-bytes=0 max-size-buffers=0 ! h264parse ! rtph264pay config-interval=1 pt=96 ! queue ! udpsink host=127.0.0.1 port=8004 sync=false","title":"GStreamer"},{"location":"Pirate-Spyglass/Research/Sources/gstreamer/#gstreamer","text":"https://gstreamer.freedesktop.org/documentation/application-development/introduction/gstreamer.html?gi-language=c GStreamer Libary C++ Framework for Streaming Multimedia https://pi.gbaman.info/?p=150 https://garagedeveloper.wordpress.com/2013/05/19/latest-development-android-raspberrypi/ raspivid -> gstreamer -> tcp -> gstreamer -> Video https://gist.github.com/neilyoung/8216c6cf0c7b69e25a152fde1c022a5d#file-receipt5-md raspivid -> Wrapper -> GStreamer -> RTSP Server -> vlcPlayer works cpu lag bandwidth quality command second half works 10 lags remotely not in lan 2.5 good raspivid -t 0 -h 720 -w 1080 -fps 25 -hf -b 2000000 -o - gst-launch-1.0 -v fdsrc ! h264parse ! rtph264pay config-interval=1 pt=96 ! udpsink host=0.0.0.0 port=8004 no 15 Discarding outgoing empty RTP packet raspivid -t 0 -h 720 -w 1080 -fps 25 -hf -b 2000000 -o - gst-launch-1.0 -v fdsrc ! h264parse ! rtph264pay config-interval=1 pt=96 ! gdppay ! udpsink host=0.0.0.0 port=8004 no - just dies raspivid -w 1280 -h 720 -fps 30 --b 2000000 --profile baseline --timeout 0 -o - gst-launch-1.0 -v fdsrc ! h264parse ! rtph264pay config-interval=1 pt=96 ! udpsink host=127.0.0.1 port=8004 no 10 yes 2-3 ~0.1 fps and 0.1sec snippets of smooth video raspivid -n -t 0 -w 1080 -h 720 -fps 30 -b 2000000 -o - gst-launch-1.0 -e -vvvv fdsrc ! h264parse ! rtph264pay config-interval=1 pt=96 ! udpsink host=0.0.0.0 port=8004 no janus didn't send anything raspivid -o - -t 0 -hf -w 1080 -h 720 -fps 30 cvlc -vvv stream:///dev/stdin --sout '#standard{access=http,mux=ts,dst=:8004}' :demux=h264 no 4 0.5-1 frozen till next keyframe then smooth snippet and frozen again raspivid -t 999999 -b 200000 -o - gst-launch-1.0 -e -vvv fdsrc ! h264parse ! rtph264pay pt=96 config-interval=1 ! udpsink host=0.0.0.0 port=8004 no just creates load gst-launch-1.0 v4l2src device=/dev/video0 ! video/x-raw,width=1080,height=720,framerate=30/1 ! videoconvert ! jpegenc ! rtpjpegpay ! udpsink host=0.0.0.0 port=8004 yes 20 no lag 6-7 good fast image gst-launch-1.0 v4l2src ! video/x-h264, width=1080, height=720, framerate=30/1 ! h264parse ! rtph264pay config-interval=1 pt=96 ! udpsink sync=false host=0.0.0.0 port=8004 yes 100 starts lagging behind 0.8 gets artifacts / starts lagging behind gst-launch-1.0 v4l2src ! 'video/x-raw, width=1080, height=720, framerate=30/1' ! videoconvert ! x264enc pass=qual quantizer=20 tune=zerolatency ! rtph264pay ! udpsink host=127.0.0.1 port=8004 yes 80 slightly 0.8 not the greatest but okay gst-launch-1.0 -vvvv v4l2src ! 'video/x-raw, width=1080, height=720, framerate=30/1' ! videoconvert ! x264enc pass=qual quantizer=20 tune=zerolatency ! rtph264pay ! udpsink port=8004 yes 35 no lag 0.1 really low bitrate 0.01 gst-launch-1.0 -v v4l2src ! video/x-raw,width=1080, height=720, framerate=30/1 ! videoscale ! videoconvert ! x264enc tune=zerolatency bitrate=500 speed-preset=superfast ! rtph264pay ! udpsink host=127.0.0.1 port=8004 yes really well 55 no lag really fast 2 good image quality gst-launch-1.0 -v v4l2src ! video/x-raw,width=1080, height=720, framerate=30/1 ! videoscale ! videoconvert ! x264enc tune=zerolatency bitrate=2000 speed-preset=superfast ! rtph264pay ! udpsink host=127.0.0.1 port=8004 yes really well 45 no lag really fast 1 goo enough image quality gst-launch-1.0 -v v4l2src ! video/x-raw,width=1080, height=720, framerate=30/1 ! videoscale ! videoconvert ! x264enc tune=zerolatency bitrate=1000 speed-preset=superfast ! rtph264pay ! udpsink host=127.0.0.1 port=8004 no 35 Discarding outgoing empty RTP packet gst-launch-1.0 -e v4l2src do-timestamp=true ! video/x-h264,width=1080,height=720,framerate=30/1 ! h264parse ! rtph264pay config-interval=1 ! gdppay ! udpsink host=0.0.0.0 port=8004 no error could not open x display for reading gst-launch-1.0 -v v4l2src ! video/x-raw,width=1080,height=720,framerate=30/1 ! videoscale ! videoconvert ! x264enc tune=zerolatency bitrate=500 speed-preset=superfast ! rtph264pay ! udpsink host=127.0.0.1 port=8004 yes not tested 10 almost no lag 1-2 Okay but degrades rapidly on movement but no artifacts gst-launch-1.0 -v rpicamsrc name=src preview=0 exposure-mode=night fullscreen=0 bitrate=1000000 annotation-mode=time+date annotation-text-size=20 ! video/x-h264,width=960,height=540,framerate=30/1,profile=constrained-baseline ! queue max-size-bytes=0 max-size-buffers=0 ! h264parse ! rtph264pay config-interval=1 pt=96 ! queue ! udpsink host=127.0.0.1 port=8004 sync=false","title":"GStreamer"},{"location":"Pirate-Spyglass/Research/Sources/stream-headless-chrome/","text":"Self implemented WebRTC # In the research for WebRTC Streamer solutions, a often found result have been tutorials for a webbrowser implemented video call room. This used the Webbrowser to perform a WebRTC Stream to all other member of the room. A simple Server did just the signaling of the SDP. Quelle: https://www.youtube.com/watch?v=h2WkZ0h0-Rc&list=PL_YW-znSZ_dK365WaVuiBUN6FYc9_1hni&index=1 Based on these Solution an Special Implementation was made that streamed the Usermedia of the Host to many. Private Repository: https://github.com/KingMaxi95/BroadcastLocalUserMediaWebRTC This Implementation had one website for the Host and a Website for the Users to connected to the stream. The Host page just had to be opened on the raspberry Pi to Start Streaming and the Server would transmit the SDP's from and to the Users. To Automate the Host side the server just starts a Headless Chromium Webbrowser that opens the Hostpage. This concept worked very well and didn't used many extra components, just: node to serve and coordinate everything puppeteer extension for node to manage a webbrowser ( puppeteer is from a Google developer) chromium as web browser (automatically installed with puppeteer and is a Open source Webbrowser) But the chromium Webbrowser didn't allowed to do custom settings to the Raspberry Pi Camera, when the usermedia was called. It used the v4l2 driver and changed settings of it back to the only supported formats: MJPEG 1280x780 30fps YUV 480x320 30fps Both needed Resources for conversion, because WebRTC uses only V8 or H264 for transmission. Also the H264 from the Raspi Cam needed to be converted from h264 to the named Formats before, what already used about 30% of one Processor with the webbrowser environment. This double conversion used a lot of resources and each new user that needed a stream caused a significant rise in processor usage, so that only 3 fully occupied the 4 processors of the Raspberry Pi. The Solution could be Promising if the multi compression that happens for each user could be reduced and the original H264 Format of the Camera could be used. Further Investigations should be made on: Re-Re-Stream: Send the Stream to yourself so that it is compressed and than to the users (only one compression and not for each new user) GStreamer WebRTC Implementation. https://gstreamer.freedesktop.org/documentation/webrtc/index.html?gi-language=c ALternative video driver or webbrowser","title":"Self implemented WebRTC"},{"location":"Pirate-Spyglass/Research/Sources/stream-headless-chrome/#self-implemented-webrtc","text":"In the research for WebRTC Streamer solutions, a often found result have been tutorials for a webbrowser implemented video call room. This used the Webbrowser to perform a WebRTC Stream to all other member of the room. A simple Server did just the signaling of the SDP. Quelle: https://www.youtube.com/watch?v=h2WkZ0h0-Rc&list=PL_YW-znSZ_dK365WaVuiBUN6FYc9_1hni&index=1 Based on these Solution an Special Implementation was made that streamed the Usermedia of the Host to many. Private Repository: https://github.com/KingMaxi95/BroadcastLocalUserMediaWebRTC This Implementation had one website for the Host and a Website for the Users to connected to the stream. The Host page just had to be opened on the raspberry Pi to Start Streaming and the Server would transmit the SDP's from and to the Users. To Automate the Host side the server just starts a Headless Chromium Webbrowser that opens the Hostpage. This concept worked very well and didn't used many extra components, just: node to serve and coordinate everything puppeteer extension for node to manage a webbrowser ( puppeteer is from a Google developer) chromium as web browser (automatically installed with puppeteer and is a Open source Webbrowser) But the chromium Webbrowser didn't allowed to do custom settings to the Raspberry Pi Camera, when the usermedia was called. It used the v4l2 driver and changed settings of it back to the only supported formats: MJPEG 1280x780 30fps YUV 480x320 30fps Both needed Resources for conversion, because WebRTC uses only V8 or H264 for transmission. Also the H264 from the Raspi Cam needed to be converted from h264 to the named Formats before, what already used about 30% of one Processor with the webbrowser environment. This double conversion used a lot of resources and each new user that needed a stream caused a significant rise in processor usage, so that only 3 fully occupied the 4 processors of the Raspberry Pi. The Solution could be Promising if the multi compression that happens for each user could be reduced and the original H264 Format of the Camera could be used. Further Investigations should be made on: Re-Re-Stream: Send the Stream to yourself so that it is compressed and than to the users (only one compression and not for each new user) GStreamer WebRTC Implementation. https://gstreamer.freedesktop.org/documentation/webrtc/index.html?gi-language=c ALternative video driver or webbrowser","title":"Self implemented WebRTC"},{"location":"Pirate-Spyglass/Research/Sources/uv4l/","text":"UV4L # WebRTC + Facedetection Demo # either Bandwidth ~ 2.3 MBs similar to or 400kbs artifacts very noticeable when whole picture changes, but sharpens up after ca. 1 second Latency 238 ms 126 ms 118 ms 176 ms 180 ms measurement of 2 cycles 536-230 ms / 2 = 153 ms currently only one client possible some kind of multiplexer needed => janus gateway? WebRTC two-way Audio/Video/Data Intercom & Recorder # other demo - 2MBs - resolution 1280x720 30 fps - latency over 5 cycles 203ms","title":"UV4L"},{"location":"Pirate-Spyglass/Research/Sources/uv4l/#uv4l","text":"","title":"UV4L"},{"location":"Pirate-Spyglass/Research/Sources/uv4l/#webrtc--facedetection-demo","text":"either Bandwidth ~ 2.3 MBs similar to or 400kbs artifacts very noticeable when whole picture changes, but sharpens up after ca. 1 second Latency 238 ms 126 ms 118 ms 176 ms 180 ms measurement of 2 cycles 536-230 ms / 2 = 153 ms currently only one client possible some kind of multiplexer needed => janus gateway?","title":"WebRTC + Facedetection Demo"},{"location":"Pirate-Spyglass/Research/Sources/uv4l/#webrtc-two-way-audiovideodata-intercom--recorder","text":"other demo - 2MBs - resolution 1280x720 30 fps - latency over 5 cycles 203ms","title":"WebRTC two-way Audio/Video/Data Intercom &amp; Recorder"},{"location":"Pirate-Spyglass/Research/Streamers/comercialstreamingsolutions/","text":"Commercial solutions # probably not Accepted Restream/Broadcast Services # Wowza # Pricing:\\ 150$/month\\ https://www.wowza.com/low-latency/webrtc-streaming-software Angelcam (click2stream) # Pricing:\\ 6-100$/month\\ https://www.angelcam.com/pricing/ FlashPhoner # Pricing:\\ 75$/month\\ https://flashphoner.com/webrtc-streaming-server-for-live-broadcasting-and-webinars/ NanoCosmos # Pricing:\\ 199\u20ac/month\\ https://www.nanocosmos.de/v6/ Server Software for Brodcast # FlashPhoner # Pricing:\\ 2000$/Serverlicenc\\ https://flashphoner.com/webrtc-streaming-server-for-live-broadcasting-and-webinars/ Full Soulution # Alohacam sry verkauft an verkada # Pricing:\\ 5$/month&device https://alohartc.com/","title":"Commercial solutions"},{"location":"Pirate-Spyglass/Research/Streamers/comercialstreamingsolutions/#commercial-solutions","text":"probably not Accepted","title":"Commercial solutions"},{"location":"Pirate-Spyglass/Research/Streamers/comercialstreamingsolutions/#restreambroadcast-services","text":"","title":"Restream/Broadcast Services"},{"location":"Pirate-Spyglass/Research/Streamers/comercialstreamingsolutions/#wowza","text":"Pricing:\\ 150$/month\\ https://www.wowza.com/low-latency/webrtc-streaming-software","title":"Wowza"},{"location":"Pirate-Spyglass/Research/Streamers/comercialstreamingsolutions/#angelcam-click2stream","text":"Pricing:\\ 6-100$/month\\ https://www.angelcam.com/pricing/","title":"Angelcam (click2stream)"},{"location":"Pirate-Spyglass/Research/Streamers/comercialstreamingsolutions/#flashphoner","text":"Pricing:\\ 75$/month\\ https://flashphoner.com/webrtc-streaming-server-for-live-broadcasting-and-webinars/","title":"FlashPhoner"},{"location":"Pirate-Spyglass/Research/Streamers/comercialstreamingsolutions/#nanocosmos","text":"Pricing:\\ 199\u20ac/month\\ https://www.nanocosmos.de/v6/","title":"NanoCosmos"},{"location":"Pirate-Spyglass/Research/Streamers/comercialstreamingsolutions/#server-software-for-brodcast","text":"","title":"Server Software for Brodcast"},{"location":"Pirate-Spyglass/Research/Streamers/comercialstreamingsolutions/#flashphoner_1","text":"Pricing:\\ 2000$/Serverlicenc\\ https://flashphoner.com/webrtc-streaming-server-for-live-broadcasting-and-webinars/","title":"FlashPhoner"},{"location":"Pirate-Spyglass/Research/Streamers/comercialstreamingsolutions/#full-soulution","text":"","title":"Full Soulution"},{"location":"Pirate-Spyglass/Research/Streamers/comercialstreamingsolutions/#alohacam-sry-verkauft-an-verkada","text":"Pricing:\\ 5$/month&device https://alohartc.com/","title":"Alohacam sry verkauft an verkada"},{"location":"Pirate-Spyglass/Research/Streamers/janus/","text":"Janus # https://github.com/meetecho/janus-gateway Docker Variations # https://github.com/canyanio/janus-gateway-docker docker pull canyan/janus-gateway:latest does not work (compiled for x86) canyanio can be compiled for armv7 by following the ci steps of their repro fruitnanny works with Docker but is older Alessandro Amirante - Janus &Docker: friends or foe? a Talk about Deployment https://groups.google.com/g/meetecho-janus/search?q=proxy Following Janus install instructions from their Repro: didn't work because architecture? Snap # Couldn't start http service with port 8088 even though 8088 was not in use reusing canyan/janus-gateway steps and compile for arm # Compiled image at ch3ri0ur/janus:latest Streaming pipelines Comparison # works cpu lag bandwidth quality command second half works 10 lags remotely not in lan 2.5 good raspivid -t 0 -h 720 -w 1080 -fps 25 -hf -b 2000000 -o - gst-launch-1.0 -v fdsrc ! h264parse ! rtph264pay config-interval=1 pt=96 ! udpsink host=0.0.0.0 port=8004 no 15 Discarding outgoing empty RTP packet raspivid -t 0 -h 720 -w 1080 -fps 25 -hf -b 2000000 -o - gst-launch-1.0 -v fdsrc ! h264parse ! rtph264pay config-interval=1 pt=96 ! gdppay ! udpsink host=0.0.0.0 port=8004 no - just dies raspivid -w 1280 -h 720 -fps 30 --b 2000000 --profile baseline --timeout 0 -o - gst-launch-1.0 -v fdsrc ! h264parse ! rtph264pay config-interval=1 pt=96 ! udpsink host=127.0.0.1 port=8004 no 10 yes 2-3 ~0.1 fps and 0.1sec snippets of smooth video raspivid -n -t 0 -w 1080 -h 720 -fps 30 -b 2000000 -o - gst-launch-1.0 -e -vvvv fdsrc ! h264parse ! rtph264pay config-interval=1 pt=96 ! udpsink host=0.0.0.0 port=8004 no janus didn't send anything raspivid -o - -t 0 -hf -w 1080 -h 720 -fps 30 cvlc -vvv stream:///dev/stdin --sout '#standard{access=http,mux=ts,dst=:8004}' :demux=h264 no 4 0.5-1 frozen till next keyframe then smooth snippet and frozen again raspivid -t 999999 -b 200000 -o - gst-launch-1.0 -e -vvv fdsrc ! h264parse ! rtph264pay pt=96 config-interval=1 ! udpsink host=0.0.0.0 port=8004 no just creates load gst-launch-1.0 v4l2src device=/dev/video0 ! video/x-raw,width=1080,height=720,framerate=30/1 ! videoconvert ! jpegenc ! rtpjpegpay ! udpsink host=0.0.0.0 port=8004 yes 20 no lag 6-7 good fast image gst-launch-1.0 v4l2src ! video/x-h264, width=1080, height=720, framerate=30/1 ! h264parse ! rtph264pay config-interval=1 pt=96 ! udpsink sync=false host=0.0.0.0 port=8004 yes 100 starts lagging behind 0.8 gets artifacts / starts lagging behind gst-launch-1.0 v4l2src ! 'video/x-raw, width=1080, height=720, framerate=30/1' ! videoconvert ! x264enc pass=qual quantizer=20 tune=zerolatency ! rtph264pay ! udpsink host=127.0.0.1 port=8004 yes 80 slightly 0.8 not the greatest but okay gst-launch-1.0 -vvvv v4l2src ! 'video/x-raw, width=1080, height=720, framerate=30/1' ! videoconvert ! x264enc pass=qual quantizer=20 tune=zerolatency ! rtph264pay ! udpsink port=8004 yes 35 no lag 0.1 really low bitrate 0.01 gst-launch-1.0 -v v4l2src ! video/x-raw,width=1080, height=720, framerate=30/1 ! videoscale ! videoconvert ! x264enc tune=zerolatency bitrate=500 speed-preset=superfast ! rtph264pay ! udpsink host=127.0.0.1 port=8004 yes really well 55 no lag really fast 2 good image quality gst-launch-1.0 -v v4l2src ! video/x-raw,width=1080, height=720, framerate=30/1 ! videoscale ! videoconvert ! x264enc tune=zerolatency bitrate=2000 speed-preset=superfast ! rtph264pay ! udpsink host=127.0.0.1 port=8004 best 45 no lag really fast best 1 good enough image quality gst-launch-1.0 -v v4l2src ! video/x-raw,width=1080, height=720, framerate=30/1 ! videoscale ! videoconvert ! x264enc tune=zerolatency bitrate=1000 speed-preset=superfast ! rtph264pay ! udpsink host=127.0.0.1 port=8004 no 35 Discarding outgoing empty RTP packet gst-launch-1.0 -e v4l2src do-timestamp=true ! video/x-h264,width=1080,height=720,framerate=30/1 ! h264parse ! rtph264pay config-interval=1 ! gdppay ! udpsink host=0.0.0.0 port=8004 no error could not open x display for reading gst-launch-1.0 -v v4l2src ! video/x-raw,width=1080,height=720,framerate=30/1 ! videoscale ! videoconvert ! x264enc tune=zerolatency bitrate=500 speed-preset=superfast ! rtph264pay ! udpsink host=127.0.0.1 port=8004 yes not tested 10 almost no lag 1-2 Okay but degrades rapidly on movement but no artifacts gst-launch-1.0 -v rpicamsrc name=src preview=0 exposure-mode=night fullscreen=0 bitrate=1000000 annotation-mode=time+date annotation-text-size=20 ! video/x-h264,width=960,height=540,framerate=30/1,profile=constrained-baseline ! queue max-size-bytes=0 max-size-buffers=0 ! h264parse ! rtph264pay config-interval=1 pt=96 ! queue ! udpsink host=127.0.0.1 port=8004 sync=false Client-Side-Code # Some modifications are needed to use the janus.js in the application: - import adapter from 'webrtc-adapter'; - Comment out Janus.useOldDependencies; - export default Janus; In Client import Janus, {JanusJS} from \"./janus\" //JanusJS if .d.ts are needed ICE 1-1Nat mapping # More on the ICE/NAT problematic in the readme https://github.com/bartbalaz/janus-container TLS # To get around encryption this instance is placed behind a reverse proxy server. The server caddy was used, to route the janus specific traffic.","title":"Janus"},{"location":"Pirate-Spyglass/Research/Streamers/janus/#janus","text":"https://github.com/meetecho/janus-gateway","title":"Janus"},{"location":"Pirate-Spyglass/Research/Streamers/janus/#docker-variations","text":"https://github.com/canyanio/janus-gateway-docker docker pull canyan/janus-gateway:latest does not work (compiled for x86) canyanio can be compiled for armv7 by following the ci steps of their repro fruitnanny works with Docker but is older Alessandro Amirante - Janus &Docker: friends or foe? a Talk about Deployment https://groups.google.com/g/meetecho-janus/search?q=proxy Following Janus install instructions from their Repro: didn't work because architecture?","title":"Docker Variations"},{"location":"Pirate-Spyglass/Research/Streamers/janus/#snap","text":"Couldn't start http service with port 8088 even though 8088 was not in use","title":"Snap"},{"location":"Pirate-Spyglass/Research/Streamers/janus/#reusing-canyanjanus-gateway-steps-and-compile-for-arm","text":"Compiled image at ch3ri0ur/janus:latest","title":"reusing canyan/janus-gateway steps and compile for arm"},{"location":"Pirate-Spyglass/Research/Streamers/janus/#streaming-pipelines-comparison","text":"works cpu lag bandwidth quality command second half works 10 lags remotely not in lan 2.5 good raspivid -t 0 -h 720 -w 1080 -fps 25 -hf -b 2000000 -o - gst-launch-1.0 -v fdsrc ! h264parse ! rtph264pay config-interval=1 pt=96 ! udpsink host=0.0.0.0 port=8004 no 15 Discarding outgoing empty RTP packet raspivid -t 0 -h 720 -w 1080 -fps 25 -hf -b 2000000 -o - gst-launch-1.0 -v fdsrc ! h264parse ! rtph264pay config-interval=1 pt=96 ! gdppay ! udpsink host=0.0.0.0 port=8004 no - just dies raspivid -w 1280 -h 720 -fps 30 --b 2000000 --profile baseline --timeout 0 -o - gst-launch-1.0 -v fdsrc ! h264parse ! rtph264pay config-interval=1 pt=96 ! udpsink host=127.0.0.1 port=8004 no 10 yes 2-3 ~0.1 fps and 0.1sec snippets of smooth video raspivid -n -t 0 -w 1080 -h 720 -fps 30 -b 2000000 -o - gst-launch-1.0 -e -vvvv fdsrc ! h264parse ! rtph264pay config-interval=1 pt=96 ! udpsink host=0.0.0.0 port=8004 no janus didn't send anything raspivid -o - -t 0 -hf -w 1080 -h 720 -fps 30 cvlc -vvv stream:///dev/stdin --sout '#standard{access=http,mux=ts,dst=:8004}' :demux=h264 no 4 0.5-1 frozen till next keyframe then smooth snippet and frozen again raspivid -t 999999 -b 200000 -o - gst-launch-1.0 -e -vvv fdsrc ! h264parse ! rtph264pay pt=96 config-interval=1 ! udpsink host=0.0.0.0 port=8004 no just creates load gst-launch-1.0 v4l2src device=/dev/video0 ! video/x-raw,width=1080,height=720,framerate=30/1 ! videoconvert ! jpegenc ! rtpjpegpay ! udpsink host=0.0.0.0 port=8004 yes 20 no lag 6-7 good fast image gst-launch-1.0 v4l2src ! video/x-h264, width=1080, height=720, framerate=30/1 ! h264parse ! rtph264pay config-interval=1 pt=96 ! udpsink sync=false host=0.0.0.0 port=8004 yes 100 starts lagging behind 0.8 gets artifacts / starts lagging behind gst-launch-1.0 v4l2src ! 'video/x-raw, width=1080, height=720, framerate=30/1' ! videoconvert ! x264enc pass=qual quantizer=20 tune=zerolatency ! rtph264pay ! udpsink host=127.0.0.1 port=8004 yes 80 slightly 0.8 not the greatest but okay gst-launch-1.0 -vvvv v4l2src ! 'video/x-raw, width=1080, height=720, framerate=30/1' ! videoconvert ! x264enc pass=qual quantizer=20 tune=zerolatency ! rtph264pay ! udpsink port=8004 yes 35 no lag 0.1 really low bitrate 0.01 gst-launch-1.0 -v v4l2src ! video/x-raw,width=1080, height=720, framerate=30/1 ! videoscale ! videoconvert ! x264enc tune=zerolatency bitrate=500 speed-preset=superfast ! rtph264pay ! udpsink host=127.0.0.1 port=8004 yes really well 55 no lag really fast 2 good image quality gst-launch-1.0 -v v4l2src ! video/x-raw,width=1080, height=720, framerate=30/1 ! videoscale ! videoconvert ! x264enc tune=zerolatency bitrate=2000 speed-preset=superfast ! rtph264pay ! udpsink host=127.0.0.1 port=8004 best 45 no lag really fast best 1 good enough image quality gst-launch-1.0 -v v4l2src ! video/x-raw,width=1080, height=720, framerate=30/1 ! videoscale ! videoconvert ! x264enc tune=zerolatency bitrate=1000 speed-preset=superfast ! rtph264pay ! udpsink host=127.0.0.1 port=8004 no 35 Discarding outgoing empty RTP packet gst-launch-1.0 -e v4l2src do-timestamp=true ! video/x-h264,width=1080,height=720,framerate=30/1 ! h264parse ! rtph264pay config-interval=1 ! gdppay ! udpsink host=0.0.0.0 port=8004 no error could not open x display for reading gst-launch-1.0 -v v4l2src ! video/x-raw,width=1080,height=720,framerate=30/1 ! videoscale ! videoconvert ! x264enc tune=zerolatency bitrate=500 speed-preset=superfast ! rtph264pay ! udpsink host=127.0.0.1 port=8004 yes not tested 10 almost no lag 1-2 Okay but degrades rapidly on movement but no artifacts gst-launch-1.0 -v rpicamsrc name=src preview=0 exposure-mode=night fullscreen=0 bitrate=1000000 annotation-mode=time+date annotation-text-size=20 ! video/x-h264,width=960,height=540,framerate=30/1,profile=constrained-baseline ! queue max-size-bytes=0 max-size-buffers=0 ! h264parse ! rtph264pay config-interval=1 pt=96 ! queue ! udpsink host=127.0.0.1 port=8004 sync=false","title":"Streaming pipelines Comparison"},{"location":"Pirate-Spyglass/Research/Streamers/janus/#client-side-code","text":"Some modifications are needed to use the janus.js in the application: - import adapter from 'webrtc-adapter'; - Comment out Janus.useOldDependencies; - export default Janus; In Client import Janus, {JanusJS} from \"./janus\" //JanusJS if .d.ts are needed","title":"Client-Side-Code"},{"location":"Pirate-Spyglass/Research/Streamers/janus/#ice-1-1nat-mapping","text":"More on the ICE/NAT problematic in the readme https://github.com/bartbalaz/janus-container","title":"ICE 1-1Nat mapping"},{"location":"Pirate-Spyglass/Research/Streamers/janus/#tls","text":"To get around encryption this instance is placed behind a reverse proxy server. The server caddy was used, to route the janus specific traffic.","title":"TLS"},{"location":"Pirate-Spyglass/Research/Streamers/kurento/","text":"Kurento # Kurento is an Open Source Software WebRTC media server x86 architekture not for raspbian arm v7","title":"Kurento"},{"location":"Pirate-Spyglass/Research/Streamers/kurento/#kurento","text":"Kurento is an Open Source Software WebRTC media server x86 architekture not for raspbian arm v7","title":"Kurento"},{"location":"Pirate-Spyglass/Theory/00-theory/","text":"Theory Overview # The Theory folder contains the information directly used in the current version of Spyglass . License Theory contains information about different licenses used throughout software development. Camera and Driver contains information about: gov4l2 h264 Camera Raspberry PI Camera v4l2 and more ... Video contains information about codecs and streaming methods. MPEG-4 MSE h264 and more ...","title":"Theory Overview"},{"location":"Pirate-Spyglass/Theory/00-theory/#theory-overview","text":"The Theory folder contains the information directly used in the current version of Spyglass . License Theory contains information about different licenses used throughout software development. Camera and Driver contains information about: gov4l2 h264 Camera Raspberry PI Camera v4l2 and more ... Video contains information about codecs and streaming methods. MPEG-4 MSE h264 and more ...","title":"Theory Overview"},{"location":"Pirate-Spyglass/Theory/licensetheory/","text":"License Information # Only a short Complication of the most used Licenses and some Important Information about Copyright and Copyleft. This is only a short Summary, more Information can be found in the Linked Sources. This is no Legal Advice!!!, only a small overview!!! Copyright # Copyright isn't a License, it's about who owns/created the software code (intellectual property) and can decide about distribution and right to copy. A Copyright holder can give permission to others to use it or transfer the Copyright Ownership. A Copyright always exists, even if the Author didn't add an Copyright Quote. The Owner of the Copyright can give others permission to use the code by adding a Quote, there they allow others to do it. Legal documents for giving someone the right to contribute are Contributor License Agreement (CLA) and to transfer ownership of the copyright are Copyright Assignment Agreement (CAA). Most License for OpenSource Software or Free Software force the Owner to allow others of getting free Copy of Sourcecode to study or modify. This doesn't mean that the Code looses its copyright or is free of charge to use. A Copyright Quote mustn't be removed or modified! It is usually acceptable to move the Quote to a more Central location or when a file gets split up, to duplicate it in each file. When someone else modifies a work (with allowance) the new code and changes fall under a new copyright with the modifier as owner. This doesn't mean that the old copyright is replaced, but that all changes are protected by an new one. A Copyright Quote for the Modification can be added to the file/section or listed under the original Copyright Quote with or without a description what changes have been introduced. In versioning tools all changes get tracked and it can be easily seen who did which changes. Adding a Date/Year to the copyright helps to keep track. The Copyrights can be combined if the owner of the original work allows it to become a combined work, but often it will stay a separate copyright for the modified/added work with the new author as owner. This means this modified work now needs the agreement of all the owners of the existing copyrights to be distributed and copied. Partial Copy or Distribution of only code that is under copyright of one owner would of course only need the one owners agreement. There are two maintaining methods for maintaining copyright notices. File-scope copyright notices mean the copyright is managed for every File. This way its much easier to see which Copyrights exist for the code in the file, but is also makes it much harder to track everything and keep it up to data. Centralized copyright notices gets managed in one file in the top level of the Project. The copyright quote should be updated with specific information about the work each contributor did. This hasn't to be done and in versioning tools like Github it is easy to track down which Code is made by who. If all Codeparts/intellectual Property of an Copyright Owner have been replaced/removed, than the copyright quote of this person can be removed. But it is very difficult to be sure and often you still need to credit the creator for the idea or inspiration. https://softwarefreedom.org/resources/2012/ManagingCopyrightInformation.html https://opensource.org/faq#:~:text=As%20long%20as%20you%20own,give%20it%20to%20somebody%20else ! https://en.wikipedia.org/wiki/Copyright Copyleft # Copyleft is a rule that shall prevent others to redistributed the program (with or without modification) with a restrictions on the central freedom of free Software. This means a project that inherits/includes a project with a copyleft rule needs to contain this rule from now in ist onw rules. Many OpenSource Licenses come with a Copyleft rule included, which is for protecting the project to become closed source, taking away the freedom of free software and not crediting the work of the original authors. https://www.gnu.org/philosophy/free-sw.en.html Free Software # Free Software is defined by The Free Software Foundation (FSF). Programms under a Free Software License have to follow the rules of Freedom, which allow the user to run, study or modify the code and retribute it to others. This doesn't need to be free of charge, but an option needs to be provided to the user. Freedom to run means you don't have to communicate to the developer for what you want to use it. Freedom to study and modify the SourceCode means a way to access the SourceCode needs to be given any you are free to do changes. Freedom to redistribute the software without or with own changes, without needing to notify, ask or pay someone. But a license of free software can permit other ways of releasing/contributing it. This doesn't mean that you don't have to pay for obtaining a copy of the Program/Executable or SourceCode. Software released unter a free software license needs to follow the rules a both. https://www.fsf.org/ https://www.gnu.org/philosophy/free-sw.en.html https://en.wikipedia.org/wiki/Free_software Open Source # Open Source isn't equal to Free Software and is defined by the Open Source Initiative. Open Source comes with more restriction than Free Software, but Free Software is more strict defined and more focused on the Freedom for the user. Because of the Similarity do Programms with a License that follows OpenSource or FreeSoftware rules often fulfill both definitions. https://opensource.org/osd https://en.wikipedia.org/wiki/Open_source https://www.gnu.org/philosophy/open-source-misses-the-point.en.html https://www.gnu.org/philosophy/free-sw.en.html GNU General Public License # GNU General Public License is a License provided by Free Software Foundation, Inc. This License is free of Charge and can be use for own Project that should follow the rules of Free Software. This License includes a Copyleft restriction that prevents others from using the project in own Projects that have closed Source or other restriction against Free Software. The latest Version of this License is GNU GPL v3. The GNU Lesser General Public License contains a less strong Copyleft. https://www.gnu.org/licenses/quick-guide-gplv3.en.html https://www.gnu.org/licenses/licenses.en.html https://www.gnu.org/philosophy/free-sw.en.html GNU Affero GPL # The GNU Affero General Public License is a GNU GPL v3 with the addition of closing a loophole. The definition of the regular GNU GPL was that the freedoms only have to be applied when distributing the modified software. The new restriction forces that it also has to follow the rules of freedom if a modified Version is used to run a service others can use. https://www.gnu.org/licenses/why-affero-gpl.en.html MIT License # Is a permissive free software license created by the Massachusetts Institute of Technology (MIT). This license has only minimal restrictions on how to use, modify, merge or redistribute and doesn't include a copyleft rule. But the copies or substantial portions of the Software need to include a copy of the terms of the MIT License and of the copyright notices. https://en.wikipedia.org/wiki/MIT_License https://opensource.org/licenses/MIT https://en.wikipedia.org/wiki/Permissive_software_license APACHE License # The APACHE License is very similar to the MIT License and was created by Apache Software Foundation (ASF). It is also a permissive free software license with no copyleft and allows modified work to be published under an different License. But all unmodified parts need to stay under the old (APACHE2) License. The currently public provided License from Apache Software Foundation is APACHE LICENSE, VERSION 2.0. https://www.apache.org/licenses/LICENSE-2.0 https://en.wikipedia.org/wiki/Apache_License","title":"License Information"},{"location":"Pirate-Spyglass/Theory/licensetheory/#license-information","text":"Only a short Complication of the most used Licenses and some Important Information about Copyright and Copyleft. This is only a short Summary, more Information can be found in the Linked Sources. This is no Legal Advice!!!, only a small overview!!!","title":"License Information"},{"location":"Pirate-Spyglass/Theory/licensetheory/#copyright","text":"Copyright isn't a License, it's about who owns/created the software code (intellectual property) and can decide about distribution and right to copy. A Copyright holder can give permission to others to use it or transfer the Copyright Ownership. A Copyright always exists, even if the Author didn't add an Copyright Quote. The Owner of the Copyright can give others permission to use the code by adding a Quote, there they allow others to do it. Legal documents for giving someone the right to contribute are Contributor License Agreement (CLA) and to transfer ownership of the copyright are Copyright Assignment Agreement (CAA). Most License for OpenSource Software or Free Software force the Owner to allow others of getting free Copy of Sourcecode to study or modify. This doesn't mean that the Code looses its copyright or is free of charge to use. A Copyright Quote mustn't be removed or modified! It is usually acceptable to move the Quote to a more Central location or when a file gets split up, to duplicate it in each file. When someone else modifies a work (with allowance) the new code and changes fall under a new copyright with the modifier as owner. This doesn't mean that the old copyright is replaced, but that all changes are protected by an new one. A Copyright Quote for the Modification can be added to the file/section or listed under the original Copyright Quote with or without a description what changes have been introduced. In versioning tools all changes get tracked and it can be easily seen who did which changes. Adding a Date/Year to the copyright helps to keep track. The Copyrights can be combined if the owner of the original work allows it to become a combined work, but often it will stay a separate copyright for the modified/added work with the new author as owner. This means this modified work now needs the agreement of all the owners of the existing copyrights to be distributed and copied. Partial Copy or Distribution of only code that is under copyright of one owner would of course only need the one owners agreement. There are two maintaining methods for maintaining copyright notices. File-scope copyright notices mean the copyright is managed for every File. This way its much easier to see which Copyrights exist for the code in the file, but is also makes it much harder to track everything and keep it up to data. Centralized copyright notices gets managed in one file in the top level of the Project. The copyright quote should be updated with specific information about the work each contributor did. This hasn't to be done and in versioning tools like Github it is easy to track down which Code is made by who. If all Codeparts/intellectual Property of an Copyright Owner have been replaced/removed, than the copyright quote of this person can be removed. But it is very difficult to be sure and often you still need to credit the creator for the idea or inspiration. https://softwarefreedom.org/resources/2012/ManagingCopyrightInformation.html https://opensource.org/faq#:~:text=As%20long%20as%20you%20own,give%20it%20to%20somebody%20else ! https://en.wikipedia.org/wiki/Copyright","title":"Copyright"},{"location":"Pirate-Spyglass/Theory/licensetheory/#copyleft","text":"Copyleft is a rule that shall prevent others to redistributed the program (with or without modification) with a restrictions on the central freedom of free Software. This means a project that inherits/includes a project with a copyleft rule needs to contain this rule from now in ist onw rules. Many OpenSource Licenses come with a Copyleft rule included, which is for protecting the project to become closed source, taking away the freedom of free software and not crediting the work of the original authors. https://www.gnu.org/philosophy/free-sw.en.html","title":"Copyleft"},{"location":"Pirate-Spyglass/Theory/licensetheory/#free-software","text":"Free Software is defined by The Free Software Foundation (FSF). Programms under a Free Software License have to follow the rules of Freedom, which allow the user to run, study or modify the code and retribute it to others. This doesn't need to be free of charge, but an option needs to be provided to the user. Freedom to run means you don't have to communicate to the developer for what you want to use it. Freedom to study and modify the SourceCode means a way to access the SourceCode needs to be given any you are free to do changes. Freedom to redistribute the software without or with own changes, without needing to notify, ask or pay someone. But a license of free software can permit other ways of releasing/contributing it. This doesn't mean that you don't have to pay for obtaining a copy of the Program/Executable or SourceCode. Software released unter a free software license needs to follow the rules a both. https://www.fsf.org/ https://www.gnu.org/philosophy/free-sw.en.html https://en.wikipedia.org/wiki/Free_software","title":"Free Software"},{"location":"Pirate-Spyglass/Theory/licensetheory/#open-source","text":"Open Source isn't equal to Free Software and is defined by the Open Source Initiative. Open Source comes with more restriction than Free Software, but Free Software is more strict defined and more focused on the Freedom for the user. Because of the Similarity do Programms with a License that follows OpenSource or FreeSoftware rules often fulfill both definitions. https://opensource.org/osd https://en.wikipedia.org/wiki/Open_source https://www.gnu.org/philosophy/open-source-misses-the-point.en.html https://www.gnu.org/philosophy/free-sw.en.html","title":"Open Source"},{"location":"Pirate-Spyglass/Theory/licensetheory/#gnu-general-public-license","text":"GNU General Public License is a License provided by Free Software Foundation, Inc. This License is free of Charge and can be use for own Project that should follow the rules of Free Software. This License includes a Copyleft restriction that prevents others from using the project in own Projects that have closed Source or other restriction against Free Software. The latest Version of this License is GNU GPL v3. The GNU Lesser General Public License contains a less strong Copyleft. https://www.gnu.org/licenses/quick-guide-gplv3.en.html https://www.gnu.org/licenses/licenses.en.html https://www.gnu.org/philosophy/free-sw.en.html","title":"GNU General Public License"},{"location":"Pirate-Spyglass/Theory/licensetheory/#gnu-affero-gpl","text":"The GNU Affero General Public License is a GNU GPL v3 with the addition of closing a loophole. The definition of the regular GNU GPL was that the freedoms only have to be applied when distributing the modified software. The new restriction forces that it also has to follow the rules of freedom if a modified Version is used to run a service others can use. https://www.gnu.org/licenses/why-affero-gpl.en.html","title":"GNU Affero GPL"},{"location":"Pirate-Spyglass/Theory/licensetheory/#mit-license","text":"Is a permissive free software license created by the Massachusetts Institute of Technology (MIT). This license has only minimal restrictions on how to use, modify, merge or redistribute and doesn't include a copyleft rule. But the copies or substantial portions of the Software need to include a copy of the terms of the MIT License and of the copyright notices. https://en.wikipedia.org/wiki/MIT_License https://opensource.org/licenses/MIT https://en.wikipedia.org/wiki/Permissive_software_license","title":"MIT License"},{"location":"Pirate-Spyglass/Theory/licensetheory/#apache-license","text":"The APACHE License is very similar to the MIT License and was created by Apache Software Foundation (ASF). It is also a permissive free software license with no copyleft and allows modified work to be published under an different License. But all unmodified parts need to stay under the old (APACHE2) License. The currently public provided License from Apache Software Foundation is APACHE LICENSE, VERSION 2.0. https://www.apache.org/licenses/LICENSE-2.0 https://en.wikipedia.org/wiki/Apache_License","title":"APACHE License"},{"location":"Pirate-Spyglass/Theory/Camera%20and%20Driver/goV4l2/","text":"GOV4L2 Lib # This Go Lib for accessing v4l2 in Go is used in berryMSE. https://github.com/thinkski/go-v4l2 It is also created by Chris Hiszpanski and was only coded to provide basic function for the usage with the RaspberryPi Camera . Description A pure Go implementation of Video4Linux2 stream capture with a simple channel based interface: No C code. No separate cross-compiler required. Zero copy. Memory-mapped double-buffer scheme makes kernel memory reference available via Go channel. For the Project we Improved it a little bit to fix some Bugs (Source didn't started correctly) and add some extra configuration functions. The new Rotation function is already used in BerryMSE and works only for the RaspberryPi. The new CustomConfig Functions are not used yet, but would allow in further work that custom settings can be applied to different Cameras without adding any new code to the Lib. CustomControls # The new implemented Custom Control function allows the setting of camera v4l2 controls via ID. // Custom Configuration possible with dev.SetCustomUserControl(id uint32, value int32) dev.SetCustomCodecControl(id uint32, value int32) // Check device with \"v4l2-ctl --all -d /dev/videoX\" for IDs // User stuff = 0x00980000 - 0x0098ffff // Codec stuff = 0x00990000 - 0x0099ffff // e.g. user control vertical flip = 0x00980915 The Control IDs can be extracted by using the 4vl2-ctl -all -d /dev/videoX command. e.g. RPI Camera ... User Controls brightness 0x00980900 (int) : min=0 max=100 step=1 default=50 value=50 flags=slider contrast 0x00980901 (int) : min=-100 max=100 step=1 default=0 value=0 flags=slider saturation 0x00980902 (int) : min=-100 max=100 step=1 default=0 value=0 flags=slider red_balance 0x0098090e (int) : min=1 max=7999 step=1 default=1000 value=1000 flags=slider blue_balance 0x0098090f (int) : min=1 max=7999 step=1 default=1000 value=1000 flags=slider horizontal_flip 0x00980914 (bool) : default=0 value=0 vertical_flip 0x00980915 (bool) : default=0 value=0 power_line_frequency 0x00980918 (menu) : min=0 max=3 default=1 value=1 ...","title":"GOV4L2 Lib"},{"location":"Pirate-Spyglass/Theory/Camera%20and%20Driver/goV4l2/#gov4l2-lib","text":"This Go Lib for accessing v4l2 in Go is used in berryMSE. https://github.com/thinkski/go-v4l2 It is also created by Chris Hiszpanski and was only coded to provide basic function for the usage with the RaspberryPi Camera . Description A pure Go implementation of Video4Linux2 stream capture with a simple channel based interface: No C code. No separate cross-compiler required. Zero copy. Memory-mapped double-buffer scheme makes kernel memory reference available via Go channel. For the Project we Improved it a little bit to fix some Bugs (Source didn't started correctly) and add some extra configuration functions. The new Rotation function is already used in BerryMSE and works only for the RaspberryPi. The new CustomConfig Functions are not used yet, but would allow in further work that custom settings can be applied to different Cameras without adding any new code to the Lib.","title":"GOV4L2 Lib"},{"location":"Pirate-Spyglass/Theory/Camera%20and%20Driver/goV4l2/#customcontrols","text":"The new implemented Custom Control function allows the setting of camera v4l2 controls via ID. // Custom Configuration possible with dev.SetCustomUserControl(id uint32, value int32) dev.SetCustomCodecControl(id uint32, value int32) // Check device with \"v4l2-ctl --all -d /dev/videoX\" for IDs // User stuff = 0x00980000 - 0x0098ffff // Codec stuff = 0x00990000 - 0x0099ffff // e.g. user control vertical flip = 0x00980915 The Control IDs can be extracted by using the 4vl2-ctl -all -d /dev/videoX command. e.g. RPI Camera ... User Controls brightness 0x00980900 (int) : min=0 max=100 step=1 default=50 value=50 flags=slider contrast 0x00980901 (int) : min=-100 max=100 step=1 default=0 value=0 flags=slider saturation 0x00980902 (int) : min=-100 max=100 step=1 default=0 value=0 flags=slider red_balance 0x0098090e (int) : min=1 max=7999 step=1 default=1000 value=1000 flags=slider blue_balance 0x0098090f (int) : min=1 max=7999 step=1 default=1000 value=1000 flags=slider horizontal_flip 0x00980914 (bool) : default=0 value=0 vertical_flip 0x00980915 (bool) : default=0 value=0 power_line_frequency 0x00980918 (menu) : min=0 max=3 default=1 value=1 ...","title":"CustomControls"},{"location":"Pirate-Spyglass/Theory/Camera%20and%20Driver/h264camera/","text":"H264 USB Camera # USB Cameras can have a H264 Encoder integrated and provide a H264 . Some Cameras will provide multiple Device Nodes, you can check what Formats they provide by using: v4l2-ctl --list-formats -d /dev/video0 Victure Webcam SC30 # In the Project we used the Victure Webcam SC30. The Camera Provides 4 Device Nodes /dev/videoX but only 2 Provide Video. /dev/video0: MPEG and YUYV /dev/video2: H264 v4l2-ctl --list-formats -d /dev/video2 ioctl: VIDIOC_ENUM_FMT Type: Video Capture [0]: 'H264' (H.264, compressed) v4l2-ctl --all -d /dev/video2 Driver Info: Driver name : uvcvideo Card type : USB Camera: USB Camera Bus info : usb-0000:01:00.0-1.1 Driver version : 5.10.63 Capabilities : 0x84a00001 Video Capture Metadata Capture Streaming Extended Pix Format Device Capabilities Device Caps : 0x04200001 Video Capture Streaming Extended Pix Format Media Driver Info: Driver name : uvcvideo Model : USB Camera: USB Camera Serial : USB Camera Bus info : usb-0000:01:00.0-1.1 Media version : 5.10.63 Hardware revision: 0x00000100 (256) Driver version : 5.10.63 Interface Info: ID : 0x03000008 Type : V4L Video Entity Info: ID : 0x00000007 (7) Name : USB Camera: USB Camera Function : V4L2 I/O Pad 0x01000011 : 0: Sink Link 0x0200001e: from remote pad 0x1000010 of entity 'Extension 4': Data, Enabled, Immutable Priority: 2 Video input : 0 (Camera 1: ok) Format Video Capture: Width/Height : 1920/1080 Pixel Format : 'H264' (H.264) Field : None Bytes per Line : 3840 Size Image : 0 Colorspace : sRGB Transfer Function : Rec. 709 YCbCr/HSV Encoding: ITU-R 601 Quantization : Default (maps to Full Range) Flags : Crop Capability Video Capture: Bounds : Left 0, Top 0, Width 1920, Height 1080 Default : Left 0, Top 0, Width 1920, Height 1080 Pixel Aspect: 1/1 Selection Video Capture: crop_default, Left 0, Top 0, Width 1920, Height 1080, Flags: Selection Video Capture: crop_bounds, Left 0, Top 0, Width 1920, Height 1080, Flags: Streaming Parameters Video Capture: Capabilities : timeperframe Frames per second: invalid (1/0) Read buffers : 0 brightness 0x00980900 (int) : min=-64 max=64 step=1 default=0 value=0 contrast 0x00980901 (int) : min=0 max=64 step=1 default=32 value=32 saturation 0x00980902 (int) : min=0 max=128 step=1 default=56 value=56 hue 0x00980903 (int) : min=-40 max=40 step=1 default=0 value=0 white_balance_temperature_auto 0x0098090c (bool) : default=1 value=1 gamma 0x00980910 (int) : min=72 max=500 step=1 default=100 value=100 gain 0x00980913 (int) : min=0 max=100 step=1 default=0 value=0 power_line_frequency 0x00980918 (menu) : min=0 max=2 default=1 value=1 0: Disabled 1: 50 Hz 2: 60 Hz white_balance_temperature 0x0098091a (int) : min=2800 max=6500 step=1 default=4600 value=4600 flags=inactive sharpness 0x0098091b (int) : min=0 max=6 step=1 default=4 value=4 backlight_compensation 0x0098091c (int) : min=0 max=2 step=1 default=1 value=1 exposure_auto 0x009a0901 (menu) : min=0 max=3 default=3 value=3 1: Manual Mode 3: Aperture Priority Mode exposure_absolute 0x009a0902 (int) : min=1 max=5000 step=1 default=156 value=156 flags=inactive exposure_auto_priority 0x009a0903 (bool) : default=0 value=0","title":"H264 USB Camera"},{"location":"Pirate-Spyglass/Theory/Camera%20and%20Driver/h264camera/#h264-usb-camera","text":"USB Cameras can have a H264 Encoder integrated and provide a H264 . Some Cameras will provide multiple Device Nodes, you can check what Formats they provide by using: v4l2-ctl --list-formats -d /dev/video0","title":"H264 USB Camera"},{"location":"Pirate-Spyglass/Theory/Camera%20and%20Driver/h264camera/#victure-webcam-sc30","text":"In the Project we used the Victure Webcam SC30. The Camera Provides 4 Device Nodes /dev/videoX but only 2 Provide Video. /dev/video0: MPEG and YUYV /dev/video2: H264 v4l2-ctl --list-formats -d /dev/video2 ioctl: VIDIOC_ENUM_FMT Type: Video Capture [0]: 'H264' (H.264, compressed) v4l2-ctl --all -d /dev/video2 Driver Info: Driver name : uvcvideo Card type : USB Camera: USB Camera Bus info : usb-0000:01:00.0-1.1 Driver version : 5.10.63 Capabilities : 0x84a00001 Video Capture Metadata Capture Streaming Extended Pix Format Device Capabilities Device Caps : 0x04200001 Video Capture Streaming Extended Pix Format Media Driver Info: Driver name : uvcvideo Model : USB Camera: USB Camera Serial : USB Camera Bus info : usb-0000:01:00.0-1.1 Media version : 5.10.63 Hardware revision: 0x00000100 (256) Driver version : 5.10.63 Interface Info: ID : 0x03000008 Type : V4L Video Entity Info: ID : 0x00000007 (7) Name : USB Camera: USB Camera Function : V4L2 I/O Pad 0x01000011 : 0: Sink Link 0x0200001e: from remote pad 0x1000010 of entity 'Extension 4': Data, Enabled, Immutable Priority: 2 Video input : 0 (Camera 1: ok) Format Video Capture: Width/Height : 1920/1080 Pixel Format : 'H264' (H.264) Field : None Bytes per Line : 3840 Size Image : 0 Colorspace : sRGB Transfer Function : Rec. 709 YCbCr/HSV Encoding: ITU-R 601 Quantization : Default (maps to Full Range) Flags : Crop Capability Video Capture: Bounds : Left 0, Top 0, Width 1920, Height 1080 Default : Left 0, Top 0, Width 1920, Height 1080 Pixel Aspect: 1/1 Selection Video Capture: crop_default, Left 0, Top 0, Width 1920, Height 1080, Flags: Selection Video Capture: crop_bounds, Left 0, Top 0, Width 1920, Height 1080, Flags: Streaming Parameters Video Capture: Capabilities : timeperframe Frames per second: invalid (1/0) Read buffers : 0 brightness 0x00980900 (int) : min=-64 max=64 step=1 default=0 value=0 contrast 0x00980901 (int) : min=0 max=64 step=1 default=32 value=32 saturation 0x00980902 (int) : min=0 max=128 step=1 default=56 value=56 hue 0x00980903 (int) : min=-40 max=40 step=1 default=0 value=0 white_balance_temperature_auto 0x0098090c (bool) : default=1 value=1 gamma 0x00980910 (int) : min=72 max=500 step=1 default=100 value=100 gain 0x00980913 (int) : min=0 max=100 step=1 default=0 value=0 power_line_frequency 0x00980918 (menu) : min=0 max=2 default=1 value=1 0: Disabled 1: 50 Hz 2: 60 Hz white_balance_temperature 0x0098091a (int) : min=2800 max=6500 step=1 default=4600 value=4600 flags=inactive sharpness 0x0098091b (int) : min=0 max=6 step=1 default=4 value=4 backlight_compensation 0x0098091c (int) : min=0 max=2 step=1 default=1 value=1 exposure_auto 0x009a0901 (menu) : min=0 max=3 default=3 value=3 1: Manual Mode 3: Aperture Priority Mode exposure_absolute 0x009a0902 (int) : min=1 max=5000 step=1 default=156 value=156 flags=inactive exposure_auto_priority 0x009a0903 (bool) : default=0 value=0","title":"Victure Webcam SC30"},{"location":"Pirate-Spyglass/Theory/Camera%20and%20Driver/legacycameraStack/","text":"Legacy Raspicam Camera Stack # Old Raspberry Pi Camera driver for RPI 10- (Buster or earlier). Driver runs on the Broadcom GPU and the GPU-Firmware cannot be modified. (ideoCore IV 3D, Kernel-Modul bcm2835-v4l2) https://www.raspberrypi.com/documentation/accessories/camera.html https://www.raspberrypi.com/documentation/computers/processors.html Full Camera System Access on Device Node /dev/video0 It provides many Options to manipulate and control the video and stream. It only works with the Raspberry Pi Camera . Usage # The Camera in RPi-OS Buster (10) or earlier need to activate the Camera in the boot.config or over the config Menu sudo raspi-config . In the menu it can be found under Interfacing Options . https://projects.raspberrypi.org/en/projects/getting-started-with-picamera/2 For Images: raspistill For Videos: raspivid https://projects.raspberrypi.org/en/projects/getting-started-with-picamera/3 \"raspivid\" Camera App (commit ) Display camera output to display, and optionally saves an H264 capture at requested bitrate usage: raspivid [options] Image parameter commands -b, --bitrate : Set bitrate. Use bits per second (e.g. 10MBits/s would be -b 10000000) -t, --timeout : Time (in ms) to capture for. If not specified, set to 5s. Zero to disable -d, --demo : Run a demo mode (cycle through range of camera options, no capture) -fps, --framerate : Specify the frames per second to record -e, --penc : Display preview image *after* encoding (shows compression artifacts) -g, --intra : Specify the intra refresh period (key frame rate/GoP size). Zero to produce an initial I-frame and then just P-frames. -pf, --profile : Specify H264 profile to use for encoding -td, --timed : Cycle between capture and pause. -cycle on,off where on is record time and off is pause time in ms -s, --signal : Cycle between capture and pause on Signal -k, --keypress : Cycle between capture and pause on ENTER -i, --initial : Initial state. Use 'record' or 'pause'. Default 'record' -qp, --qp : Quantisation parameter. Use approximately 10-40. Default 0 (off) -ih, --inline : Insert inline headers (SPS, PPS) to stream -sg, --segment : Segment output file in to multiple files at specified interval <ms> -wr, --wrap : In segment mode, wrap any numbered filename back to 1 when reach number -sn, --start : In segment mode, start with specified segment number -sp, --split : In wait mode, create new output file for each start event -c, --circular : Run encoded data through circular buffer until triggered then save -x, --vectors : Output filename <filename> for inline motion vectors -if, --irefresh : Set intra refresh type -fl, --flush : Flush buffers in order to decrease latency -pts, --save-pts : Save Timestamps to file for mkvmerge -cd, --codec : Specify the codec to use - H264 (default) or MJPEG -lev, --level : Specify H264 level to use for encoding -r, --raw : Output filename <filename> for raw video -rf, --raw-format : Specify output format for raw video. Default is yuv -l, --listen : Listen on a TCP socket -stm, --spstimings : Add in h.264 sps timings -sl, --slices : Horizontal slices per frame. Default 1 (off) H264 Profile options : baseline,main,high H264 Level options : 4,4.1,4.2 H264 Intra refresh options : cyclic,adaptive,both,cyclicrows Raw output format options : yuv,rgb,gray Raspivid allows output to a remote IPv4 host e.g. -o tcp://192.168.1.2:1234or -o udp://192.168.1.2:1234 To listen on a TCP port (IPv4) and wait for an incoming connection use the -l option e.g. raspivid -l -o tcp://0.0.0.0:3333 -> bind to all network interfaces, raspivid -l -o tcp://192.168.1.1:3333 -> bind to a certain local IPv4 port Common Settings commands -?, --help : This help information -w, --width : Set image width <size> -h, --height : Set image height <size> -o, --output : Output filename <filename> (to write to stdout, use '-o -'). If not specified, no file is saved -v, --verbose : Output verbose information during run -cs, --camselect : Select camera <number>. Default 0 -md, --mode : Force sensor mode. 0=auto. See docs for other modes available -gps, --gpsdexif : Apply real-time GPS information to output (e.g. EXIF in JPG, annotation in video (requires libgps.so.23) Preview parameter commands -p, --preview : Preview window settings <'x,y,w,h'> -f, --fullscreen : Fullscreen preview mode -op, --opacity : Preview window opacity (0-255) -n, --nopreview : Do not display a preview window -dn, --dispnum : Display on which to display the preview window (dispmanx/tvservice numbering) Image parameter commands -sh, --sharpness : Set image sharpness (-100 to 100) -co, --contrast : Set image contrast (-100 to 100) -br, --brightness : Set image brightness (0 to 100) -sa, --saturation : Set image saturation (-100 to 100) -ISO, --ISO : Set capture ISO -vs, --vstab : Turn on video stabilisation -ev, --ev : Set EV compensation - steps of 1/6 stop -ex, --exposure : Set exposure mode (see Notes) -fli, --flicker : Set flicker avoid mode (see Notes) -awb, --awb : Set AWB mode (see Notes) -ifx, --imxfx : Set image effect (see Notes) -cfx, --colfx : Set colour effect (U:V) -mm, --metering : Set metering mode (see Notes) -rot, --rotation : Set image rotation (0, 90, 180, or 270) -hf, --hflip : Set horizontal flip -vf, --vflip : Set vertical flip -roi, --roi : Set region of interest (x,y,w,d as normalised coordinates [0.0-1.0]) -ss, --shutter : Set shutter speed in microseconds -awbg, --awbgains : Set AWB gains - AWB mode must be off -drc, --drc : Set DRC Level (see Notes) -st, --stats : Force recomputation of statistics on stills capture pass -a, --annotate : Enable/Set annotate flags or text -3d, --stereo : Select stereoscopic mode -dec, --decimate : Half width/height of stereo image -3dswap, --3dswap : Swap camera order for stereoscopic -ae, --annotateex : Set extra annotation parameters (text size, text colour(hex YUV), bg colour(hex YUV), justify, x, y) -ag, --analoggain : Set the analog gain (floating point) -dg, --digitalgain : Set the digital gain (floating point) -set, --settings : Retrieve camera settings and write to stdout -fw, --focus : Draw a window with the focus FoM value on the image. Notes Exposure mode options : off,auto,night,nightpreview,backlight,spotlight,sports,snow,beach,verylong,fixedfps,antishake,fireworks Flicker avoid mode options : off,auto,50hz,60hz AWB mode options : off,auto,sun,cloud,shade,tungsten,fluorescent,incandescent,flash,horizon,greyworld Image Effect mode options : none,negative,solarise,sketch,denoise,emboss,oilpaint,hatch,gpen,pastel,watercolour,film,blur,saturation,colourswap,washedout,posterise,colourpoint,colourbalance,cartoon Metering Mode options : average,spot,backlit,matrix Dynamic Range Compression (DRC) options : off,low,med,high","title":"Legacy Raspicam Camera Stack"},{"location":"Pirate-Spyglass/Theory/Camera%20and%20Driver/legacycameraStack/#legacy-raspicam-camera-stack","text":"Old Raspberry Pi Camera driver for RPI 10- (Buster or earlier). Driver runs on the Broadcom GPU and the GPU-Firmware cannot be modified. (ideoCore IV 3D, Kernel-Modul bcm2835-v4l2) https://www.raspberrypi.com/documentation/accessories/camera.html https://www.raspberrypi.com/documentation/computers/processors.html Full Camera System Access on Device Node /dev/video0 It provides many Options to manipulate and control the video and stream. It only works with the Raspberry Pi Camera .","title":"Legacy Raspicam Camera Stack"},{"location":"Pirate-Spyglass/Theory/Camera%20and%20Driver/legacycameraStack/#usage","text":"The Camera in RPi-OS Buster (10) or earlier need to activate the Camera in the boot.config or over the config Menu sudo raspi-config . In the menu it can be found under Interfacing Options . https://projects.raspberrypi.org/en/projects/getting-started-with-picamera/2 For Images: raspistill For Videos: raspivid https://projects.raspberrypi.org/en/projects/getting-started-with-picamera/3 \"raspivid\" Camera App (commit ) Display camera output to display, and optionally saves an H264 capture at requested bitrate usage: raspivid [options] Image parameter commands -b, --bitrate : Set bitrate. Use bits per second (e.g. 10MBits/s would be -b 10000000) -t, --timeout : Time (in ms) to capture for. If not specified, set to 5s. Zero to disable -d, --demo : Run a demo mode (cycle through range of camera options, no capture) -fps, --framerate : Specify the frames per second to record -e, --penc : Display preview image *after* encoding (shows compression artifacts) -g, --intra : Specify the intra refresh period (key frame rate/GoP size). Zero to produce an initial I-frame and then just P-frames. -pf, --profile : Specify H264 profile to use for encoding -td, --timed : Cycle between capture and pause. -cycle on,off where on is record time and off is pause time in ms -s, --signal : Cycle between capture and pause on Signal -k, --keypress : Cycle between capture and pause on ENTER -i, --initial : Initial state. Use 'record' or 'pause'. Default 'record' -qp, --qp : Quantisation parameter. Use approximately 10-40. Default 0 (off) -ih, --inline : Insert inline headers (SPS, PPS) to stream -sg, --segment : Segment output file in to multiple files at specified interval <ms> -wr, --wrap : In segment mode, wrap any numbered filename back to 1 when reach number -sn, --start : In segment mode, start with specified segment number -sp, --split : In wait mode, create new output file for each start event -c, --circular : Run encoded data through circular buffer until triggered then save -x, --vectors : Output filename <filename> for inline motion vectors -if, --irefresh : Set intra refresh type -fl, --flush : Flush buffers in order to decrease latency -pts, --save-pts : Save Timestamps to file for mkvmerge -cd, --codec : Specify the codec to use - H264 (default) or MJPEG -lev, --level : Specify H264 level to use for encoding -r, --raw : Output filename <filename> for raw video -rf, --raw-format : Specify output format for raw video. Default is yuv -l, --listen : Listen on a TCP socket -stm, --spstimings : Add in h.264 sps timings -sl, --slices : Horizontal slices per frame. Default 1 (off) H264 Profile options : baseline,main,high H264 Level options : 4,4.1,4.2 H264 Intra refresh options : cyclic,adaptive,both,cyclicrows Raw output format options : yuv,rgb,gray Raspivid allows output to a remote IPv4 host e.g. -o tcp://192.168.1.2:1234or -o udp://192.168.1.2:1234 To listen on a TCP port (IPv4) and wait for an incoming connection use the -l option e.g. raspivid -l -o tcp://0.0.0.0:3333 -> bind to all network interfaces, raspivid -l -o tcp://192.168.1.1:3333 -> bind to a certain local IPv4 port Common Settings commands -?, --help : This help information -w, --width : Set image width <size> -h, --height : Set image height <size> -o, --output : Output filename <filename> (to write to stdout, use '-o -'). If not specified, no file is saved -v, --verbose : Output verbose information during run -cs, --camselect : Select camera <number>. Default 0 -md, --mode : Force sensor mode. 0=auto. See docs for other modes available -gps, --gpsdexif : Apply real-time GPS information to output (e.g. EXIF in JPG, annotation in video (requires libgps.so.23) Preview parameter commands -p, --preview : Preview window settings <'x,y,w,h'> -f, --fullscreen : Fullscreen preview mode -op, --opacity : Preview window opacity (0-255) -n, --nopreview : Do not display a preview window -dn, --dispnum : Display on which to display the preview window (dispmanx/tvservice numbering) Image parameter commands -sh, --sharpness : Set image sharpness (-100 to 100) -co, --contrast : Set image contrast (-100 to 100) -br, --brightness : Set image brightness (0 to 100) -sa, --saturation : Set image saturation (-100 to 100) -ISO, --ISO : Set capture ISO -vs, --vstab : Turn on video stabilisation -ev, --ev : Set EV compensation - steps of 1/6 stop -ex, --exposure : Set exposure mode (see Notes) -fli, --flicker : Set flicker avoid mode (see Notes) -awb, --awb : Set AWB mode (see Notes) -ifx, --imxfx : Set image effect (see Notes) -cfx, --colfx : Set colour effect (U:V) -mm, --metering : Set metering mode (see Notes) -rot, --rotation : Set image rotation (0, 90, 180, or 270) -hf, --hflip : Set horizontal flip -vf, --vflip : Set vertical flip -roi, --roi : Set region of interest (x,y,w,d as normalised coordinates [0.0-1.0]) -ss, --shutter : Set shutter speed in microseconds -awbg, --awbgains : Set AWB gains - AWB mode must be off -drc, --drc : Set DRC Level (see Notes) -st, --stats : Force recomputation of statistics on stills capture pass -a, --annotate : Enable/Set annotate flags or text -3d, --stereo : Select stereoscopic mode -dec, --decimate : Half width/height of stereo image -3dswap, --3dswap : Swap camera order for stereoscopic -ae, --annotateex : Set extra annotation parameters (text size, text colour(hex YUV), bg colour(hex YUV), justify, x, y) -ag, --analoggain : Set the analog gain (floating point) -dg, --digitalgain : Set the digital gain (floating point) -set, --settings : Retrieve camera settings and write to stdout -fw, --focus : Draw a window with the focus FoM value on the image. Notes Exposure mode options : off,auto,night,nightpreview,backlight,spotlight,sports,snow,beach,verylong,fixedfps,antishake,fireworks Flicker avoid mode options : off,auto,50hz,60hz AWB mode options : off,auto,sun,cloud,shade,tungsten,fluorescent,incandescent,flash,horizon,greyworld Image Effect mode options : none,negative,solarise,sketch,denoise,emboss,oilpaint,hatch,gpen,pastel,watercolour,film,blur,saturation,colourswap,washedout,posterise,colourpoint,colourbalance,cartoon Metering Mode options : average,spot,backlit,matrix Dynamic Range Compression (DRC) options : off,low,med,high","title":"Usage"},{"location":"Pirate-Spyglass/Theory/Camera%20and%20Driver/libcamera/","text":"libcamera # New open source camera driver that is used for RPI 11+ (Bullseye or later). Libcamera is a Linux focused driver that allows the usage of more complex cameras (not only RPi Camera ) and runs on the (ARM) processors. https://www.raspberrypi.com/documentation/accessories/camera.html The Libcamera will provided /dev/video0 and /dev/video1 as Device Nodes for the RPi Camera . These are Camera Serial Interface 2 (CSI2) \"Unicam\" that are provide and managed in combination with the V4L2 driver. Usage # Pictures libcamera-still Videos libcamera-vid https://www.raspberrypi.com/documentation/accessories/camera.html Problems # The API changed a bit, so that currently the rpi camera cannot be used on the new RPI OS Version Bullseye. Also old Applications got problems and cant run on the rpi. https://raspberrypi.stackexchange.com/questions/135364/libcamera-stack-does-not-work-with-bullseye https://forums.raspberrypi.com/viewtopic.php?p=1958297 Back to Legacy Camera Stack # The Old Driver can be reactivated in the RaspberryPi Config: sudo raspi-config Interface Options and select Legacy camera reboot https://www.raspberrypi.com/documentation/accessories/camera.html#re-enabling-the-legacy-stack or by changing in the /boot/config.txt a view Parameters. Remove camera_auto_detect and add the two lines. Than Reboot. File /boot/config.txt ... # Automatically load overlays for detected cameras #camera_auto_detect=1 start_x=1 gpu_mem=128 ... https://forums.raspberrypi.com/viewtopic.php?t=323390","title":"libcamera"},{"location":"Pirate-Spyglass/Theory/Camera%20and%20Driver/libcamera/#libcamera","text":"New open source camera driver that is used for RPI 11+ (Bullseye or later). Libcamera is a Linux focused driver that allows the usage of more complex cameras (not only RPi Camera ) and runs on the (ARM) processors. https://www.raspberrypi.com/documentation/accessories/camera.html The Libcamera will provided /dev/video0 and /dev/video1 as Device Nodes for the RPi Camera . These are Camera Serial Interface 2 (CSI2) \"Unicam\" that are provide and managed in combination with the V4L2 driver.","title":"libcamera"},{"location":"Pirate-Spyglass/Theory/Camera%20and%20Driver/libcamera/#usage","text":"Pictures libcamera-still Videos libcamera-vid https://www.raspberrypi.com/documentation/accessories/camera.html","title":"Usage"},{"location":"Pirate-Spyglass/Theory/Camera%20and%20Driver/libcamera/#problems","text":"The API changed a bit, so that currently the rpi camera cannot be used on the new RPI OS Version Bullseye. Also old Applications got problems and cant run on the rpi. https://raspberrypi.stackexchange.com/questions/135364/libcamera-stack-does-not-work-with-bullseye https://forums.raspberrypi.com/viewtopic.php?p=1958297","title":"Problems"},{"location":"Pirate-Spyglass/Theory/Camera%20and%20Driver/libcamera/#back-to-legacy-camera-stack","text":"The Old Driver can be reactivated in the RaspberryPi Config: sudo raspi-config Interface Options and select Legacy camera reboot https://www.raspberrypi.com/documentation/accessories/camera.html#re-enabling-the-legacy-stack or by changing in the /boot/config.txt a view Parameters. Remove camera_auto_detect and add the two lines. Than Reboot. File /boot/config.txt ... # Automatically load overlays for detected cameras #camera_auto_detect=1 start_x=1 gpu_mem=128 ... https://forums.raspberrypi.com/viewtopic.php?t=323390","title":"Back to Legacy Camera Stack"},{"location":"Pirate-Spyglass/Theory/Camera%20and%20Driver/rpicamera/","text":"Raspberry Pi Camera Module # There are two Version of the Module V1 and V2. The Camera gets connected by a ribbon cable and the driver on the Raspberry Pi is for RPi Buster or Older (RPI OS <=10) is it rapivid which is integrated in the GPU. RPi Bullseye (RPI OS 11) is it libcamera an Opensource Linux oriented camera Stack that run on the CPU. It is only a few months old and in this Project not supported. https://www.raspberrypi.com/documentation/accessories/camera.html#installing-a-raspberry-pi-camera https://projects.raspberrypi.org/en/projects/getting-started-with-picamera/2 The Camera on RPi-OS Buster (10) or earlier needs to activate the Camera in the config Menu sudo raspi-config . It can be found under Interfacing Options or by changing a parameter directly in boot.config . See in rapivid for more info. The Camera Driver libcamera on Bullseye can be deactivated and the old rapivid can be reactivated by using the config Menu sudo raspi-config . It can be found under Interfacing Options or by changing some parameter directly in boot.config . See in libcamera for more info. https://projects.raspberrypi.org/en/projects/getting-started-with-picamera/3 V4L2 adapter Driver bmc2835-v4l2 # This Driver Implementation provides some extra API for the v4l2 to Control the RPI Camera. Sometimes the special Driver for v4l2 Interface needs to be Installed and activated with: sudo modprobe bcm2835-v4l2 v4l2-ctl --list-formats -d /dev/video0 ioctl: VIDIOC_ENUM_FMT Type: Video Capture [0]: 'YU12' (Planar YUV 4:2:0) [1]: 'YUYV' (YUYV 4:2:2) [2]: 'RGB3' (24-bit RGB 8-8-8) [3]: 'JPEG' (JFIF JPEG, compressed) [4]: 'H264' (H.264, compressed) [5]: 'MJPG' (Motion-JPEG, compressed) [6]: 'YVYU' (YVYU 4:2:2) [7]: 'VYUY' (VYUY 4:2:2) [8]: 'UYVY' (UYVY 4:2:2) [9]: 'NV12' (Y/CbCr 4:2:0) [10]: 'BGR3' (24-bit BGR 8-8-8) [11]: 'YV12' (Planar YVU 4:2:0) [12]: 'NV21' (Y/CrCb 4:2:0) [13]: 'RX24' (32-bit XBGR 8-8-8-8) v4l2-ctl --all -d /dev/video0 Driver Info: Driver name : bm2835 mmal Card type : mmal service 16.1 Bus info : platform:bcm2835-v4l2-0 Driver version : 5.10.63 Capabilities : 0x85200005 Video Capture Video Overlay Read/Write Streaming Extended Pix Format Device Capabilities Device Caps : 0x05200005 Video Capture Video Overlay Read/Write Streaming Extended Pix Format Priority: 2 Video input : 0 (Camera 0: ok) Format Video Capture: Width/Height : 1280/720 Pixel Format : 'H264' (H.264) Field : None Bytes per Line : 0 Size Image : 921600 Colorspace : SMPTE 170M Transfer Function : Default (maps to Rec. 709) YCbCr/HSV Encoding: Default (maps to ITU-R 601) Quantization : Default (maps to Full Range) Flags : Format Video Overlay: Left/Top : 150/50 Width/Height: 1024/768 Field : None Chroma Key : 0x00000000 Global Alpha: 0xff Clip Count : 0 Clip Bitmap : No Framebuffer Format: Capability : Extern Overlay Global Alpha Flags : Overlay Matches Capture/Output Size Width : 1280 Height : 720 Pixel Format : 'YU12' Streaming Parameters Video Capture: Capabilities : timeperframe Frames per second: 30.000 (30000/1000) Read buffers : 1 User Controls brightness 0x00980900 (int) : min=0 max=100 step=1 default=50 value=50 flags=slider contrast 0x00980901 (int) : min=-100 max=100 step=1 default=0 value=0 flags=slider saturation 0x00980902 (int) : min=-100 max=100 step=1 default=0 value=0 flags=slider red_balance 0x0098090e (int) : min=1 max=7999 step=1 default=1000 value=1000 flags=slider blue_balance 0x0098090f (int) : min=1 max=7999 step=1 default=1000 value=1000 flags=slider horizontal_flip 0x00980914 (bool) : default=0 value=0 vertical_flip 0x00980915 (bool) : default=0 value=0 power_line_frequency 0x00980918 (menu) : min=0 max=3 default=1 value=1 0: Disabled 1: 50 Hz 2: 60 Hz 3: Auto sharpness 0x0098091b (int) : min=-100 max=100 step=1 default=0 value=0 flags=slider color_effects 0x0098091f (menu) : min=0 max=15 default=0 value=0 0: None 1: Black & White 2: Sepia 3: Negative 4: Emboss 5: Sketch 6: Sky Blue 7: Grass Green 8: Skin Whiten 9: Vivid 10: Aqua 11: Art Freeze 12: Silhouette 13: Solarization 14: Antique 15: Set Cb/Cr rotate 0x00980922 (int) : min=0 max=360 step=90 default=0 value=0 flags=modify-layout color_effects_cbcr 0x0098092a (int) : min=0 max=65535 step=1 default=32896 value=32896 Codec Controls video_bitrate_mode 0x009909ce (menu) : min=0 max=1 default=0 value=0 flags=update 0: Variable Bitrate 1: Constant Bitrate video_bitrate 0x009909cf (int) : min=25000 max=25000000 step=25000 default=10000000 value=1500000 repeat_sequence_header 0x009909e2 (bool) : default=0 value=0 h264_i_frame_period 0x00990a66 (int) : min=0 max=2147483647 step=1 default=60 value=60 h264_level 0x00990a67 (menu) : min=0 max=13 default=11 value=11 0: 1 1: 1b 2: 1.1 3: 1.2 4: 1.3 5: 2 6: 2.1 7: 2.2 8: 3 9: 3.1 10: 3.2 11: 4 12: 4.1 13: 4.2 h264_profile 0x00990a6b (menu) : min=0 max=4 default=4 value=4 0: Baseline 1: Constrained Baseline 2: Main 4: High Camera Controls auto_exposure 0x009a0901 (menu) : min=0 max=3 default=0 value=0 0: Auto Mode 1: Manual Mode exposure_time_absolute 0x009a0902 (int) : min=1 max=10000 step=1 default=1000 value=1000 exposure_dynamic_framerate 0x009a0903 (bool) : default=0 value=0 auto_exposure_bias 0x009a0913 (intmenu): min=0 max=24 default=12 value=12 0: -4000 (0xfffffffffffff060) 1: -3667 (0xfffffffffffff1ad) 2: -3333 (0xfffffffffffff2fb) 3: -3000 (0xfffffffffffff448) 4: -2667 (0xfffffffffffff595) 5: -2333 (0xfffffffffffff6e3) 6: -2000 (0xfffffffffffff830) 7: -1667 (0xfffffffffffff97d) 8: -1333 (0xfffffffffffffacb) 9: -1000 (0xfffffffffffffc18) 10: -667 (0xfffffffffffffd65) 11: -333 (0xfffffffffffffeb3) 12: 0 (0x0) 13: 333 (0x14d) 14: 667 (0x29b) 15: 1000 (0x3e8) 16: 1333 (0x535) 17: 1667 (0x683) 18: 2000 (0x7d0) 19: 2333 (0x91d) 20: 2667 (0xa6b) 21: 3000 (0xbb8) 22: 3333 (0xd05) 23: 3667 (0xe53) 24: 4000 (0xfa0) white_balance_auto_preset 0x009a0914 (menu) : min=0 max=10 default=1 value=1 0: Manual 1: Auto 2: Incandescent 3: Fluorescent 4: Fluorescent H 5: Horizon 6: Daylight 7: Flash 8: Cloudy 9: Shade 10: Greyworld image_stabilization 0x009a0916 (bool) : default=0 value=0 iso_sensitivity 0x009a0917 (intmenu): min=0 max=4 default=0 value=0 0: 0 (0x0) 1: 100000 (0x186a0) 2: 200000 (0x30d40) 3: 400000 (0x61a80) 4: 800000 (0xc3500) iso_sensitivity_auto 0x009a0918 (menu) : min=0 max=1 default=1 value=1 0: Manual 1: Auto exposure_metering_mode 0x009a0919 (menu) : min=0 max=3 default=0 value=0 0: Average 1: Center Weighted 2: Spot 3: Matrix scene_mode 0x009a091a (menu) : min=0 max=13 default=0 value=0 0: None 8: Night 11: Sports JPEG Compression Controls compression_quality 0x009d0903 (int) : min=1 max=100 step=1 default=30 value=30","title":"Raspberry Pi Camera Module"},{"location":"Pirate-Spyglass/Theory/Camera%20and%20Driver/rpicamera/#raspberry-pi-camera-module","text":"There are two Version of the Module V1 and V2. The Camera gets connected by a ribbon cable and the driver on the Raspberry Pi is for RPi Buster or Older (RPI OS <=10) is it rapivid which is integrated in the GPU. RPi Bullseye (RPI OS 11) is it libcamera an Opensource Linux oriented camera Stack that run on the CPU. It is only a few months old and in this Project not supported. https://www.raspberrypi.com/documentation/accessories/camera.html#installing-a-raspberry-pi-camera https://projects.raspberrypi.org/en/projects/getting-started-with-picamera/2 The Camera on RPi-OS Buster (10) or earlier needs to activate the Camera in the config Menu sudo raspi-config . It can be found under Interfacing Options or by changing a parameter directly in boot.config . See in rapivid for more info. The Camera Driver libcamera on Bullseye can be deactivated and the old rapivid can be reactivated by using the config Menu sudo raspi-config . It can be found under Interfacing Options or by changing some parameter directly in boot.config . See in libcamera for more info. https://projects.raspberrypi.org/en/projects/getting-started-with-picamera/3","title":"Raspberry Pi Camera Module"},{"location":"Pirate-Spyglass/Theory/Camera%20and%20Driver/rpicamera/#v4l2-adapter-driver-bmc2835-v4l2","text":"This Driver Implementation provides some extra API for the v4l2 to Control the RPI Camera. Sometimes the special Driver for v4l2 Interface needs to be Installed and activated with: sudo modprobe bcm2835-v4l2 v4l2-ctl --list-formats -d /dev/video0 ioctl: VIDIOC_ENUM_FMT Type: Video Capture [0]: 'YU12' (Planar YUV 4:2:0) [1]: 'YUYV' (YUYV 4:2:2) [2]: 'RGB3' (24-bit RGB 8-8-8) [3]: 'JPEG' (JFIF JPEG, compressed) [4]: 'H264' (H.264, compressed) [5]: 'MJPG' (Motion-JPEG, compressed) [6]: 'YVYU' (YVYU 4:2:2) [7]: 'VYUY' (VYUY 4:2:2) [8]: 'UYVY' (UYVY 4:2:2) [9]: 'NV12' (Y/CbCr 4:2:0) [10]: 'BGR3' (24-bit BGR 8-8-8) [11]: 'YV12' (Planar YVU 4:2:0) [12]: 'NV21' (Y/CrCb 4:2:0) [13]: 'RX24' (32-bit XBGR 8-8-8-8) v4l2-ctl --all -d /dev/video0 Driver Info: Driver name : bm2835 mmal Card type : mmal service 16.1 Bus info : platform:bcm2835-v4l2-0 Driver version : 5.10.63 Capabilities : 0x85200005 Video Capture Video Overlay Read/Write Streaming Extended Pix Format Device Capabilities Device Caps : 0x05200005 Video Capture Video Overlay Read/Write Streaming Extended Pix Format Priority: 2 Video input : 0 (Camera 0: ok) Format Video Capture: Width/Height : 1280/720 Pixel Format : 'H264' (H.264) Field : None Bytes per Line : 0 Size Image : 921600 Colorspace : SMPTE 170M Transfer Function : Default (maps to Rec. 709) YCbCr/HSV Encoding: Default (maps to ITU-R 601) Quantization : Default (maps to Full Range) Flags : Format Video Overlay: Left/Top : 150/50 Width/Height: 1024/768 Field : None Chroma Key : 0x00000000 Global Alpha: 0xff Clip Count : 0 Clip Bitmap : No Framebuffer Format: Capability : Extern Overlay Global Alpha Flags : Overlay Matches Capture/Output Size Width : 1280 Height : 720 Pixel Format : 'YU12' Streaming Parameters Video Capture: Capabilities : timeperframe Frames per second: 30.000 (30000/1000) Read buffers : 1 User Controls brightness 0x00980900 (int) : min=0 max=100 step=1 default=50 value=50 flags=slider contrast 0x00980901 (int) : min=-100 max=100 step=1 default=0 value=0 flags=slider saturation 0x00980902 (int) : min=-100 max=100 step=1 default=0 value=0 flags=slider red_balance 0x0098090e (int) : min=1 max=7999 step=1 default=1000 value=1000 flags=slider blue_balance 0x0098090f (int) : min=1 max=7999 step=1 default=1000 value=1000 flags=slider horizontal_flip 0x00980914 (bool) : default=0 value=0 vertical_flip 0x00980915 (bool) : default=0 value=0 power_line_frequency 0x00980918 (menu) : min=0 max=3 default=1 value=1 0: Disabled 1: 50 Hz 2: 60 Hz 3: Auto sharpness 0x0098091b (int) : min=-100 max=100 step=1 default=0 value=0 flags=slider color_effects 0x0098091f (menu) : min=0 max=15 default=0 value=0 0: None 1: Black & White 2: Sepia 3: Negative 4: Emboss 5: Sketch 6: Sky Blue 7: Grass Green 8: Skin Whiten 9: Vivid 10: Aqua 11: Art Freeze 12: Silhouette 13: Solarization 14: Antique 15: Set Cb/Cr rotate 0x00980922 (int) : min=0 max=360 step=90 default=0 value=0 flags=modify-layout color_effects_cbcr 0x0098092a (int) : min=0 max=65535 step=1 default=32896 value=32896 Codec Controls video_bitrate_mode 0x009909ce (menu) : min=0 max=1 default=0 value=0 flags=update 0: Variable Bitrate 1: Constant Bitrate video_bitrate 0x009909cf (int) : min=25000 max=25000000 step=25000 default=10000000 value=1500000 repeat_sequence_header 0x009909e2 (bool) : default=0 value=0 h264_i_frame_period 0x00990a66 (int) : min=0 max=2147483647 step=1 default=60 value=60 h264_level 0x00990a67 (menu) : min=0 max=13 default=11 value=11 0: 1 1: 1b 2: 1.1 3: 1.2 4: 1.3 5: 2 6: 2.1 7: 2.2 8: 3 9: 3.1 10: 3.2 11: 4 12: 4.1 13: 4.2 h264_profile 0x00990a6b (menu) : min=0 max=4 default=4 value=4 0: Baseline 1: Constrained Baseline 2: Main 4: High Camera Controls auto_exposure 0x009a0901 (menu) : min=0 max=3 default=0 value=0 0: Auto Mode 1: Manual Mode exposure_time_absolute 0x009a0902 (int) : min=1 max=10000 step=1 default=1000 value=1000 exposure_dynamic_framerate 0x009a0903 (bool) : default=0 value=0 auto_exposure_bias 0x009a0913 (intmenu): min=0 max=24 default=12 value=12 0: -4000 (0xfffffffffffff060) 1: -3667 (0xfffffffffffff1ad) 2: -3333 (0xfffffffffffff2fb) 3: -3000 (0xfffffffffffff448) 4: -2667 (0xfffffffffffff595) 5: -2333 (0xfffffffffffff6e3) 6: -2000 (0xfffffffffffff830) 7: -1667 (0xfffffffffffff97d) 8: -1333 (0xfffffffffffffacb) 9: -1000 (0xfffffffffffffc18) 10: -667 (0xfffffffffffffd65) 11: -333 (0xfffffffffffffeb3) 12: 0 (0x0) 13: 333 (0x14d) 14: 667 (0x29b) 15: 1000 (0x3e8) 16: 1333 (0x535) 17: 1667 (0x683) 18: 2000 (0x7d0) 19: 2333 (0x91d) 20: 2667 (0xa6b) 21: 3000 (0xbb8) 22: 3333 (0xd05) 23: 3667 (0xe53) 24: 4000 (0xfa0) white_balance_auto_preset 0x009a0914 (menu) : min=0 max=10 default=1 value=1 0: Manual 1: Auto 2: Incandescent 3: Fluorescent 4: Fluorescent H 5: Horizon 6: Daylight 7: Flash 8: Cloudy 9: Shade 10: Greyworld image_stabilization 0x009a0916 (bool) : default=0 value=0 iso_sensitivity 0x009a0917 (intmenu): min=0 max=4 default=0 value=0 0: 0 (0x0) 1: 100000 (0x186a0) 2: 200000 (0x30d40) 3: 400000 (0x61a80) 4: 800000 (0xc3500) iso_sensitivity_auto 0x009a0918 (menu) : min=0 max=1 default=1 value=1 0: Manual 1: Auto exposure_metering_mode 0x009a0919 (menu) : min=0 max=3 default=0 value=0 0: Average 1: Center Weighted 2: Spot 3: Matrix scene_mode 0x009a091a (menu) : min=0 max=13 default=0 value=0 0: None 8: Night 11: Sports JPEG Compression Controls compression_quality 0x009d0903 (int) : min=1 max=100 step=1 default=30 value=30","title":"V4L2 adapter Driver bmc2835-v4l2"},{"location":"Pirate-Spyglass/Theory/Camera%20and%20Driver/v4l2/","text":"V4L2 # Main Video/Camera/Audio Device Driver on many Linux Systems. It manages the Device Nodes in /dev/* . Provides many Interfaces for IO Control of the Devices. With v4l2-ctl many settings can be done or Formats can be checked. A Device Nodes Provided Formats can be checked with: v4l2-ctl --list-formats -d /dev/video0 Almost everything Important can be extracted by: v4l2-ctl --all -d /dev/video0","title":"V4L2"},{"location":"Pirate-Spyglass/Theory/Camera%20and%20Driver/v4l2/#v4l2","text":"Main Video/Camera/Audio Device Driver on many Linux Systems. It manages the Device Nodes in /dev/* . Provides many Interfaces for IO Control of the Devices. With v4l2-ctl many settings can be done or Formats can be checked. A Device Nodes Provided Formats can be checked with: v4l2-ctl --list-formats -d /dev/video0 Almost everything Important can be extracted by: v4l2-ctl --all -d /dev/video0","title":"V4L2"},{"location":"Pirate-Spyglass/Theory/Video/avcff/","text":"MPEG AVC File Format # The Shown structure and values are from the currently used Project BerryMSE and contains almost the complete possible AVC File Format defined in MPEG-4 Part 15. There is still room to add, change or remove Parts of it. More detailed Information can be found in the Public Document to Common File Format & Media Formats Specification https://www.uvcentral.com/files/CFFMediaFormat-2_1.pdf . It is a extension of the ISOBMFF and extends it by a few more Boxes, but provides good information to each Box. Fragmented Movie Architecture: Source: https://alexzambelli.com/blog/wp-content/uploads/smooth_slide16.png In the Project the FTYP, MOOV, MOOF and MDAT Boxes are used to send the Metadata and Media Data of the H264 Video Stream. MOOV and MOOF contain more Boxes and in this project a lot of them are implemented. Only a few Boxes are active used by us, but many are just filled with default Values. Ee don't know what impact it has to use change, remove or add Boxes. The MFRA Box isn't used in this project. The Boxes of the AVC File Format Structure and the used sub Boxes are shown bellow. The Bytestream is displayed on the right. Not all values are fixed so some will change and the bytes are only listed as Array Index of the Variable. FTYP Box (File Type Box) # Defines Type of File, Version and Compatible ISO Files. FTYP Box (File Type Box) Length of Box, x = length of Box Content, 4byte, x[3] ... x[0] Name of Box, \"ftyp\", 4byte, 'f' 't' 'y' 'p' major brand,\"isom\", 4byte, 'i' 's' 'o' 'm' minor version, x = 0x200, 4byte, 0x00 0x00 0x02 0x00 compatible brands, \"isomiso2iso5avc1mp41\", nbyte, \"isomiso2iso5avc1mp41\" MOOV Box (Movie Box, Movie Metadata Box) # Metadata Container for Presentation. MOOV Box (Movie Box) Length of Box, x = length of Box Content, 4byte, x[3] ... x[0] Name of Box, \"moov\", 4byte, 'm' 'o' 'o' 'v' MVHD Box (Movie Header Box) Length of Box, x = length of Box Content, 4byte, x[3] ... x[0] Name of Box, \"mvhd\", 4byte, 'm' 'v' 'h' 'd' version and flags, x = 0, 4byte, 0x00 0x00 0x00 0x00 creation time, x = 0, 4byte, 0x00 0x00 0x00 0x00 modification time, x = 0, 4byte, 0x00 0x00 0x00 0x00 timescale, x = 1000, 4byte, 0x00 0x00 0x03 0xe8 duration (all 1s == unknown), x = 0, 4byte, 0x00 0x00 0x00 0x00 rate (1.0 == normal), x = 0x00010000, 4byte, 0x00 0x01 0x00 0x00 volume (1.0 == normal), x = 0x0100, 2byte, 0x01 0x00 reserved, x = 0, 2byte, 0x00 0x00 reserved, x = 0, 4byte, 0x00 0x00 0x00 0x00 reserved, x = 0, 4byte, 0x00 0x00 0x00 0x00 matrix, x = 0x00010000, 4byte, 0x00 0x01 0x00 0x00 matrix, x = 0, 4byte, 0x00 0x00 0x00 0x00 matrix, x = 0, 4byte, 0x00 0x00 0x00 0x00 matrix, x = 0, 4byte, 0x00 0x00 0x00 0x00 matrix, x = 0x00010000, 4byte, 0x00 0x01 0x00 0x00 matrix, x = 0, 4byte, 0x00 0x00 0x00 0x00 matrix, x = 0, 4byte, 0x00 0x00 0x00 0x00 matrix, x = 0, 4byte, 0x00 0x00 0x00 0x00 matrix, x = 0x40000000, 4byte, 0x40 0x00 0x00 0x00 pre-defined, x = 0, 4byte, 0x00 0x00 0x00 0x00 pre-defined, x = 0, 4byte, 0x00 0x00 0x00 0x00 pre-defined, x = 0, 4byte, 0x00 0x00 0x00 0x00 pre-defined, x = 0, 4byte, 0x00 0x00 0x00 0x00 pre-defined, x = 0, 4byte, 0x00 0x00 0x00 0x00 pre-defined, x = 0, 4byte, 0x00 0x00 0x00 0x00 next track id, x = -1, 4byte, 0xff 0xff 0xff 0xff TRAK Box (Track Box) Length of Box, x = length of Box Content, 4byte, x[3] ... x[0] Name of Box, \"trak\", 4byte, 't' 'r' 'a' 'k' TKHD Box (Track Header Box) Length of Box, x = length of Box Content, 4byte, x[3] ... x[0] Name of Box, \"tkhd\", 4byte, 't' 'k' 'h' 'd' version and flags (track enabled), x = 7, 4byte, 0x00 0x00 0x00 0x07 creation time, x = 0, 4byte, 0x00 0x00 0x00 0x00 modification time, x = 0, 4byte, 0x00 0x00 0x00 0x00 track id, x = 1, 4byte, 0x00 0x00 0x00 0x01 reserved, x = 0, 4byte, 0x00 0x00 0x00 0x00 duration, x = 0, 4byte, 0x00 0x00 0x00 0x00 reserved, x = 0, 4byte, 0x00 0x00 0x00 0x00 reserved, x = 0, 4byte, 0x00 0x00 0x00 0x00 layer, x = 0, 2byte, 0x00 0x00 alternate group, x = 0, 2byte, 0x00 0x00 volume (ignored for video tracks), x = 0, 2byte, 0x00 0x00 reserved, x = 0, 2byte, 0x00 0x00 matrix, x = 0x00010000, 4byte, 0x00 0x01 0x00 0x00 matrix, x = 0, 4byte, 0x00 0x00 0x00 0x00 matrix, x = 0, 4byte, 0x00 0x00 0x00 0x00 matrix, x = 0, 4byte, 0x00 0x00 0x00 0x00 matrix, x = 0x00010000, 4byte, 0x00 0x01 0x00 0x00 matrix, x = 0, 4byte, 0x00 0x00 0x00 0x00 matrix, x = 0, 4byte, 0x00 0x00 0x00 0x00 matrix, x = 0, 4byte, 0x00 0x00 0x00 0x00 matrix, x = 0x40000000, 4byte, 0x40 0x00 0x00 0x00 width (fixed-point 16.16 format), x = width<<16, 4byte, x[3] ... x[0] height (fixed-point 16.16 format), x = height<<16, 4byte, x[3] ... x[0] MDIA Box (Media Box) Length of Box, x = length of Box Content, 4byte, x[3] ... x[0] Name of Box, \"mdia\", 4byte, 'm' 'd' 'i' 'a' MDHD Box (Media Header Box) Length of Box, x = length of Box Content, 4byte, x[3] ... x[0] Name of Box, \"mdhd\", 4byte, 'm' 'd' 'h' 'd' version and flags, x = 0, 4byte, 0x00 0x00 0x00 0x00 creation time, x = 0, 4byte, 0x00 0x00 0x00 0x00 modification time, x = 0, 4byte, 0x00 0x00 0x00 0x00 timescale, x = 1000, 4byte, 0x00 0x00 0x03 0xe8 duration, x = 0, 4byte, 0x00 0x00 0x00 0x00 language ('und' == undefined), x = 0x55c4, 2byte, 0x55 0xc4 pre-defined, x = 0, 2byte, 0x00 0x00 HDLR Box (Handler Box) Length of Box, x = length of Box Content, 4byte, x[3] ... x[0] Name of Box, \"hdlr\", 4byte, 'h' 'd' 'l' 'r' version and flags, x = 0, 4byte, 0x00 0x00 0x00 0x00 pre-defined, x = 0, 4byte, 0x00 0x00 0x00 0x00 handler type, \"vide\", 4byte, 'v' 'i' 'd' 'e' reserved, x = 0, 4byte, 0x00 0x00 0x00 0x00 reserved, x = 0, 4byte, 0x00 0x00 0x00 0x00 reserved, x = 0, 4byte, 0x00 0x00 0x00 0x00 name, \"MicroMSE Video Handler\", nbyte, \"MicroMSE Video Handler\" null-terminator, x = 0, 1byte, 0x00 MINF Box (Media Information Box) Length of Box, x = length of Box Content, 4byte, x[3] ... x[0] Name of Box, \"minf\", 4byte, 'm' 'i' 'n' 'f' VMHD Box (Video Media Header Box) Length of Box, x = length of Box Content, 4byte, x[3] ... x[0] Name of Box, \"vmhd\", 4byte, 'v' 'm' 'h' 'd' version and flags, x = 1, 4byte, 0x00 0x00 0x00 0x01 graphics mode, x = 0, 2byte, 0x00 0x00 opcolor, x = 0, 2byte, 0x00 0x00 opcolor, x = 0, 2byte, 0x00 0x00 opcolor, x = 0, 2byte, 0x00 0x00 DINF Box (Data Information Box) Length of Box, x = length of Box Content, 4byte, x[3] ... x[0] Name of Box, \"dinf\", 4byte, 'd' 'i' 'n' 'f' DREF Box (Data Reference Box) Length of Box, x = length of Box Content, 4byte, x[3] ... x[0] Name of Box, \"dref\", 4byte, 'd' 'r' 'e' 'f' version and flags, x = 0, 4byte, 0x00 0x00 0x00 0x00 entry count, x = 1, 4byte, 0x00 0x00 0x00 0x01 URL Box (URL Box) Length of Box, x = length of Box Content, 4byte, x[3] ... x[0] Name of Box, \"url \", 4byte, 'u' 'r' 'l' ' ' version and flags, x = 1, 4byte, 0x00 0x00 0x00 0x01 STBL Box (Sample Table Box) Length of Box, x = length of Box Content, 4byte, x[3] ... x[0] Name of Box, \"stbl\", 4byte, 's' 't' 'b' 'l' STSD Box (Sample Description Box) Length of Box, x = length of Box Content, 4byte, x[3] ... x[0] Name of Box, \"stsd\", 4byte, 's' 't' 's' 'd' reserved, x = 0, 6byte, 0x00 0x00 0x00 0x00 0x00 0x00 data reference index, x = 1, 2byte, 0x00 0x01 AVC1 Box (Advanced Codec (H264) Box) Length of Box, x = length of Box Content, 4byte, x[3] ... x[0] Name of Box, \"avc1\", 4byte, 'a' 'v' 'c' '1' reserved, x = 0, 6byte, 0x00 0x00 0x00 0x00 0x00 0x00 data reference index, x = 1, 2byte, 0x00 0x01 pre-defined, x = 0, 2byte, 0x00 0x00 reserved, x = 0, 2byte, 0x00 0x00 pre-defined, x = 0, 4byte, 0x00 0x00 0x00 0x00 pre-defined, x = 0, 4byte, 0x00 0x00 0x00 0x00 pre-defined, x = 0, 4byte, 0x00 0x00 0x00 0x00 width, x = width, 2byte, x[1] ... x[0] height, x = height, 2byte, x[1] ... x[0] horizontal resolution: 72 dpi, x = 0x00480000, 4byte, 0x00 0x48 0x00 0x00 vertical resolution: 72 dpi, x = 0x00480000, 4byte, 0x00 0x48 0x00 0x00 data size: 0, x = 0, 4byte, 0x00 0x00 0x00 0x00 frame count: 1, x = 1, 2byte, 0x00 0x01 compressor Length, x = 0, 32byte, 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 depth, x = 0x18, 2byte, 0x00 0x18 pre-defined, x = 0xffff, 2byte, 0xff 0xff AVCC Box (AVC Configuration Box) Length of Box, x = length of Box Content, 4byte, x[3] ... x[0] Name of Box, \"avcC\", 4byte, 'a' 'v' 'c' 'C' configuration version, x = 1, 1byte, 0x01 H.264 profile (0x64 == high), x = 0x64, 1byte, 0x64 H.264 profile compatibility, x = 0x00, 1byte, 0x00 H.264 level (0x28 == 4.0), x = 0x28, 1byte, 0x28 nal unit Name - 1 (upper 6 bits == 1), x = 0xff, 1byte, 0xff number of sps (upper 3 bits == 1), x = 0xe1, 1byte, 0xe1 len of sps, x = lengthSPS, 2byte, x[1] ... x[0] sps, x = sps, nbyte, x[n] ... x[0] number of pps, x = 1, 1byte, 0x01</div len pps, x = lengthPPS, 2byte, x[1] ... x[0] pps, x = pps, nbyte, x[n] ... x[0] STSZ Box (Sample Size Box) Length of Box, x = length of Box Content, 4byte, x[3] ... x[0] Name of Box, \"stsz\", 4byte, 's' 't' 's' 'z' version and flags, x = 0, 4byte, 0x00 0x00 0x00 0x00 sample size, x = 0, 4byte, 0x00 0x00 0x00 0x00 sample count, x = 0, 4byte, 0x00 0x00 0x00 0x00 STSC Box (Sample to Chunk Box) Length of Box, x = length of Box Content, 4byte, x[3] ... x[0] Name of Box, \"stsc\", 4byte, 's' 't' 's' 'c' version and flags, x = 0, 4byte, 0x00 0x00 0x00 0x00 entry count, x = 0, 4byte, 0x00 0x00 0x00 0x00 STTS Box (Time to Sample Box) Length of Box, x = length of Box Content, 4byte, x[3] ... x[0] Name of Box, \"stts\", 4byte, 's' 't' 't' 's' version and flags, x = 0, 4byte, 0x00 0x00 0x00 0x00 entry count, x = 0, 4byte, 0x00 0x00 0x00 0x00 STCO Box (Chunk Offset Box) Length of Box, x = length of Box Content, 4byte, x[3] ... x[0] Name of Box, \"stco\", 4byte, 's' 't' 'c' 'o' version and flags, x = 0, 4byte, 0x00 0x00 0x00 0x00 entry count, x = 0, 4byte, 0x00 0x00 0x00 0x00 MVEX Box (Movie Extends Box) Length of Box, x = length of Box Content, 4byte, x[3] ... x[0] Name of Box, \"mvex\", 4byte, 'm' 'v' 'e' 'x' MEHD Box (Movie Extends Header Box) Length of Box, x = length of Box Content, 4byte, x[3] ... x[0] Name of Box, \"mehd\", 4byte, 'm' 'e' 'h' 'd' version and flags, x = 0, 4byte, 0x00 0x00 0x00 0x00 fragment duration, x = 0, 4byte, 0x00 0x00 0x00 0x00 TREX Box (Track Extends Box) Length of Box, x = length of Box Content, 4byte, x[3] ... x[0] Name of Box, \"trex\", 4byte, 't' 'r' 'e' 'x' version and flags, x = 0, 4byte, 0x00 0x00 0x00 0x00 track id, x = 1, 4byte, 0x00 0x00 0x00 0x01 default sample description index, x = 1, 4byte, 0x00 0x00 0x00 0x01 default sample duration, x = 0, 4byte, 0x00 0x00 0x00 0x00 default sample size, x = 0, 4byte, 0x00 0x00 0x00 0x00 default sample flags, x = 0x00010000, 4byte, 0x00 0x01 0x00 0x00 AVC1 and AVCC Box # The most Important Boxes of the MOOV for the H264 Streaming are the AVC1 and AVCC Box. They contain needed Information for the Decoder, which settings/parameter are used. This Includes Profile, Constraints, Level, SPS and PPS. More info to this can be found in H.264 . MOOF Box (Movie Fragment Box) # The MOOF Box holds the information to a Movie Fragment, which is in the following MDAT Object. MOOF Box (Movie Fragment Box) Length of Box, x = length of Box Content, 4byte, x[3] ... x[0] Name of Box, \"moof\", 4byte, 'm' 'o' 'o' 'f' MFHD Box (Movie Fragment Header Box) Length of Box, x = length of Box Content, 4byte, x[3] ... x[0] Name of Box, \"mfhd\", 4byte, 'm' 'f' 'h' 'd' version and flags, x = 0, 4byte, 0x00 0x00 0x00 0x00 sequence number, x = sequence, 4byte, x[3] ... x[0] TRAF Box (Track Fragment Box) Length of Box, x = length of Box Content, 4byte, x[3] ... x[0] Name of Box, \"traf\", 4byte, 't' 'r' 'a' 'f' TFHD Box (Track Fragment Header Box) Length of Box, x = length of Box Content, 4byte, x[3] ... x[0] Name of Box, \"tfhd\", 4byte, 't' 'f' 'h' 'd' version and flags, x = 0x020020, 4byte, 0x00 0x02 0x00 0x20 track ID, x = 1, 4byte, 0x00 0x00 0x00 0x01 default sample flags, x = 0x01010000, 4byte, 0x01 0x01 0x00 0x00 TFDT Box (Track Fragment Base Media Decode Time Box) Length of Box, x = length of Box Content, 4byte, x[3] ... x[0] Name of Box, \"tfdt\", 4byte, 't' 'f' 'd' 't' version and flags, x = 0x01000000, 4byte, 0x01 0x00 0x00 0x00 base media decode time, x = 330*sequence, 8byte, x[7] ... x[0] TRUN Box (Track Fragment Run Box) Length of Box, x = length of Box Content, 4byte, x[3] ... x[0] Name of Box, \"trun\", 4byte, 't' 'r' 'u' 'n' version and flags, x = 0x00000305, 4byte, 0x00 0x00 0x01 0x31 sample count, x = 1, 4byte, 0x00 0x00 0x00 0x01 data offset, x = 0x70, 4byte, 0x00 0x00 0x00 0x70 first sample flags (i-frame or not), x = 0x02000000 or x = 0x01010000 , 4byte, 0x20 0x00 0x00 0x00 or 0x01 0x01 0x00 0x00 sample duration, x = 330, 4byte, 0x00 0x00 0x01 0x4a sample size, x = 4+lengthData, 4byte, x[3] ... x[0] MDAT Box (Media Data Box) # The Media Box holds an Media Sample. In this Project this is a NAL Unit. MDAT Box (Media Data Box) Length of Box, x = length of Box Content, 4byte, x[3] ... x[0] Name of Box, \"mdat\", 4byte, 'm' 'd' 'a' 't' data length, x = lengthData, 4byte, x[3] ... x[0] data, x = data, nbyte, x[0] ... x[n]","title":"MPEG AVC File Format"},{"location":"Pirate-Spyglass/Theory/Video/avcff/#mpeg-avc-file-format","text":"The Shown structure and values are from the currently used Project BerryMSE and contains almost the complete possible AVC File Format defined in MPEG-4 Part 15. There is still room to add, change or remove Parts of it. More detailed Information can be found in the Public Document to Common File Format & Media Formats Specification https://www.uvcentral.com/files/CFFMediaFormat-2_1.pdf . It is a extension of the ISOBMFF and extends it by a few more Boxes, but provides good information to each Box. Fragmented Movie Architecture: Source: https://alexzambelli.com/blog/wp-content/uploads/smooth_slide16.png In the Project the FTYP, MOOV, MOOF and MDAT Boxes are used to send the Metadata and Media Data of the H264 Video Stream. MOOV and MOOF contain more Boxes and in this project a lot of them are implemented. Only a few Boxes are active used by us, but many are just filled with default Values. Ee don't know what impact it has to use change, remove or add Boxes. The MFRA Box isn't used in this project. The Boxes of the AVC File Format Structure and the used sub Boxes are shown bellow. The Bytestream is displayed on the right. Not all values are fixed so some will change and the bytes are only listed as Array Index of the Variable.","title":"MPEG AVC File Format"},{"location":"Pirate-Spyglass/Theory/Video/avcff/#ftyp-box-file-type-box","text":"Defines Type of File, Version and Compatible ISO Files. FTYP Box (File Type Box) Length of Box, x = length of Box Content, 4byte, x[3] ... x[0] Name of Box, \"ftyp\", 4byte, 'f' 't' 'y' 'p' major brand,\"isom\", 4byte, 'i' 's' 'o' 'm' minor version, x = 0x200, 4byte, 0x00 0x00 0x02 0x00 compatible brands, \"isomiso2iso5avc1mp41\", nbyte, \"isomiso2iso5avc1mp41\"","title":"FTYP Box (File Type Box)"},{"location":"Pirate-Spyglass/Theory/Video/avcff/#moov-box-movie-box-movie-metadata-box","text":"Metadata Container for Presentation. MOOV Box (Movie Box) Length of Box, x = length of Box Content, 4byte, x[3] ... x[0] Name of Box, \"moov\", 4byte, 'm' 'o' 'o' 'v' MVHD Box (Movie Header Box) Length of Box, x = length of Box Content, 4byte, x[3] ... x[0] Name of Box, \"mvhd\", 4byte, 'm' 'v' 'h' 'd' version and flags, x = 0, 4byte, 0x00 0x00 0x00 0x00 creation time, x = 0, 4byte, 0x00 0x00 0x00 0x00 modification time, x = 0, 4byte, 0x00 0x00 0x00 0x00 timescale, x = 1000, 4byte, 0x00 0x00 0x03 0xe8 duration (all 1s == unknown), x = 0, 4byte, 0x00 0x00 0x00 0x00 rate (1.0 == normal), x = 0x00010000, 4byte, 0x00 0x01 0x00 0x00 volume (1.0 == normal), x = 0x0100, 2byte, 0x01 0x00 reserved, x = 0, 2byte, 0x00 0x00 reserved, x = 0, 4byte, 0x00 0x00 0x00 0x00 reserved, x = 0, 4byte, 0x00 0x00 0x00 0x00 matrix, x = 0x00010000, 4byte, 0x00 0x01 0x00 0x00 matrix, x = 0, 4byte, 0x00 0x00 0x00 0x00 matrix, x = 0, 4byte, 0x00 0x00 0x00 0x00 matrix, x = 0, 4byte, 0x00 0x00 0x00 0x00 matrix, x = 0x00010000, 4byte, 0x00 0x01 0x00 0x00 matrix, x = 0, 4byte, 0x00 0x00 0x00 0x00 matrix, x = 0, 4byte, 0x00 0x00 0x00 0x00 matrix, x = 0, 4byte, 0x00 0x00 0x00 0x00 matrix, x = 0x40000000, 4byte, 0x40 0x00 0x00 0x00 pre-defined, x = 0, 4byte, 0x00 0x00 0x00 0x00 pre-defined, x = 0, 4byte, 0x00 0x00 0x00 0x00 pre-defined, x = 0, 4byte, 0x00 0x00 0x00 0x00 pre-defined, x = 0, 4byte, 0x00 0x00 0x00 0x00 pre-defined, x = 0, 4byte, 0x00 0x00 0x00 0x00 pre-defined, x = 0, 4byte, 0x00 0x00 0x00 0x00 next track id, x = -1, 4byte, 0xff 0xff 0xff 0xff TRAK Box (Track Box) Length of Box, x = length of Box Content, 4byte, x[3] ... x[0] Name of Box, \"trak\", 4byte, 't' 'r' 'a' 'k' TKHD Box (Track Header Box) Length of Box, x = length of Box Content, 4byte, x[3] ... x[0] Name of Box, \"tkhd\", 4byte, 't' 'k' 'h' 'd' version and flags (track enabled), x = 7, 4byte, 0x00 0x00 0x00 0x07 creation time, x = 0, 4byte, 0x00 0x00 0x00 0x00 modification time, x = 0, 4byte, 0x00 0x00 0x00 0x00 track id, x = 1, 4byte, 0x00 0x00 0x00 0x01 reserved, x = 0, 4byte, 0x00 0x00 0x00 0x00 duration, x = 0, 4byte, 0x00 0x00 0x00 0x00 reserved, x = 0, 4byte, 0x00 0x00 0x00 0x00 reserved, x = 0, 4byte, 0x00 0x00 0x00 0x00 layer, x = 0, 2byte, 0x00 0x00 alternate group, x = 0, 2byte, 0x00 0x00 volume (ignored for video tracks), x = 0, 2byte, 0x00 0x00 reserved, x = 0, 2byte, 0x00 0x00 matrix, x = 0x00010000, 4byte, 0x00 0x01 0x00 0x00 matrix, x = 0, 4byte, 0x00 0x00 0x00 0x00 matrix, x = 0, 4byte, 0x00 0x00 0x00 0x00 matrix, x = 0, 4byte, 0x00 0x00 0x00 0x00 matrix, x = 0x00010000, 4byte, 0x00 0x01 0x00 0x00 matrix, x = 0, 4byte, 0x00 0x00 0x00 0x00 matrix, x = 0, 4byte, 0x00 0x00 0x00 0x00 matrix, x = 0, 4byte, 0x00 0x00 0x00 0x00 matrix, x = 0x40000000, 4byte, 0x40 0x00 0x00 0x00 width (fixed-point 16.16 format), x = width<<16, 4byte, x[3] ... x[0] height (fixed-point 16.16 format), x = height<<16, 4byte, x[3] ... x[0] MDIA Box (Media Box) Length of Box, x = length of Box Content, 4byte, x[3] ... x[0] Name of Box, \"mdia\", 4byte, 'm' 'd' 'i' 'a' MDHD Box (Media Header Box) Length of Box, x = length of Box Content, 4byte, x[3] ... x[0] Name of Box, \"mdhd\", 4byte, 'm' 'd' 'h' 'd' version and flags, x = 0, 4byte, 0x00 0x00 0x00 0x00 creation time, x = 0, 4byte, 0x00 0x00 0x00 0x00 modification time, x = 0, 4byte, 0x00 0x00 0x00 0x00 timescale, x = 1000, 4byte, 0x00 0x00 0x03 0xe8 duration, x = 0, 4byte, 0x00 0x00 0x00 0x00 language ('und' == undefined), x = 0x55c4, 2byte, 0x55 0xc4 pre-defined, x = 0, 2byte, 0x00 0x00 HDLR Box (Handler Box) Length of Box, x = length of Box Content, 4byte, x[3] ... x[0] Name of Box, \"hdlr\", 4byte, 'h' 'd' 'l' 'r' version and flags, x = 0, 4byte, 0x00 0x00 0x00 0x00 pre-defined, x = 0, 4byte, 0x00 0x00 0x00 0x00 handler type, \"vide\", 4byte, 'v' 'i' 'd' 'e' reserved, x = 0, 4byte, 0x00 0x00 0x00 0x00 reserved, x = 0, 4byte, 0x00 0x00 0x00 0x00 reserved, x = 0, 4byte, 0x00 0x00 0x00 0x00 name, \"MicroMSE Video Handler\", nbyte, \"MicroMSE Video Handler\" null-terminator, x = 0, 1byte, 0x00 MINF Box (Media Information Box) Length of Box, x = length of Box Content, 4byte, x[3] ... x[0] Name of Box, \"minf\", 4byte, 'm' 'i' 'n' 'f' VMHD Box (Video Media Header Box) Length of Box, x = length of Box Content, 4byte, x[3] ... x[0] Name of Box, \"vmhd\", 4byte, 'v' 'm' 'h' 'd' version and flags, x = 1, 4byte, 0x00 0x00 0x00 0x01 graphics mode, x = 0, 2byte, 0x00 0x00 opcolor, x = 0, 2byte, 0x00 0x00 opcolor, x = 0, 2byte, 0x00 0x00 opcolor, x = 0, 2byte, 0x00 0x00 DINF Box (Data Information Box) Length of Box, x = length of Box Content, 4byte, x[3] ... x[0] Name of Box, \"dinf\", 4byte, 'd' 'i' 'n' 'f' DREF Box (Data Reference Box) Length of Box, x = length of Box Content, 4byte, x[3] ... x[0] Name of Box, \"dref\", 4byte, 'd' 'r' 'e' 'f' version and flags, x = 0, 4byte, 0x00 0x00 0x00 0x00 entry count, x = 1, 4byte, 0x00 0x00 0x00 0x01 URL Box (URL Box) Length of Box, x = length of Box Content, 4byte, x[3] ... x[0] Name of Box, \"url \", 4byte, 'u' 'r' 'l' ' ' version and flags, x = 1, 4byte, 0x00 0x00 0x00 0x01 STBL Box (Sample Table Box) Length of Box, x = length of Box Content, 4byte, x[3] ... x[0] Name of Box, \"stbl\", 4byte, 's' 't' 'b' 'l' STSD Box (Sample Description Box) Length of Box, x = length of Box Content, 4byte, x[3] ... x[0] Name of Box, \"stsd\", 4byte, 's' 't' 's' 'd' reserved, x = 0, 6byte, 0x00 0x00 0x00 0x00 0x00 0x00 data reference index, x = 1, 2byte, 0x00 0x01 AVC1 Box (Advanced Codec (H264) Box) Length of Box, x = length of Box Content, 4byte, x[3] ... x[0] Name of Box, \"avc1\", 4byte, 'a' 'v' 'c' '1' reserved, x = 0, 6byte, 0x00 0x00 0x00 0x00 0x00 0x00 data reference index, x = 1, 2byte, 0x00 0x01 pre-defined, x = 0, 2byte, 0x00 0x00 reserved, x = 0, 2byte, 0x00 0x00 pre-defined, x = 0, 4byte, 0x00 0x00 0x00 0x00 pre-defined, x = 0, 4byte, 0x00 0x00 0x00 0x00 pre-defined, x = 0, 4byte, 0x00 0x00 0x00 0x00 width, x = width, 2byte, x[1] ... x[0] height, x = height, 2byte, x[1] ... x[0] horizontal resolution: 72 dpi, x = 0x00480000, 4byte, 0x00 0x48 0x00 0x00 vertical resolution: 72 dpi, x = 0x00480000, 4byte, 0x00 0x48 0x00 0x00 data size: 0, x = 0, 4byte, 0x00 0x00 0x00 0x00 frame count: 1, x = 1, 2byte, 0x00 0x01 compressor Length, x = 0, 32byte, 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 depth, x = 0x18, 2byte, 0x00 0x18 pre-defined, x = 0xffff, 2byte, 0xff 0xff AVCC Box (AVC Configuration Box) Length of Box, x = length of Box Content, 4byte, x[3] ... x[0] Name of Box, \"avcC\", 4byte, 'a' 'v' 'c' 'C' configuration version, x = 1, 1byte, 0x01 H.264 profile (0x64 == high), x = 0x64, 1byte, 0x64 H.264 profile compatibility, x = 0x00, 1byte, 0x00 H.264 level (0x28 == 4.0), x = 0x28, 1byte, 0x28 nal unit Name - 1 (upper 6 bits == 1), x = 0xff, 1byte, 0xff number of sps (upper 3 bits == 1), x = 0xe1, 1byte, 0xe1 len of sps, x = lengthSPS, 2byte, x[1] ... x[0] sps, x = sps, nbyte, x[n] ... x[0] number of pps, x = 1, 1byte, 0x01</div len pps, x = lengthPPS, 2byte, x[1] ... x[0] pps, x = pps, nbyte, x[n] ... x[0] STSZ Box (Sample Size Box) Length of Box, x = length of Box Content, 4byte, x[3] ... x[0] Name of Box, \"stsz\", 4byte, 's' 't' 's' 'z' version and flags, x = 0, 4byte, 0x00 0x00 0x00 0x00 sample size, x = 0, 4byte, 0x00 0x00 0x00 0x00 sample count, x = 0, 4byte, 0x00 0x00 0x00 0x00 STSC Box (Sample to Chunk Box) Length of Box, x = length of Box Content, 4byte, x[3] ... x[0] Name of Box, \"stsc\", 4byte, 's' 't' 's' 'c' version and flags, x = 0, 4byte, 0x00 0x00 0x00 0x00 entry count, x = 0, 4byte, 0x00 0x00 0x00 0x00 STTS Box (Time to Sample Box) Length of Box, x = length of Box Content, 4byte, x[3] ... x[0] Name of Box, \"stts\", 4byte, 's' 't' 't' 's' version and flags, x = 0, 4byte, 0x00 0x00 0x00 0x00 entry count, x = 0, 4byte, 0x00 0x00 0x00 0x00 STCO Box (Chunk Offset Box) Length of Box, x = length of Box Content, 4byte, x[3] ... x[0] Name of Box, \"stco\", 4byte, 's' 't' 'c' 'o' version and flags, x = 0, 4byte, 0x00 0x00 0x00 0x00 entry count, x = 0, 4byte, 0x00 0x00 0x00 0x00 MVEX Box (Movie Extends Box) Length of Box, x = length of Box Content, 4byte, x[3] ... x[0] Name of Box, \"mvex\", 4byte, 'm' 'v' 'e' 'x' MEHD Box (Movie Extends Header Box) Length of Box, x = length of Box Content, 4byte, x[3] ... x[0] Name of Box, \"mehd\", 4byte, 'm' 'e' 'h' 'd' version and flags, x = 0, 4byte, 0x00 0x00 0x00 0x00 fragment duration, x = 0, 4byte, 0x00 0x00 0x00 0x00 TREX Box (Track Extends Box) Length of Box, x = length of Box Content, 4byte, x[3] ... x[0] Name of Box, \"trex\", 4byte, 't' 'r' 'e' 'x' version and flags, x = 0, 4byte, 0x00 0x00 0x00 0x00 track id, x = 1, 4byte, 0x00 0x00 0x00 0x01 default sample description index, x = 1, 4byte, 0x00 0x00 0x00 0x01 default sample duration, x = 0, 4byte, 0x00 0x00 0x00 0x00 default sample size, x = 0, 4byte, 0x00 0x00 0x00 0x00 default sample flags, x = 0x00010000, 4byte, 0x00 0x01 0x00 0x00","title":"MOOV Box (Movie Box, Movie Metadata Box)"},{"location":"Pirate-Spyglass/Theory/Video/avcff/#avc1-and-avcc-box","text":"The most Important Boxes of the MOOV for the H264 Streaming are the AVC1 and AVCC Box. They contain needed Information for the Decoder, which settings/parameter are used. This Includes Profile, Constraints, Level, SPS and PPS. More info to this can be found in H.264 .","title":"AVC1 and AVCC Box"},{"location":"Pirate-Spyglass/Theory/Video/avcff/#moof-box-movie-fragment-box","text":"The MOOF Box holds the information to a Movie Fragment, which is in the following MDAT Object. MOOF Box (Movie Fragment Box) Length of Box, x = length of Box Content, 4byte, x[3] ... x[0] Name of Box, \"moof\", 4byte, 'm' 'o' 'o' 'f' MFHD Box (Movie Fragment Header Box) Length of Box, x = length of Box Content, 4byte, x[3] ... x[0] Name of Box, \"mfhd\", 4byte, 'm' 'f' 'h' 'd' version and flags, x = 0, 4byte, 0x00 0x00 0x00 0x00 sequence number, x = sequence, 4byte, x[3] ... x[0] TRAF Box (Track Fragment Box) Length of Box, x = length of Box Content, 4byte, x[3] ... x[0] Name of Box, \"traf\", 4byte, 't' 'r' 'a' 'f' TFHD Box (Track Fragment Header Box) Length of Box, x = length of Box Content, 4byte, x[3] ... x[0] Name of Box, \"tfhd\", 4byte, 't' 'f' 'h' 'd' version and flags, x = 0x020020, 4byte, 0x00 0x02 0x00 0x20 track ID, x = 1, 4byte, 0x00 0x00 0x00 0x01 default sample flags, x = 0x01010000, 4byte, 0x01 0x01 0x00 0x00 TFDT Box (Track Fragment Base Media Decode Time Box) Length of Box, x = length of Box Content, 4byte, x[3] ... x[0] Name of Box, \"tfdt\", 4byte, 't' 'f' 'd' 't' version and flags, x = 0x01000000, 4byte, 0x01 0x00 0x00 0x00 base media decode time, x = 330*sequence, 8byte, x[7] ... x[0] TRUN Box (Track Fragment Run Box) Length of Box, x = length of Box Content, 4byte, x[3] ... x[0] Name of Box, \"trun\", 4byte, 't' 'r' 'u' 'n' version and flags, x = 0x00000305, 4byte, 0x00 0x00 0x01 0x31 sample count, x = 1, 4byte, 0x00 0x00 0x00 0x01 data offset, x = 0x70, 4byte, 0x00 0x00 0x00 0x70 first sample flags (i-frame or not), x = 0x02000000 or x = 0x01010000 , 4byte, 0x20 0x00 0x00 0x00 or 0x01 0x01 0x00 0x00 sample duration, x = 330, 4byte, 0x00 0x00 0x01 0x4a sample size, x = 4+lengthData, 4byte, x[3] ... x[0]","title":"MOOF Box (Movie Fragment Box)"},{"location":"Pirate-Spyglass/Theory/Video/avcff/#mdat-box-media-data-box","text":"The Media Box holds an Media Sample. In this Project this is a NAL Unit. MDAT Box (Media Data Box) Length of Box, x = length of Box Content, 4byte, x[3] ... x[0] Name of Box, \"mdat\", 4byte, 'm' 'd' 'a' 't' data length, x = lengthData, 4byte, x[3] ... x[0] data, x = data, nbyte, x[0] ... x[n]","title":"MDAT Box (Media Data Box)"},{"location":"Pirate-Spyglass/Theory/Video/h264/","text":"H.264 # H.264 also known as Advanced Video Coding (AVC) or AVC1 is a video compression standard for full HD Video and Audio. The standard is defined in MPEG Part 10 (H.264) ISO/IEC 14496-10. (H264 is patented but MPEG LA has allowed the free use of H.264 technologies for streaming Internet video that is free to end users.) ITU H.264 is origin of H.264 and provides public access the AVC/H264 Codec https://www.itu.int/rec/T-REC-H.264-201304-S https://en.wikipedia.org/wiki/Advanced_Video_Coding https://mpeg.chiariglione.org/standards/mpeg-4/advanced-video-coding https://doc-kurento.readthedocs.io/en/latest/knowledge/h264.html https://developer.mozilla.org/en-US/docs/Web/Media/Formats/codecs_parameter#avc_profiles Compression # The Compression of H.264 uses an algorithm that uses previous or following frames to decode the stream. The System uses I-Frames/Key-Frames that don't need any previous Information to be decoded, to initialize a Stream. Intra Coded Picture (I-Frame) Predictive Coded Picture (P-Frame) Bidirectional Coded Picture (B-Frame) An I-Frame gets send every x Frame to get an instantaneous decoding refresh (IDR). The Frame is needed to start the Stream and help to stabilize the video when packages get lost. When the picture in a video footage change to much the frames can also be corrupted, this will cause the video to glitch and a I-Frame is needed to get back on track. Many modern System have already a Hardware decoder for H264 integrated in the GPU and don't need to use the CPU, this improves the performance dramatically. Profile and Level # The profile and the added constraints indicate properties of the bitstream and video to allow a decoder and player to recognize the requirements for decoding and displaying it. The level indicates the bitrate and the required decoder performance for the profile. The Codecs, Profile, Constraints and Level gets combined in on string following the Generic ISO BMFF syntax eg. \"avc1.640028\". Some Codes are much longer! codec profile constraints level avc1 0x64 0x00 0x28 h264 high none 4.0 Profiles code Description Base / Baseline BP, 66, 0x42 Primarily for low-cost applications that require additional data loss robustness, this profile is used in some videoconferencing and mobile applications. Extended XP, 88, 0x58 Intended as the streaming video profile, this profile has relatively high compression capability and some extra tricks for robustness to data losses and server stream switching. Main MP, 77, 0x4D This profile is used for standard-definition digital TV broadcasts that use the MPEG-4 format as defined in the DVB standard. High HiP, 100, 0x64 The primary profile for broadcast and disc storage applications, particularly for high-definition television applications. This is the most commonly used profile. This Profile is also used in the default RPI Video Stream on /dev/video0 when H264 is selected as pixel format More ... eg. Hi444PP, 244, 0xF4 Different Constraints set and also some special Profile properties. Levels code Maximum video bit rate (kbits/s) ... ... ... 3 30, 0x1E 10,000 3.1 31, 0x1F 14,000 3.2 31, 0x20 20,000 4 40, 0x28 20,000 4.1 41, 0x29 50,000 4.2 42, 0x2A 50,000 ... ... ... https://doc-kurento.readthedocs.io/en/latest/knowledge/h264.html#profiles-and-levels NAL Unit # Network Abstraction Layer (NAL) is a Part of AVC video Coding standards for simple interfacing of the video stream with different network transport mechanisms. NAL Units are packets with data as bytes with a small header that defines the content. NAL Units get differentiated in two types: - Video Coding Layer (VCL) NAL Units contain data to a Video Picture - Non-VCL NAL Units contain associated additional information Each NAL Unit starts with a Access Unit Delimiter 0x00, 0x00, 0x00, 0x01 . With this Delimiter a Buffer can be Split up in the single NAl Units. The first Byte after the Delimiter holds the information, what type it is and what information it contains. By using an bitwise AND on the first Byte of the Nal, it can be easily detected if it is I-Frame, P-Frame, PPS or SPS. The first 3 bit are not important to define what NALType the NAL Unit is and what it contains. In berryMSE we use nalType = nal_unit[0] & 0x1F to find out which information the NAL Unit Contains. nalType Description 1 Non I Frame, P Slice, P Frame, NonIDR, VCL 5 I Frame, I Slice, Intra Frame, Key Frame, IDR, VCL 7 SPS, non-VCL 8 PPS, non-VCL https://doc-kurento.readthedocs.io/en/latest/knowledge/h264.html#nal-units-nalu https://www.itu.int/rec/T-REC-H.264-201304-S Page 40/41/62/63 (59/60/84/85) PPS and SPS # The Sequence Parameter Set (SPS) and the Picture Parameter Set (PPS) contain information for the decoder. The SPS contains constraints for a series of Pictures and the PPS for one or more individual pictures of a sequence. SPS contains in the first 3 Bytes (After NALType) the Codec info about Profile, Constraints and Level. This means it changes between different Cameras. It also contains Information about the macroblock Width and Height used for decoding. When changing the picture resolution this will change to fit. PPS contains special codec infos for single Pictures in a Sequence. It most of the time doesn't change but will be sometimes be different, when changing the Bitrate. E.g. Raspberry Pi 3B+ SPS/PPS for H.264 Main 4.0 1280x720 Sequence Parameter Set sps := []byte{ 0x27, 0x64, 0x00, 0x28, 0xac, 0x2b, 0x40, 0x28, 0x02, 0xdd, 0x00, 0xf1, 0x22, 0x6a, } Picture Parameter Set pps := []byte{ 0x28, 0xee, 0x02, 0x5c, 0xb0, 0x00, } https://doc-kurento.readthedocs.io/en/latest/knowledge/h264.html#sps-pps https://www.cardinalpeak.com/blog/the-h-264-sequence-parameter-set https://www.itu.int/rec/T-REC-H.264-201304-S Page 40/41/45 (59/60/64) H263 and H265 # H263 (MPEG4 Part 2) previous development and only focused on low bit rates for conferences with less motion in pictures. H264 reaches with its compression lower bitrate (almost 50%) and better video quality. H265 (MPEG-H Part 2) latest development also known as High Efficiency Video Coding (HEVC). It got a much better compression, almost doubled.","title":"H.264"},{"location":"Pirate-Spyglass/Theory/Video/h264/#h264","text":"H.264 also known as Advanced Video Coding (AVC) or AVC1 is a video compression standard for full HD Video and Audio. The standard is defined in MPEG Part 10 (H.264) ISO/IEC 14496-10. (H264 is patented but MPEG LA has allowed the free use of H.264 technologies for streaming Internet video that is free to end users.) ITU H.264 is origin of H.264 and provides public access the AVC/H264 Codec https://www.itu.int/rec/T-REC-H.264-201304-S https://en.wikipedia.org/wiki/Advanced_Video_Coding https://mpeg.chiariglione.org/standards/mpeg-4/advanced-video-coding https://doc-kurento.readthedocs.io/en/latest/knowledge/h264.html https://developer.mozilla.org/en-US/docs/Web/Media/Formats/codecs_parameter#avc_profiles","title":"H.264"},{"location":"Pirate-Spyglass/Theory/Video/h264/#compression","text":"The Compression of H.264 uses an algorithm that uses previous or following frames to decode the stream. The System uses I-Frames/Key-Frames that don't need any previous Information to be decoded, to initialize a Stream. Intra Coded Picture (I-Frame) Predictive Coded Picture (P-Frame) Bidirectional Coded Picture (B-Frame) An I-Frame gets send every x Frame to get an instantaneous decoding refresh (IDR). The Frame is needed to start the Stream and help to stabilize the video when packages get lost. When the picture in a video footage change to much the frames can also be corrupted, this will cause the video to glitch and a I-Frame is needed to get back on track. Many modern System have already a Hardware decoder for H264 integrated in the GPU and don't need to use the CPU, this improves the performance dramatically.","title":"Compression"},{"location":"Pirate-Spyglass/Theory/Video/h264/#profile-and-level","text":"The profile and the added constraints indicate properties of the bitstream and video to allow a decoder and player to recognize the requirements for decoding and displaying it. The level indicates the bitrate and the required decoder performance for the profile. The Codecs, Profile, Constraints and Level gets combined in on string following the Generic ISO BMFF syntax eg. \"avc1.640028\". Some Codes are much longer! codec profile constraints level avc1 0x64 0x00 0x28 h264 high none 4.0 Profiles code Description Base / Baseline BP, 66, 0x42 Primarily for low-cost applications that require additional data loss robustness, this profile is used in some videoconferencing and mobile applications. Extended XP, 88, 0x58 Intended as the streaming video profile, this profile has relatively high compression capability and some extra tricks for robustness to data losses and server stream switching. Main MP, 77, 0x4D This profile is used for standard-definition digital TV broadcasts that use the MPEG-4 format as defined in the DVB standard. High HiP, 100, 0x64 The primary profile for broadcast and disc storage applications, particularly for high-definition television applications. This is the most commonly used profile. This Profile is also used in the default RPI Video Stream on /dev/video0 when H264 is selected as pixel format More ... eg. Hi444PP, 244, 0xF4 Different Constraints set and also some special Profile properties. Levels code Maximum video bit rate (kbits/s) ... ... ... 3 30, 0x1E 10,000 3.1 31, 0x1F 14,000 3.2 31, 0x20 20,000 4 40, 0x28 20,000 4.1 41, 0x29 50,000 4.2 42, 0x2A 50,000 ... ... ... https://doc-kurento.readthedocs.io/en/latest/knowledge/h264.html#profiles-and-levels","title":"Profile and Level"},{"location":"Pirate-Spyglass/Theory/Video/h264/#nal-unit","text":"Network Abstraction Layer (NAL) is a Part of AVC video Coding standards for simple interfacing of the video stream with different network transport mechanisms. NAL Units are packets with data as bytes with a small header that defines the content. NAL Units get differentiated in two types: - Video Coding Layer (VCL) NAL Units contain data to a Video Picture - Non-VCL NAL Units contain associated additional information Each NAL Unit starts with a Access Unit Delimiter 0x00, 0x00, 0x00, 0x01 . With this Delimiter a Buffer can be Split up in the single NAl Units. The first Byte after the Delimiter holds the information, what type it is and what information it contains. By using an bitwise AND on the first Byte of the Nal, it can be easily detected if it is I-Frame, P-Frame, PPS or SPS. The first 3 bit are not important to define what NALType the NAL Unit is and what it contains. In berryMSE we use nalType = nal_unit[0] & 0x1F to find out which information the NAL Unit Contains. nalType Description 1 Non I Frame, P Slice, P Frame, NonIDR, VCL 5 I Frame, I Slice, Intra Frame, Key Frame, IDR, VCL 7 SPS, non-VCL 8 PPS, non-VCL https://doc-kurento.readthedocs.io/en/latest/knowledge/h264.html#nal-units-nalu https://www.itu.int/rec/T-REC-H.264-201304-S Page 40/41/62/63 (59/60/84/85)","title":"NAL Unit"},{"location":"Pirate-Spyglass/Theory/Video/h264/#pps-and-sps","text":"The Sequence Parameter Set (SPS) and the Picture Parameter Set (PPS) contain information for the decoder. The SPS contains constraints for a series of Pictures and the PPS for one or more individual pictures of a sequence. SPS contains in the first 3 Bytes (After NALType) the Codec info about Profile, Constraints and Level. This means it changes between different Cameras. It also contains Information about the macroblock Width and Height used for decoding. When changing the picture resolution this will change to fit. PPS contains special codec infos for single Pictures in a Sequence. It most of the time doesn't change but will be sometimes be different, when changing the Bitrate. E.g. Raspberry Pi 3B+ SPS/PPS for H.264 Main 4.0 1280x720 Sequence Parameter Set sps := []byte{ 0x27, 0x64, 0x00, 0x28, 0xac, 0x2b, 0x40, 0x28, 0x02, 0xdd, 0x00, 0xf1, 0x22, 0x6a, } Picture Parameter Set pps := []byte{ 0x28, 0xee, 0x02, 0x5c, 0xb0, 0x00, } https://doc-kurento.readthedocs.io/en/latest/knowledge/h264.html#sps-pps https://www.cardinalpeak.com/blog/the-h-264-sequence-parameter-set https://www.itu.int/rec/T-REC-H.264-201304-S Page 40/41/45 (59/60/64)","title":"PPS and SPS"},{"location":"Pirate-Spyglass/Theory/Video/h264/#h263-and-h265","text":"H263 (MPEG4 Part 2) previous development and only focused on low bit rates for conferences with less motion in pictures. H264 reaches with its compression lower bitrate (almost 50%) and better video quality. H265 (MPEG-H Part 2) latest development also known as High Efficiency Video Coding (HEVC). It got a much better compression, almost doubled.","title":"H263 and H265"},{"location":"Pirate-Spyglass/Theory/Video/mpeg4/","text":"MPEG-4 (ISO/IEC-14496) # MPEG-4 is a Standard for Coding of audio-visual objects from MPEG (The Moving Picture Experts Group). Important for the project berryMSE are only a view Parts from this standard needed. The most important and used ones can be found in this Section. MPEG-4 Part 10 Advanced Video Coding (AVC) H.264 ISO/IEC 14496-10 # Part 10 of MPEG-4 defines the H.264 Compression. The RPI Camera outputs data in this format in the Device Node e.g. /dev/video0 channel, if Pixelformat \"H264\" in V4L2 driver is selected. The BerryMSE code configures the Device Node in that way that two NAL Units can be stored and retrieved. BerryMSE uses the given H264 directly. After adding MPEG-4 Part 12 and Part 15 extensions, it sends it to the Client. The Client uses the Media Source Extensions (MSE) to display the video. The MSE can decode the H264 Video on its own, this is why Encoding and Decoding isn't needed in this Project. More to MPEG-4 Part 10 can be found here in H.264 . MPEG-4 Part 12 ISO Base Media File Format (ISOBMFF) ISO/IEC 14496-12 # MPEG-4 Part 12 defines the structure for time-based files for video and audio. The file-structure is object oriented, mean all Data is contained in blocks called Boxes. Sometimes they get called Containers or Atoms. Every Box is identified by a 4 byte/char Type indicator (e.g. \"ftyp\") followed by its size/length in bytes (int32). The Content of the Box is depending on its type and can also be other boxes. In MPEG-4 Part 15 AVC File Format the ISOBMFF is used in a streaming Application to pack single NAL Units of the H264 Video. https://en.wikipedia.org/wiki/ISO/IEC_base_media_file_format https://mpeg.chiariglione.org/standards/mpeg-4/iso-base-media-file-format MPEG-4 Part 14 MP4 File Format ISO/IEC 14496-14 # MPEG-4 Part 14 set the standard for MP4 Files. It stores the video and audio in a File as MP4 based on the ISOBMFF File Structure (MPEG-4 Part 12). The Video can be a H264 (MPEG Part 10), H265 (MPEG-H Part 2) or an older MPEG Compression Format. https://mpeg.chiariglione.org/standards/mpeg-4/mp4-file-format https://en.wikipedia.org/wiki/MPEG-4_Part_14 MPEG-4 Part 15 Advanced Video Coding (AVC) file format ISO/IEC 14496-15 # MPEG-4 Part 15 defines the storage and transport of NAL Units from AVC/H264 (MPEG-4 Part 10) Streams in ISOBMFF File Format (MPEG-4 Part 12). MPEG AVC File Format is sometimes called \"Carriage of NAL unit structured video in the ISO Base Media File Format\". MP4 (MPEG-4 Part 14) uses a similar ISOBMFF storage box format. https://mpeg.chiariglione.org/standards/mpeg-4/carriage-nal-unit-structured-video-iso-base-media-file-format Fragmented Movie Architecture: Source: https://alexzambelli.com/blog/wp-content/uploads/smooth_slide16.png In MPEG AVC File Format every Frame/NAL Unit is stored in its own independent ISOBMFF sample. The Initial sample doesn't hold any Video/Audio data only Settings and Parameters for the streaming. This settings are needed to configure the Decoder. The Decoder can than Decode the Media Data in the Fragments. Each Fragment comes with its own Information Header Box, which holds the media data length and sequence number of the segment. Fragment Architecture: Source: https://alexzambelli.com/blog/wp-content/uploads/smooth_slide17.png (Fragmented Movies Similar Technologie from Microsoft based on MEPG-4 Part 12 but not Part 15 https://alexzambelli.com/blog/2009/02/10/smooth-streaming-architecture/ https://alexzambelli.com/blog/smooth-streaming-faq/ ) The Typical File Structure can be seen in the File Tree Below. Typical ISOBMFF Structure for Streaming Application. Source: https://mpeg.chiariglione.org/standards/mpeg-4/iso-base-media-file-format Source: https://mpeg.chiariglione.org/sites/default/files/files/standards/parts/docs/N18093_ISOFF%28TS%29.pptx MOOV is the Initial Sample and holds all Information about the Video (e.g. Audio/Video Track, Codec,..). It is very Complex and contains a big amount of Boxes as it can be seen in the Picture. The AVC FF Structure and Values used in BerryMSE is shown in AVC File Format Example . Also some of the Important Boxes are explained. Segments in a Streaming Application (BerryMSE). Source: https://mpeg.chiariglione.org/standards/mpeg-4/iso-base-media-file-format Source: https://mpeg.chiariglione.org/sites/default/files/files/standards/parts/docs/N18093_ISOFF%28TS%29.pptx An Streaming Application needs only the Initial Segment and a Media Segment with a I-Frame to show the video. Previous moof and mdat can be discarded. The Media Source Extension (MSE) of Browsers can handle a Streams based on MPEG-4 Part 15 AVC File Format. Each NAL Unit gets send separate and is combined in the SourceBuffer of the MSE. This would allow to send the H.264 from a Camera directly to the User, which means the host would no longer need to decode and encode the video stream. The project BerryMSE and pi_streaming use this Methode of sending each NAL Unit separate as a Websocket Msg to the User. BerryMSE uses the MSE and pi_streaming uses a Javascript to decode the video.","title":"MPEG-4 (ISO/IEC-14496)"},{"location":"Pirate-Spyglass/Theory/Video/mpeg4/#mpeg-4-isoiec-14496","text":"MPEG-4 is a Standard for Coding of audio-visual objects from MPEG (The Moving Picture Experts Group). Important for the project berryMSE are only a view Parts from this standard needed. The most important and used ones can be found in this Section.","title":"MPEG-4 (ISO/IEC-14496)"},{"location":"Pirate-Spyglass/Theory/Video/mpeg4/#mpeg-4-part-10-advanced-video-coding-avc-h264-isoiec-14496-10","text":"Part 10 of MPEG-4 defines the H.264 Compression. The RPI Camera outputs data in this format in the Device Node e.g. /dev/video0 channel, if Pixelformat \"H264\" in V4L2 driver is selected. The BerryMSE code configures the Device Node in that way that two NAL Units can be stored and retrieved. BerryMSE uses the given H264 directly. After adding MPEG-4 Part 12 and Part 15 extensions, it sends it to the Client. The Client uses the Media Source Extensions (MSE) to display the video. The MSE can decode the H264 Video on its own, this is why Encoding and Decoding isn't needed in this Project. More to MPEG-4 Part 10 can be found here in H.264 .","title":"MPEG-4 Part 10 Advanced Video Coding (AVC) H.264 ISO/IEC 14496-10"},{"location":"Pirate-Spyglass/Theory/Video/mpeg4/#mpeg-4-part-12-iso-base-media-file-format-isobmff-isoiec-14496-12","text":"MPEG-4 Part 12 defines the structure for time-based files for video and audio. The file-structure is object oriented, mean all Data is contained in blocks called Boxes. Sometimes they get called Containers or Atoms. Every Box is identified by a 4 byte/char Type indicator (e.g. \"ftyp\") followed by its size/length in bytes (int32). The Content of the Box is depending on its type and can also be other boxes. In MPEG-4 Part 15 AVC File Format the ISOBMFF is used in a streaming Application to pack single NAL Units of the H264 Video. https://en.wikipedia.org/wiki/ISO/IEC_base_media_file_format https://mpeg.chiariglione.org/standards/mpeg-4/iso-base-media-file-format","title":"MPEG-4 Part 12 ISO Base Media File Format (ISOBMFF) ISO/IEC 14496-12"},{"location":"Pirate-Spyglass/Theory/Video/mpeg4/#mpeg-4-part-14-mp4-file-format-isoiec-14496-14","text":"MPEG-4 Part 14 set the standard for MP4 Files. It stores the video and audio in a File as MP4 based on the ISOBMFF File Structure (MPEG-4 Part 12). The Video can be a H264 (MPEG Part 10), H265 (MPEG-H Part 2) or an older MPEG Compression Format. https://mpeg.chiariglione.org/standards/mpeg-4/mp4-file-format https://en.wikipedia.org/wiki/MPEG-4_Part_14","title":"MPEG-4 Part 14 MP4 File Format ISO/IEC 14496-14"},{"location":"Pirate-Spyglass/Theory/Video/mpeg4/#mpeg-4-part-15-advanced-video-coding-avc-file-format-isoiec-14496-15","text":"MPEG-4 Part 15 defines the storage and transport of NAL Units from AVC/H264 (MPEG-4 Part 10) Streams in ISOBMFF File Format (MPEG-4 Part 12). MPEG AVC File Format is sometimes called \"Carriage of NAL unit structured video in the ISO Base Media File Format\". MP4 (MPEG-4 Part 14) uses a similar ISOBMFF storage box format. https://mpeg.chiariglione.org/standards/mpeg-4/carriage-nal-unit-structured-video-iso-base-media-file-format Fragmented Movie Architecture: Source: https://alexzambelli.com/blog/wp-content/uploads/smooth_slide16.png In MPEG AVC File Format every Frame/NAL Unit is stored in its own independent ISOBMFF sample. The Initial sample doesn't hold any Video/Audio data only Settings and Parameters for the streaming. This settings are needed to configure the Decoder. The Decoder can than Decode the Media Data in the Fragments. Each Fragment comes with its own Information Header Box, which holds the media data length and sequence number of the segment. Fragment Architecture: Source: https://alexzambelli.com/blog/wp-content/uploads/smooth_slide17.png (Fragmented Movies Similar Technologie from Microsoft based on MEPG-4 Part 12 but not Part 15 https://alexzambelli.com/blog/2009/02/10/smooth-streaming-architecture/ https://alexzambelli.com/blog/smooth-streaming-faq/ ) The Typical File Structure can be seen in the File Tree Below. Typical ISOBMFF Structure for Streaming Application. Source: https://mpeg.chiariglione.org/standards/mpeg-4/iso-base-media-file-format Source: https://mpeg.chiariglione.org/sites/default/files/files/standards/parts/docs/N18093_ISOFF%28TS%29.pptx MOOV is the Initial Sample and holds all Information about the Video (e.g. Audio/Video Track, Codec,..). It is very Complex and contains a big amount of Boxes as it can be seen in the Picture. The AVC FF Structure and Values used in BerryMSE is shown in AVC File Format Example . Also some of the Important Boxes are explained. Segments in a Streaming Application (BerryMSE). Source: https://mpeg.chiariglione.org/standards/mpeg-4/iso-base-media-file-format Source: https://mpeg.chiariglione.org/sites/default/files/files/standards/parts/docs/N18093_ISOFF%28TS%29.pptx An Streaming Application needs only the Initial Segment and a Media Segment with a I-Frame to show the video. Previous moof and mdat can be discarded. The Media Source Extension (MSE) of Browsers can handle a Streams based on MPEG-4 Part 15 AVC File Format. Each NAL Unit gets send separate and is combined in the SourceBuffer of the MSE. This would allow to send the H.264 from a Camera directly to the User, which means the host would no longer need to decode and encode the video stream. The project BerryMSE and pi_streaming use this Methode of sending each NAL Unit separate as a Websocket Msg to the User. BerryMSE uses the MSE and pi_streaming uses a Javascript to decode the video.","title":"MPEG-4 Part 15 Advanced Video Coding (AVC) file format ISO/IEC 14496-15"},{"location":"Pirate-Spyglass/Theory/Video/mse/","text":"Media Source Extension (MSE) aka Media Source API # Is an API/Extension many Browser already have integrated and Support. This means now Plugins or extra Software is needed to use it. Only Safari on iOS seem to still not support it completely, see https://caniuse.com/mediasource . MSE allows websites to run more advanced Video and Audio application, without any extra Software. By using a MediasSource Object to replaces the single Video/Audio track in the ''src'' of Video and Audio Element. This adds new methods to manipulate and control the video. https://developer.mozilla.org/en-US/docs/Web/API/Media_Source_Extensions_API MediaSource Object # The MediaSource object from MSE can be used as ''src'' for Audio and Video. The MediaSource Object controls the Video and Audio, this allows the usage of more complex Video and Audio formats like MP4 Container or H.264 Video Codec. The Website now can use H.264 and doesn't need a Plugin or extra Code to encode the Video. The MediaSource Object needs a SourceBuffer that stores/buffers the Video/Audio data. When creating the SourceBuffer by mediaSourceObject.addSourceBuffer(mimeCodec) a mimeCodec is needed. https://developer.mozilla.org/en-US/docs/Web/API/MediaSource SourceBuffer # The SourceBuffer holds and controls the stored/buffered Audio/Video. When adding a SourceBuffer to the MediaSource a mimeCodec information is needed so the Buffer knows what type of codec got used. The SourceBuffer has an append function that allows the appending of new sections of a video. This allows the usage of a Stream based on MPEG-4 Part 15 to be stored and displayed. The default video Element with the MediaSource will always Buffer a small section before displaying the stream, this would cause some latency for the Enduser. By forcing it to jump to the last Frame received it will be much less Latency, but a check need to performed to check if the source finished decoding. The Buffer only stores a few 100MB of Video (15min by 1280/720@30fps) and will discard older data, even if seekable range in the video field shows older video data. https://developer.mozilla.org/en-US/docs/Web/API/SourceBuffer MimeCodec # MIME (Multipurpose internet mail extensions) Codec holds the Codec information of the Video and Audio. In case of a H264 Video this would be the Codec, Profile, Constraints and Level e.g. \"AVC1.640028\"(see H.264 ). https://developer.mozilla.org/en-US/docs/Glossary/MIME_type https://developer.mozilla.org/en-US/docs/Web/Media/Formats/codecs_parameter#avc_profiles","title":"Media Source Extension (MSE) aka Media Source API"},{"location":"Pirate-Spyglass/Theory/Video/mse/#media-source-extension-mse-aka-media-source-api","text":"Is an API/Extension many Browser already have integrated and Support. This means now Plugins or extra Software is needed to use it. Only Safari on iOS seem to still not support it completely, see https://caniuse.com/mediasource . MSE allows websites to run more advanced Video and Audio application, without any extra Software. By using a MediasSource Object to replaces the single Video/Audio track in the ''src'' of Video and Audio Element. This adds new methods to manipulate and control the video. https://developer.mozilla.org/en-US/docs/Web/API/Media_Source_Extensions_API","title":"Media Source Extension (MSE) aka Media Source API"},{"location":"Pirate-Spyglass/Theory/Video/mse/#mediasource-object","text":"The MediaSource object from MSE can be used as ''src'' for Audio and Video. The MediaSource Object controls the Video and Audio, this allows the usage of more complex Video and Audio formats like MP4 Container or H.264 Video Codec. The Website now can use H.264 and doesn't need a Plugin or extra Code to encode the Video. The MediaSource Object needs a SourceBuffer that stores/buffers the Video/Audio data. When creating the SourceBuffer by mediaSourceObject.addSourceBuffer(mimeCodec) a mimeCodec is needed. https://developer.mozilla.org/en-US/docs/Web/API/MediaSource","title":"MediaSource Object"},{"location":"Pirate-Spyglass/Theory/Video/mse/#sourcebuffer","text":"The SourceBuffer holds and controls the stored/buffered Audio/Video. When adding a SourceBuffer to the MediaSource a mimeCodec information is needed so the Buffer knows what type of codec got used. The SourceBuffer has an append function that allows the appending of new sections of a video. This allows the usage of a Stream based on MPEG-4 Part 15 to be stored and displayed. The default video Element with the MediaSource will always Buffer a small section before displaying the stream, this would cause some latency for the Enduser. By forcing it to jump to the last Frame received it will be much less Latency, but a check need to performed to check if the source finished decoding. The Buffer only stores a few 100MB of Video (15min by 1280/720@30fps) and will discard older data, even if seekable range in the video field shows older video data. https://developer.mozilla.org/en-US/docs/Web/API/SourceBuffer","title":"SourceBuffer"},{"location":"Pirate-Spyglass/Theory/Video/mse/#mimecodec","text":"MIME (Multipurpose internet mail extensions) Codec holds the Codec information of the Video and Audio. In case of a H264 Video this would be the Codec, Profile, Constraints and Level e.g. \"AVC1.640028\"(see H.264 ). https://developer.mozilla.org/en-US/docs/Glossary/MIME_type https://developer.mozilla.org/en-US/docs/Web/Media/Formats/codecs_parameter#avc_profiles","title":"MimeCodec"},{"location":"Pirate-Spyglass/Theory/Video/utilities/","text":"Utilities for H264 # Jus a small collection of useful tools that have been used in the research of the Project: SPS and PPS extracting h264 bit streamer # With the H264Bitstreamer Application from https://github.com/aizvorski/h264bitstream , the H264 input device node or files can be checked for H264. It produces and very detailed list of each bit of the SPS and PPS. fix error # https://github.com/aizvorski/h264bitstream/issues/25 Result # https://www.cardinalpeak.com/blog/the-h-264-sequence-parameter-set ffprobe # FF Probe allows to analyse Files or input Devices and lets you see detailed information about the stream that is provided. https://bitmovin.com/fun-with-container-formats-2/ https://stackoverflow.com/questions/8954609/how-to-get-h264-video-info mp4ff # A Go Lib that can created the AVC File Format https://github.com/edgeware/mp4ff/blob/v0.26.1/examples/initcreator/main.go Module in JS # When including a JS in a HTML all function will be loaded in and if the function have the same name only the last loaded one will stay. To prevent this, it is good to capsule the Code as a Module or Class. https://stackoverflow.com/questions/14765571/calling-a-function-with-same-name-in-another-js-file/14765929","title":"Utilities for H264"},{"location":"Pirate-Spyglass/Theory/Video/utilities/#utilities-for-h264","text":"Jus a small collection of useful tools that have been used in the research of the Project:","title":"Utilities for H264"},{"location":"Pirate-Spyglass/Theory/Video/utilities/#sps-and-pps-extracting-h264-bit-streamer","text":"With the H264Bitstreamer Application from https://github.com/aizvorski/h264bitstream , the H264 input device node or files can be checked for H264. It produces and very detailed list of each bit of the SPS and PPS.","title":"SPS and PPS extracting h264 bit streamer"},{"location":"Pirate-Spyglass/Theory/Video/utilities/#fix-error","text":"https://github.com/aizvorski/h264bitstream/issues/25","title":"fix error"},{"location":"Pirate-Spyglass/Theory/Video/utilities/#result","text":"https://www.cardinalpeak.com/blog/the-h-264-sequence-parameter-set","title":"Result"},{"location":"Pirate-Spyglass/Theory/Video/utilities/#ffprobe","text":"FF Probe allows to analyse Files or input Devices and lets you see detailed information about the stream that is provided. https://bitmovin.com/fun-with-container-formats-2/ https://stackoverflow.com/questions/8954609/how-to-get-h264-video-info","title":"ffprobe"},{"location":"Pirate-Spyglass/Theory/Video/utilities/#mp4ff","text":"A Go Lib that can created the AVC File Format https://github.com/edgeware/mp4ff/blob/v0.26.1/examples/initcreator/main.go","title":"mp4ff"},{"location":"Pirate-Spyglass/Theory/Video/utilities/#module-in-js","text":"When including a JS in a HTML all function will be loaded in and if the function have the same name only the last loaded one will stay. To prevent this, it is good to capsule the Code as a Module or Class. https://stackoverflow.com/questions/14765571/calling-a-function-with-same-name-in-another-js-file/14765929","title":"Module in JS"}]}